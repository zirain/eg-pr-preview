<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>User Guides on Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/</link><description>Recent content in User Guides on Envoy Gateway</description><generator>Hugo</generator><language>en</language><atom:link href="https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/index.xml" rel="self" type="application/rss+xml"/><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/quickstart/</guid><description>&lt;p>This guide will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/6-test-preview/eg-pr-preview/6-test-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the Gateway API CRDs and Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.4.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the GatewayClass, Gateway, HTTPRoute and example app:&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides a &lt;a href="https://zirain.github.io/eg-pr-preview/6-test-preview/eg-pr-preview/6-test-preview/v0.4/api/config_types/#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in GatewayClass y cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="add-gatewayclass-parametersref">Add GatewayClass ParametersRef&lt;a class="td-heading-self-link" href="#add-gatewayclass-parametersref" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>First, you need to add ParametersRef in GatewayClass, and refer to EnvoyProxy Config:&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/deployment-mode/</guid><description>&lt;h3 id="one-gatewayclass-per-envoy-gateway">One GatewayClass per Envoy Gateway&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Envoy Gateway can accept a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>
resource. If you&amp;rsquo;ve instantiated multiple GatewayClasses, we recommend running multiple Envoy Gateway controllers
in different namespaces, linking a GatewayClass to each of them.&lt;/li>
&lt;li>Support for accepting multiple GatewayClass is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="supported-modes">Supported Modes&lt;a class="td-heading-self-link" href="#supported-modes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>The current deployment model is - Envoy Gateway &lt;strong>watches&lt;/strong> for resources such a &lt;code>Service&lt;/code> &amp;amp; &lt;code>HTTPRoute&lt;/code> in &lt;strong>all&lt;/strong> namespaces
and &lt;strong>creates&lt;/strong> managed data plane resources such as EnvoyProxy &lt;code>Deployment&lt;/code> in the &lt;strong>namespace where Envoy Gateway is running&lt;/strong>.&lt;/li>
&lt;li>Support for alternate deployment modes is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1117">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="multi-tenancy">Multi-tenancy&lt;a class="td-heading-self-link" href="#multi-tenancy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes-1">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes-1" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>A &lt;code>tenant&lt;/code> is a group within an organization (e.g. a team or department) who shares organizational resources. We recommend
each &lt;code>tenant&lt;/code> deploy their own Envoy Gateway controller in their respective &lt;code>namespace&lt;/code>. Below is an example of deploying Envoy Gateway
by the &lt;code>marketing&lt;/code> and &lt;code>product&lt;/code> teams in separate namespaces.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/6-test-preview/eg-pr-preview/6-test-preview/v0.4/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.4.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/v0.4.0/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The manifest installs a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, a Deployment, a Service, and a GRPCRoute resource.
The GatewayClass is a cluster-scoped resource that represents a class of Gateways that can be instantiated.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/6-test-preview/eg-pr-preview/6-test-preview/v0.4/user/secure-gateways/">Secure Gateways&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This guide
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="rewrite-url-prefix-path">Rewrite URL Prefix Path&lt;a class="td-heading-self-link" href="#rewrite-url-prefix-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>You can configure to rewrite the prefix in the url like below. In this example, any curls to
&lt;code>http://${GATEWAY_HOST}/get/xxx&lt;/code> will be rewritten to &lt;code>http://${GATEWAY_HOST}/replace/xxx&lt;/code>.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Rate limit</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implements Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a>, where the rate limit is common across all the instances of Envoy proxies where its applied
i.e. if the data plane has 2 replicas of Envoy running, and the rate limit is 10 requests/second, this limit is common and will be hit
if 5 requests pass through the first replica and 5 requests pass through the second replica within the same second.&lt;/p></description></item><item><title>Request Authentication</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/authn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/authn/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/secure-gateways/</guid><description>&lt;p>This guide will help you get started using secure Gateways. The guide uses a self-signed CA, so it should be used for
testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.4.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/tls-passthrough/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This guide will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v0.4/user/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="installing-egctl">Installing egctl&lt;a class="td-heading-self-link" href="#installing-egctl" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This guide shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item></channel></rss>