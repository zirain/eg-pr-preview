<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Extensibility on Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/</link><description>Recent content in Extensibility on Envoy Gateway</description><generator>Hugo</generator><language>en</language><atom:link href="https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/index.xml" rel="self" type="application/rss+xml"/><item><title>Build a Wasm image</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/build-wasm-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/build-wasm-image/</guid><description>&lt;p>Envoy Gateway supports two types of Wasm extensions within the &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API: HTTP Wasm Extensions and Image Wasm Extensions.
Packaging a Wasm extension as an OCI image is beneficial because it simplifies versioning and distribution for users.
Additionally, users can leverage existing image toolchain to build and manage Wasm images.&lt;/p>
&lt;p>This document describes how to build OCI images which are consumable by Envoy Gateway.&lt;/p>
&lt;h2 id="wasm-image-formats">Wasm Image Formats&lt;a class="td-heading-self-link" href="#wasm-image-formats" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>There are two types of images that are supported by Envoy Gateway. One is in the Docker format, and another is the standard
OCI specification compliant format. Please note that both of them are supported by any OCI registries. You can choose
either format depending on your preference, and both types of images are consumable by Envoy Gateway &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API.&lt;/p></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/envoy-patch-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>Envoy Gateway Extension Server</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/extension-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/extension-server/</guid><description>&lt;p>This task explains how to extend Envoy Gateway using an Extension Server. Envoy Gateway
can be configured to call an external server over gRPC with the xDS configuration &lt;em>before&lt;/em>
it is sent to Envoy Proxy. The external server can modify the provided configuration
programmatically using any semantics supported by the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> API.&lt;/p>
&lt;p>Using an extension server allows vendors to add xDS configuration that Envoy Gateway itself
doesn&amp;rsquo;t support with a very high level of control over the generated xDS configuration.&lt;/p></description></item><item><title>External Processing</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/ext-proc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/ext-proc/</guid><description>&lt;p>This task provides instructions for configuring external processing.&lt;/p>
&lt;p>External processing calls an external gRPC service to process HTTP requests and responses.
The external processing service can inspect and mutate requests and responses.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure external processing.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/6-test-preview/eg-pr-preview/6-test-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Wasm Extensions</title><link>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/wasm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/6-test-preview/v1.2/tasks/extensibility/wasm/</guid><description>&lt;p>This task provides instructions for extending Envoy Gateway with WebAssembly (Wasm) extensions.&lt;/p>
&lt;p>Wasm extensions allow you to extend the functionality of Envoy Gateway by running custom code against HTTP requests and responses,
without modifying the Envoy Gateway binary. These extensions can be written in any language that compiles to Wasm, such as C++, Rust, AssemblyScript, or TinyGo.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure Wasm extensions.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item></channel></rss>