<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/</link><description>Recent content in Security on Envoy Gateway</description><generator>Hugo</generator><language>en</language><atom:link href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Backend TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/backend-tls/</guid><description>&lt;p>This task demonstrates how TLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the backend to terminate TLS connections from the Gateways.&lt;/p></description></item><item><title>Basic Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/basic-auth/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc2617">HTTP Basic authentication&lt;/a>.
HTTP Basic authentication checks if an incoming request has a valid username and password before routing the request to
a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure HTTP Basic
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>CORS</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/cors/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing (CORS)&lt;/a> on Envoy Gateway.
CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different
domain.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure CORS.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>External Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/ext-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/ext-auth/</guid><description>&lt;p>This guide provides instructions for configuring external authentication.&lt;/p>
&lt;p>External authorization calls an external HTTP or gRPC service to check whether an incoming HTTP request is authorized
or not. If the request is deemed unauthorized, then the request will be denied with a 403 (Forbidden) response. If the
request is authorized, then the request will be allowed to proceed to the backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure external authorization.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>JWT Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/jwt-authentication/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>Mutual TLS: External Clients to the Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/mutual-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/mutual-tls/</guid><description>&lt;p>This task demonstrates how mutual TLS can be achieved between external clients and the Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>OIDC Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/oidc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/oidc/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://openid.net/connect/">OpenID Connect (OIDC)&lt;/a> authentication.
OpenID Connect (OIDC) is an authentication standard built on top of OAuth 2.0.
It enables EG to rely on authentication that is performed by an OpenID Connect Provider (OP)
to verify the identity of a user.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure OIDC
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/secure-gateways/</guid><description>&lt;p>This task will help you get started using secure Gateways.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Threat Model</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/threat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/threat-model/</guid><description>&lt;h1 id="envoy-gateway-threat-model-and-end-user-recommendations">Envoy Gateway Threat Model and End User Recommendations&lt;a class="td-heading-self-link" href="#envoy-gateway-threat-model-and-end-user-recommendations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="about">About&lt;a class="td-heading-self-link" href="#about" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This work was performed by &lt;a href="https://control-plane.io/">ControlPlane&lt;/a> and commissioned by the &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>. ControlPlane is a global cloud native and open source cybersecurity consultancy, trusted as the partner of choice in securing: multinational banks; major public clouds; international financial institutions; critical national infrastructure programs; multinational oil and gas companies, healthcare and insurance providers; and global media firms.&lt;/p>
&lt;h2 id="threat-modelling-team">Threat Modelling Team&lt;a class="td-heading-self-link" href="#threat-modelling-team" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>James Callaghan, Torin van den Bulk, Eduardo Olarte&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-passthrough/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-termination/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway. The guide uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-cert-manager/</guid><description>&lt;p>This guide shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item></channel></rss>