<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/</link><description>Recent content in Design on Envoy Gateway</description><generator>Hugo</generator><language>en</language><atom:link href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Goals</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/goals/</guid><description>&lt;p>The high-level goal of the Envoy Gateway project is to attract more users to Envoy by lowering barriers to adoption
through expressive, extensible, role-oriented APIs that support a multitude of ingress and L7/L4 traffic routing
use cases; and provide a common foundation for vendors to build value-added products without having to re-engineer
fundamental interactions.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;a class="td-heading-self-link" href="#objectives" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="expressive-api">Expressive API&lt;a class="td-heading-self-link" href="#expressive-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project will expose a simple and expressive API, with defaults set for many capabilities.&lt;/p></description></item><item><title>System Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/system-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/system-design/</guid><description>&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to satisfy the requirements of Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Create a detailed design and interface specification for each system component.&lt;/li>
&lt;/ul>
&lt;h2 id="terminology">Terminology&lt;a class="td-heading-self-link" href="#terminology" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Control Plane- A collection of inter-related software components for providing application gateway and routing
functionality. The control plane is implemented by Envoy Gateway and provides services for managing the data plane.
These services are detailed in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/design/system-design/#components">components&lt;/a> section.&lt;/li>
&lt;li>Data Plane- Provides intelligent application-level traffic routing and is implemented as one or more Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/architecture.png" alt="Architecture">&lt;/p></description></item><item><title>Watching Components Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/watching/</guid><description>&lt;p>Envoy Gateway is made up of several components that communicate in-process. Some of them (namely Providers) watch
external resources, and &amp;ldquo;publish&amp;rdquo; what they see for other components to consume; others watch what another publishes and
act on it (such as the resource translator watches what the providers publish, and then publishes its own results that
are watched by another component). Some of these internally published results are consumed by multiple components.&lt;/p></description></item><item><title>Gateway API Translator Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/gatewayapi-translator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/gatewayapi-translator/</guid><description>&lt;p>The Gateway API translates external resources, e.g. GatewayClass, from the configured Provider to the Intermediate
Representation (IR).&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;a class="td-heading-self-link" href="#assumptions" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Initially target core conformance features only, to be followed by extended conformance features.&lt;/p>
&lt;h2 id="inputs-and-outputs">Inputs and Outputs&lt;a class="td-heading-self-link" href="#inputs-and-outputs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The main inputs to the Gateway API translator are:&lt;/p>
&lt;ul>
&lt;li>GatewayClass, Gateway, HTTPRoute, TLSRoute, Service, ReferenceGrant, Namespace, and Secret resources.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> ReferenceGrant is not fully implemented as of v0.2.&lt;/p>
&lt;p>The outputs of the Gateway API translator are:&lt;/p></description></item><item><title>Configuration API Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/config-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/config-api/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/51">Issue 51&lt;/a> specifies the need to design an API for configuring Envoy Gateway. The control plane is configured
statically at startup and the data plane is configured dynamically through Kubernetes resources, primarily
&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Refer to the Envoy Gateway &lt;a href="https://github.com/envoyproxy/gateway/blob/main/docs/design/SYSTEM_DESIGN.md">design doc&lt;/a> for additional details regarding
Envoy Gateway terminology and configuration.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an &lt;strong>initial&lt;/strong> API to configure Envoy Gateway at startup.&lt;/li>
&lt;li>Define an &lt;strong>initial&lt;/strong> API for configuring the managed data plane, e.g. Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Implementation of the configuration APIs.&lt;/li>
&lt;li>Define the &lt;code>status&lt;/code> subresource of the configuration APIs.&lt;/li>
&lt;li>Define a &lt;strong>complete&lt;/strong> set of APIs for configuring Envoy Gateway. As stated in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/design/config-api/#goals">Goals&lt;/a>, this document
defines the initial configuration APIs.&lt;/li>
&lt;li>Define an API for deploying/provisioning/operating Envoy Gateway. If needed, a future Envoy Gateway operator would be
responsible for designing and implementing this type of API.&lt;/li>
&lt;li>Specify tooling for managing the API, e.g. generate protos, CRDs, controller RBAC, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="control-plane-api">Control Plane API&lt;a class="td-heading-self-link" href="#control-plane-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;code>EnvoyGateway&lt;/code> API defines the control plane configuration, e.g. Envoy Gateway. Key points of this API are:&lt;/p></description></item></channel></rss>