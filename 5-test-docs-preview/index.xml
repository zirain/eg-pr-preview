<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/</link><description>Recent content on Envoy Gateway</description><generator>Hugo</generator><language>en</language><atom:link href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/index.xml" rel="self" type="application/rss+xml"/><item><title>Install with Helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/install-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/install-helm/</guid><description>&lt;p>&lt;a href="https://helm.sh">Helm&lt;/a> is a package manager for Kubernetes that automates the release and management of software on Kubernetes.&lt;/p>
&lt;p>Envoy Gateway can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, upgrading Envoy Gateway from an existing installation, or migrating from Envoy Gateway.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;p>The Envoy Gateway Helm chart is hosted by DockerHub.&lt;/p></description></item><item><title>Install with Helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/install-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/install-helm/</guid><description>&lt;p>&lt;a href="https://helm.sh">Helm&lt;/a> is a package manager for Kubernetes that automates the release and management of software on Kubernetes.&lt;/p>
&lt;p>Envoy Gateway can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, upgrading Envoy Gateway from an existing installation, or migrating from Envoy Gateway.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;p>The Envoy Gateway Helm chart is hosted by DockerHub.&lt;/p></description></item><item><title>Install with Helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/install-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/install-helm/</guid><description>&lt;p>&lt;a href="https://helm.sh">Helm&lt;/a> is a package manager for Kubernetes that automates the release and management of software on Kubernetes.&lt;/p>
&lt;p>Envoy Gateway can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, upgrading Envoy Gateway from an existing installation, or migrating from Envoy Gateway.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;p>The Envoy Gateway Helm chart is hosted by DockerHub.&lt;/p></description></item><item><title>Install with Helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/install-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/install-helm/</guid><description>&lt;p>&lt;a href="https://helm.sh">Helm&lt;/a> is a package manager for Kubernetes that automates the release and management of software on Kubernetes.&lt;/p>
&lt;p>Envoy Gateway can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, upgrading Envoy Gateway from an existing installation, or migrating from Envoy Gateway.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;p>The Envoy Gateway Helm chart is hosted by DockerHub.&lt;/p></description></item><item><title>Install with Helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/install-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/install-helm/</guid><description>&lt;p>&lt;a href="https://helm.sh">Helm&lt;/a> is a package manager for Kubernetes that automates the release and management of software on Kubernetes.&lt;/p>
&lt;p>Envoy Gateway can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, upgrading Envoy Gateway from an existing installation, or migrating from Envoy Gateway.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;p>The Envoy Gateway Helm chart is hosted by DockerHub.&lt;/p></description></item><item><title>Install with Helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/install-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/install-helm/</guid><description>&lt;p>&lt;a href="https://helm.sh">Helm&lt;/a> is a package manager for Kubernetes that automates the release and management of software on Kubernetes.&lt;/p>
&lt;p>Envoy Gateway can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, upgrading Envoy Gateway from an existing installation, or migrating from Envoy Gateway.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;p>The Envoy Gateway Helm chart is hosted by DockerHub.&lt;/p></description></item><item><title>Install with Helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/install-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/install-helm/</guid><description>&lt;p>&lt;a href="https://helm.sh">Helm&lt;/a> is a package manager for Kubernetes that automates the release and management of software on Kubernetes.&lt;/p>
&lt;p>Envoy Gateway can be installed via a Helm chart with a few simple steps, depending on if you are deploying for the first time, upgrading Envoy Gateway from an existing installation, or migrating from Envoy Gateway.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;p>The Envoy Gateway Helm chart is hosted by DockerHub.&lt;/p></description></item><item><title>Install with Kubernetes YAML</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/install-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/install-yaml/</guid><description>&lt;p>This task walks you through installing Envoy Gateway in your Kubernetes cluster.&lt;/p>
&lt;p>The manual install process does not allow for as much control over configuration
as the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/install/install-helm/">Helm install method&lt;/a>, so if you need more control over your Envoy Gateway
installation, it is recommended that you use helm.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is designed to run in Kubernetes for production. The most essential requirements are:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 1.28 or later&lt;/li>
&lt;li>The &lt;code>kubectl&lt;/code> command-line tool&lt;/li>
&lt;/ul>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="install-with-yaml">Install with YAML&lt;a class="td-heading-self-link" href="#install-with-yaml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is typically deployed to Kubernetes from the command line. If you don&amp;rsquo;t have Kubernetes, you should use &lt;code>kind&lt;/code> to create one.&lt;/p></description></item><item><title>Install with Kubernetes YAML</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/install-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/install-yaml/</guid><description>&lt;p>This task walks you through installing Envoy Gateway in your Kubernetes cluster.&lt;/p>
&lt;p>The manual install process does not allow for as much control over configuration
as the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/install/install-helm/">Helm install method&lt;/a>, so if you need more control over your Envoy Gateway
installation, it is recommended that you use helm.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is designed to run in Kubernetes for production. The most essential requirements are:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 1.28 or later&lt;/li>
&lt;li>The &lt;code>kubectl&lt;/code> command-line tool&lt;/li>
&lt;/ul>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="install-with-yaml">Install with YAML&lt;a class="td-heading-self-link" href="#install-with-yaml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is typically deployed to Kubernetes from the command line. If you don&amp;rsquo;t have Kubernetes, you should use &lt;code>kind&lt;/code> to create one.&lt;/p></description></item><item><title>Install with Kubernetes YAML</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/install-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/install-yaml/</guid><description>&lt;p>In this guide, we&amp;rsquo;ll walk you through installing Envoy Gateway in your Kubernetes cluster.&lt;/p>
&lt;p>The manual install process does not allow for as much control over configuration
as the &lt;a href="../install-helm">Helm install method&lt;/a>, so if you need more control over your Envoy Gateway
installation, it is recommended that you use helm.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is designed to run in Kubernetes for production. The most essential requirements are:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 1.25 or later&lt;/li>
&lt;li>The &lt;code>kubectl&lt;/code> command-line tool&lt;/li>
&lt;/ul>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="install-with-yaml">Install with YAML&lt;a class="td-heading-self-link" href="#install-with-yaml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is typically deployed to Kubernetes from the command line. If you don&amp;rsquo;t have Kubernetes, you should use &lt;code>kind&lt;/code> to create one.&lt;/p></description></item><item><title>Install with Kubernetes YAML</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/install-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/install-yaml/</guid><description>&lt;p>In this guide, we&amp;rsquo;ll walk you through installing Envoy Gateway in your Kubernetes cluster.&lt;/p>
&lt;p>The manual install process does not allow for as much control over configuration
as the &lt;a href="../install-helm">Helm install method&lt;/a>, so if you need more control over your Envoy Gateway
installation, it is recommended that you use helm.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is designed to run in Kubernetes for production. The most essential requirements are:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 1.25 or later&lt;/li>
&lt;li>The &lt;code>kubectl&lt;/code> command-line tool&lt;/li>
&lt;/ul>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="install-with-yaml">Install with YAML&lt;a class="td-heading-self-link" href="#install-with-yaml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is typically deployed to Kubernetes from the command line. If you don&amp;rsquo;t have Kubernetes, you should use &lt;code>kind&lt;/code> to create one.&lt;/p></description></item><item><title>Install with Kubernetes YAML</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/install-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/install-yaml/</guid><description>&lt;p>In this guide, we&amp;rsquo;ll walk you through installing Envoy Gateway in your Kubernetes cluster.&lt;/p>
&lt;p>The manual install process does not allow for as much control over configuration
as the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/install/install-helm/">Helm install method&lt;/a>, so if you need more control over your Envoy Gateway
installation, it is recommended that you use helm.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is designed to run in Kubernetes for production. The most essential requirements are:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 1.25 or later&lt;/li>
&lt;li>The &lt;code>kubectl&lt;/code> command-line tool&lt;/li>
&lt;/ul>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="install-with-yaml">Install with YAML&lt;a class="td-heading-self-link" href="#install-with-yaml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is typically deployed to Kubernetes from the command line. If you don&amp;rsquo;t have Kubernetes, you should use &lt;code>kind&lt;/code> to create one.&lt;/p></description></item><item><title>Install with Kubernetes YAML</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/install-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/install-yaml/</guid><description>&lt;p>This task walks you through installing Envoy Gateway in your Kubernetes cluster.&lt;/p>
&lt;p>The manual install process does not allow for as much control over configuration
as the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/install/install-helm/">Helm install method&lt;/a>, so if you need more control over your Envoy Gateway
installation, it is recommended that you use helm.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is designed to run in Kubernetes for production. The most essential requirements are:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 1.27 or later&lt;/li>
&lt;li>The &lt;code>kubectl&lt;/code> command-line tool&lt;/li>
&lt;/ul>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="install-with-yaml">Install with YAML&lt;a class="td-heading-self-link" href="#install-with-yaml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is typically deployed to Kubernetes from the command line. If you don&amp;rsquo;t have Kubernetes, you should use &lt;code>kind&lt;/code> to create one.&lt;/p></description></item><item><title>Install with Kubernetes YAML</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/install-yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/install-yaml/</guid><description>&lt;p>This task walks you through installing Envoy Gateway in your Kubernetes cluster.&lt;/p>
&lt;p>The manual install process does not allow for as much control over configuration
as the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/install/install-helm/">Helm install method&lt;/a>, so if you need more control over your Envoy Gateway
installation, it is recommended that you use helm.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is designed to run in Kubernetes for production. The most essential requirements are:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 1.28 or later&lt;/li>
&lt;li>The &lt;code>kubectl&lt;/code> command-line tool&lt;/li>
&lt;/ul>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Compatibility Matrix&lt;/h4>

 Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Version Compatibility Matrix&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="install-with-yaml">Install with YAML&lt;a class="td-heading-self-link" href="#install-with-yaml" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway is typically deployed to Kubernetes from the command line. If you don&amp;rsquo;t have Kubernetes, you should use &lt;code>kind&lt;/code> to create one.&lt;/p></description></item><item><title>Install egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/install-egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/install-egctl/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">What is egctl?&lt;/h4>

 &lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.

&lt;/div>

&lt;p>This task shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Install egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/install-egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/install-egctl/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">What is egctl?&lt;/h4>

 &lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.

&lt;/div>

&lt;p>This task shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Install egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/install-egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/install-egctl/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">What is egctl?&lt;/h4>

 &lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.

&lt;/div>

&lt;p>This guide shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Install egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/install-egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/install-egctl/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">What is egctl?&lt;/h4>

 &lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.

&lt;/div>

&lt;p>This guide shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Install egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/install-egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/install-egctl/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">What is egctl?&lt;/h4>

 &lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.

&lt;/div>

&lt;p>This task shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Install egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/install-egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/install-egctl/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">What is egctl?&lt;/h4>

 &lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.

&lt;/div>

&lt;p>This task shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Install egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/install-egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/install-egctl/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">What is egctl?&lt;/h4>

 &lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.

&lt;/div>

&lt;p>This task shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Control Plane Authentication using custom certs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/custom-cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/custom-cert/</guid><description>&lt;p>Envoy Gateway establishes a secure TLS connection for control plane communication between Envoy Gateway pods and the Envoy Proxy fleet. The TLS Certificates used here are self signed and generated using a job that runs before envoy gateway is created, and these certs and mounted on to the envoy gateway and envoy proxy pods.&lt;/p>
&lt;p>This task will walk you through configuring custom certs for control plane auth.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We use Cert-Manager to manage the certificates. You can install it by following the &lt;a href="https://cert-manager.io/docs/installation/kubernetes/">official guide&lt;/a>.&lt;/p></description></item><item><title>Control Plane Authentication using custom certs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/custom-cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/custom-cert/</guid><description>&lt;p>Envoy Gateway establishes a secure TLS connection for control plane communication between Envoy Gateway pods and the Envoy Proxy fleet. The TLS Certificates used here are self signed and generated using a job that runs before envoy gateway is created, and these certs and mounted on to the envoy gateway and envoy proxy pods.&lt;/p>
&lt;p>This task will walk you through configuring custom certs for control plane auth.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We use Cert-Manager to manage the certificates. You can install it by following the &lt;a href="https://cert-manager.io/docs/installation/kubernetes/">official guide&lt;/a>.&lt;/p></description></item><item><title>Control Plane Authentication using custom certs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/custom-cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/custom-cert/</guid><description>&lt;p>Envoy Gateway establishes a secure TLS connection for control plane communication between Envoy Gateway pods and the Envoy Proxy fleet. The TLS Certificates used here are self signed and generated using a job that runs before envoy gateway is created, and these certs and mounted on to the envoy gateway and envoy proxy pods.&lt;/p>
&lt;p>In this guide, we&amp;rsquo;ll walk you through configuring custom certs for control plane auth.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We use Cert-Manager to manage the certificates. You can install it by following the &lt;a href="https://cert-manager.io/docs/installation/kubernetes/">official guide&lt;/a>.&lt;/p></description></item><item><title>Control Plane Authentication using custom certs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/custom-cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/custom-cert/</guid><description>&lt;p>Envoy Gateway establishes a secure TLS connection for control plane communication between Envoy Gateway pods and the Envoy Proxy fleet. The TLS Certificates used here are self signed and generated using a job that runs before envoy gateway is created, and these certs and mounted on to the envoy gateway and envoy proxy pods.&lt;/p>
&lt;p>This task will walk you through configuring custom certs for control plane auth.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We use Cert-Manager to manage the certificates. You can install it by following the &lt;a href="https://cert-manager.io/docs/installation/kubernetes/">official guide&lt;/a>.&lt;/p></description></item><item><title>Control Plane Authentication using custom certs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/custom-cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/custom-cert/</guid><description>&lt;p>Envoy Gateway establishes a secure TLS connection for control plane communication between Envoy Gateway pods and the Envoy Proxy fleet. The TLS Certificates used here are self signed and generated using a job that runs before envoy gateway is created, and these certs and mounted on to the envoy gateway and envoy proxy pods.&lt;/p>
&lt;p>This task will walk you through configuring custom certs for control plane auth.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;a class="td-heading-self-link" href="#before-you-begin" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We use Cert-Manager to manage the certificates. You can install it by following the &lt;a href="https://cert-manager.io/docs/installation/kubernetes/">official guide&lt;/a>.&lt;/p></description></item><item><title>Roadmap</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/roadmap/</guid><description>&lt;p>This document serves as a high-level reference for Envoy Gateway users and contributors to understand the direction of
the project.&lt;/p>
&lt;h2 id="contributing-to-the-roadmap">Contributing to the Roadmap&lt;a class="td-heading-self-link" href="#contributing-to-the-roadmap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>To add a feature to the roadmap, create an &lt;a href="https://github.com/envoyproxy/gateway/issues">issue&lt;/a> or join a &lt;a href="https://docs.google.com/document/d/1leqwsHX8N-XxNEyTflYjRur462ukFxd19Rnk3Uzy55I/edit?usp=sharing">community meeting&lt;/a> to discuss your use
case. If your feature is accepted, a maintainer will assign your issue to a &lt;a href="https://github.com/envoyproxy/gateway/milestones">release milestone&lt;/a> and update
this document accordingly.&lt;/li>
&lt;li>To help with an existing roadmap item, comment on or assign yourself to the associated issue.&lt;/li>
&lt;li>If a roadmap item doesn&amp;rsquo;t have an issue, create one, assign yourself to the issue, and reference this document. A
maintainer will submit a &lt;a href="https://github.com/envoyproxy/gateway/compare">pull request&lt;/a> to add the feature to the roadmap. &lt;strong>Note:&lt;/strong> The feature should be
discussed in an issue or a community meeting before implementing it.&lt;/li>
&lt;/ul>
&lt;p>If you don&amp;rsquo;t know where to start contributing, help is needed to reduce technical, automation, and documentation debt.
Look for issues with the &lt;code>help wanted&lt;/code> label to get started.&lt;/p></description></item><item><title>Roadmap</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/roadmap/</guid><description>&lt;p>This document serves as a high-level reference for Envoy Gateway users and contributors to understand the direction of
the project.&lt;/p>
&lt;h2 id="contributing-to-the-roadmap">Contributing to the Roadmap&lt;a class="td-heading-self-link" href="#contributing-to-the-roadmap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>To add a feature to the roadmap, create an &lt;a href="https://github.com/envoyproxy/gateway/issues">issue&lt;/a> or join a &lt;a href="https://docs.google.com/document/d/1leqwsHX8N-XxNEyTflYjRur462ukFxd19Rnk3Uzy55I/edit?usp=sharing">community meeting&lt;/a> to discuss your use
case. If your feature is accepted, a maintainer will assign your issue to a &lt;a href="https://github.com/envoyproxy/gateway/milestones">release milestone&lt;/a> and update
this document accordingly.&lt;/li>
&lt;li>To help with an existing roadmap item, comment on or assign yourself to the associated issue.&lt;/li>
&lt;li>If a roadmap item doesn&amp;rsquo;t have an issue, create one, assign yourself to the issue, and reference this document. A
maintainer will submit a &lt;a href="https://github.com/envoyproxy/gateway/compare">pull request&lt;/a> to add the feature to the roadmap. &lt;strong>Note:&lt;/strong> The feature should be
discussed in an issue or a community meeting before implementing it.&lt;/li>
&lt;/ul>
&lt;p>If you don&amp;rsquo;t know where to start contributing, help is needed to reduce technical, automation, and documentation debt.
Look for issues with the &lt;code>help wanted&lt;/code> label to get started.&lt;/p></description></item><item><title>Roadmap</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/roadmap/</guid><description>&lt;p>This document serves as a high-level reference for Envoy Gateway users and contributors to understand the direction of
the project.&lt;/p>
&lt;h2 id="contributing-to-the-roadmap">Contributing to the Roadmap&lt;a class="td-heading-self-link" href="#contributing-to-the-roadmap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>To add a feature to the roadmap, create an &lt;a href="https://github.com/envoyproxy/gateway/issues">issue&lt;/a> or join a &lt;a href="https://docs.google.com/document/d/1leqwsHX8N-XxNEyTflYjRur462ukFxd19Rnk3Uzy55I/edit?usp=sharing">community meeting&lt;/a> to discuss your use
case. If your feature is accepted, a maintainer will assign your issue to a &lt;a href="https://github.com/envoyproxy/gateway/milestones">release milestone&lt;/a> and update
this document accordingly.&lt;/li>
&lt;li>To help with an existing roadmap item, comment on or assign yourself to the associated issue.&lt;/li>
&lt;li>If a roadmap item doesn&amp;rsquo;t have an issue, create one, assign yourself to the issue, and reference this document. A
maintainer will submit a &lt;a href="https://github.com/envoyproxy/gateway/compare">pull request&lt;/a> to add the feature to the roadmap. &lt;strong>Note:&lt;/strong> The feature should be
discussed in an issue or a community meeting before implementing it.&lt;/li>
&lt;/ul>
&lt;p>If you don&amp;rsquo;t know where to start contributing, help is needed to reduce technical, automation, and documentation debt.
Look for issues with the &lt;code>help wanted&lt;/code> label to get started.&lt;/p></description></item><item><title>Roadmap</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/roadmap/</guid><description>&lt;p>This document serves as a high-level reference for Envoy Gateway users and contributors to understand the direction of
the project.&lt;/p>
&lt;h2 id="contributing-to-the-roadmap">Contributing to the Roadmap&lt;a class="td-heading-self-link" href="#contributing-to-the-roadmap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>To add a feature to the roadmap, create an &lt;a href="https://github.com/envoyproxy/gateway/issues">issue&lt;/a> or join a &lt;a href="https://docs.google.com/document/d/1leqwsHX8N-XxNEyTflYjRur462ukFxd19Rnk3Uzy55I/edit?usp=sharing">community meeting&lt;/a> to discuss your use
case. If your feature is accepted, a maintainer will assign your issue to a &lt;a href="https://github.com/envoyproxy/gateway/milestones">release milestone&lt;/a> and update
this document accordingly.&lt;/li>
&lt;li>To help with an existing roadmap item, comment on or assign yourself to the associated issue.&lt;/li>
&lt;li>If a roadmap item doesn&amp;rsquo;t have an issue, create one, assign yourself to the issue, and reference this document. A
maintainer will submit a &lt;a href="https://github.com/envoyproxy/gateway/compare">pull request&lt;/a> to add the feature to the roadmap. &lt;strong>Note:&lt;/strong> The feature should be
discussed in an issue or a community meeting before implementing it.&lt;/li>
&lt;/ul>
&lt;p>If you don&amp;rsquo;t know where to start contributing, help is needed to reduce technical, automation, and documentation debt.
Look for issues with the &lt;code>help wanted&lt;/code> label to get started.&lt;/p></description></item><item><title>Roadmap</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/roadmap/</guid><description>&lt;p>This document serves as a high-level reference for Envoy Gateway users and contributors to understand the direction of
the project.&lt;/p>
&lt;h2 id="contributing-to-the-roadmap">Contributing to the Roadmap&lt;a class="td-heading-self-link" href="#contributing-to-the-roadmap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>To add a feature to the roadmap, create an &lt;a href="https://github.com/envoyproxy/gateway/issues">issue&lt;/a> or join a &lt;a href="https://docs.google.com/document/d/1leqwsHX8N-XxNEyTflYjRur462ukFxd19Rnk3Uzy55I/edit?usp=sharing">community meeting&lt;/a> to discuss your use
case. If your feature is accepted, a maintainer will assign your issue to a &lt;a href="https://github.com/envoyproxy/gateway/milestones">release milestone&lt;/a> and update
this document accordingly.&lt;/li>
&lt;li>To help with an existing roadmap item, comment on or assign yourself to the associated issue.&lt;/li>
&lt;li>If a roadmap item doesn&amp;rsquo;t have an issue, create one, assign yourself to the issue, and reference this document. A
maintainer will submit a &lt;a href="https://github.com/envoyproxy/gateway/compare">pull request&lt;/a> to add the feature to the roadmap. &lt;strong>Note:&lt;/strong> The feature should be
discussed in an issue or a community meeting before implementing it.&lt;/li>
&lt;/ul>
&lt;p>If you don&amp;rsquo;t know where to start contributing, help is needed to reduce technical, automation, and documentation debt.
Look for issues with the &lt;code>help wanted&lt;/code> label to get started.&lt;/p></description></item><item><title>Roadmap</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/roadmap/</guid><description>&lt;p>This document serves as a high-level reference for Envoy Gateway users and contributors to understand the direction of
the project.&lt;/p>
&lt;h2 id="contributing-to-the-roadmap">Contributing to the Roadmap&lt;a class="td-heading-self-link" href="#contributing-to-the-roadmap" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>To add a feature to the roadmap, create an &lt;a href="https://github.com/envoyproxy/gateway/issues">issue&lt;/a> or join a &lt;a href="https://docs.google.com/document/d/1leqwsHX8N-XxNEyTflYjRur462ukFxd19Rnk3Uzy55I/edit?usp=sharing">community meeting&lt;/a> to discuss your use
case. If your feature is accepted, a maintainer will assign your issue to a &lt;a href="https://github.com/envoyproxy/gateway/milestones">release milestone&lt;/a> and update
this document accordingly.&lt;/li>
&lt;li>To help with an existing roadmap item, comment on or assign yourself to the associated issue.&lt;/li>
&lt;li>If a roadmap item doesn&amp;rsquo;t have an issue, create one, assign yourself to the issue, and reference this document. A
maintainer will submit a &lt;a href="https://github.com/envoyproxy/gateway/compare">pull request&lt;/a> to add the feature to the roadmap. &lt;strong>Note:&lt;/strong> The feature should be
discussed in an issue or a community meeting before implementing it.&lt;/li>
&lt;/ul>
&lt;p>If you don&amp;rsquo;t know where to start contributing, help is needed to reduce technical, automation, and documentation debt.
Look for issues with the &lt;code>help wanted&lt;/code> label to get started.&lt;/p></description></item><item><title>Goals</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/goals/</guid><description>&lt;p>The high-level goal of the Envoy Gateway project is to attract more users to Envoy by lowering barriers to adoption
through expressive, extensible, role-oriented APIs that support a multitude of ingress and L7/L4 traffic routing
use cases; and provide a common foundation for vendors to build value-added products without having to re-engineer
fundamental interactions.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;a class="td-heading-self-link" href="#objectives" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="expressive-api">Expressive API&lt;a class="td-heading-self-link" href="#expressive-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project will expose a simple and expressive API, with defaults set for many capabilities.&lt;/p></description></item><item><title>Goals</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/goals/</guid><description>&lt;p>The high-level goal of the Envoy Gateway project is to attract more users to Envoy by lowering barriers to adoption
through expressive, extensible, role-oriented APIs that support a multitude of ingress and L7/L4 traffic routing
use cases; and provide a common foundation for vendors to build value-added products without having to re-engineer
fundamental interactions.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;a class="td-heading-self-link" href="#objectives" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="expressive-api">Expressive API&lt;a class="td-heading-self-link" href="#expressive-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project will expose a simple and expressive API, with defaults set for many capabilities.&lt;/p></description></item><item><title>Goals</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/goals/</guid><description>&lt;p>The high-level goal of the Envoy Gateway project is to attract more users to Envoy by lowering barriers to adoption
through expressive, extensible, role-oriented APIs that support a multitude of ingress and L7/L4 traffic routing
use cases; and provide a common foundation for vendors to build value-added products without having to re-engineer
fundamental interactions.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;a class="td-heading-self-link" href="#objectives" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="expressive-api">Expressive API&lt;a class="td-heading-self-link" href="#expressive-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project will expose a simple and expressive API, with defaults set for many capabilities.&lt;/p></description></item><item><title>Goals</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/goals/</guid><description>&lt;p>The high-level goal of the Envoy Gateway project is to attract more users to Envoy by lowering barriers to adoption
through expressive, extensible, role-oriented APIs that support a multitude of ingress and L7/L4 traffic routing
use cases; and provide a common foundation for vendors to build value-added products without having to re-engineer
fundamental interactions.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;a class="td-heading-self-link" href="#objectives" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="expressive-api">Expressive API&lt;a class="td-heading-self-link" href="#expressive-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project will expose a simple and expressive API, with defaults set for many capabilities.&lt;/p></description></item><item><title>Goals</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/goals/</guid><description>&lt;p>The high-level goal of the Envoy Gateway project is to attract more users to Envoy by lowering barriers to adoption
through expressive, extensible, role-oriented APIs that support a multitude of ingress and L7/L4 traffic routing
use cases; and provide a common foundation for vendors to build value-added products without having to re-engineer
fundamental interactions.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;a class="td-heading-self-link" href="#objectives" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="expressive-api">Expressive API&lt;a class="td-heading-self-link" href="#expressive-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project will expose a simple and expressive API, with defaults set for many capabilities.&lt;/p></description></item><item><title>Goals</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/goals/</guid><description>&lt;p>The high-level goal of the Envoy Gateway project is to attract more users to Envoy by lowering barriers to adoption
through expressive, extensible, role-oriented APIs that support a multitude of ingress and L7/L4 traffic routing
use cases; and provide a common foundation for vendors to build value-added products without having to re-engineer
fundamental interactions.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;a class="td-heading-self-link" href="#objectives" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="expressive-api">Expressive API&lt;a class="td-heading-self-link" href="#expressive-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project will expose a simple and expressive API, with defaults set for many capabilities.&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/</guid><description>&lt;p>This &amp;ldquo;quick start&amp;rdquo; will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> In case your Kubernetes cluster does not have a LoadBalancer implementation, we recommend installing one
so the &lt;code>Gateway&lt;/code> resource has an Address associated with it. We recommend using &lt;a href="https://metallb.universe.tf/installation/">MetalLB&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> For Mac user, you need install and run &lt;a href="https://github.com/chipmk/docker-mac-net-connect">Docker Mac Net Connect&lt;/a> to make the Docker network work.&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/</guid><description>&lt;p>This &amp;ldquo;quick start&amp;rdquo; will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> In case your Kubernetes cluster does not have a LoadBalancer implementation, we recommend installing one
so the &lt;code>Gateway&lt;/code> resource has an Address associated with it. We recommend using &lt;a href="https://metallb.universe.tf/installation/">MetalLB&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> For Mac user, you need install and run &lt;a href="https://github.com/chipmk/docker-mac-net-connect">Docker Mac Net Connect&lt;/a> to make the Docker network work.&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/quickstart/</guid><description>&lt;p>This guide will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the Gateway API CRDs and Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.2.0/install.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the GatewayClass, Gateway, HTTPRoute and example app:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.2.0/quickstart.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="testing-the-configuration">Testing the Configuration&lt;a class="td-heading-self-link" href="#testing-the-configuration" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Get the name of the Envoy service created the by the example Gateway:&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/quickstart/</guid><description>&lt;p>This guide will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the Gateway API CRDs and Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/install.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the GatewayClass, Gateway, HTTPRoute and example app:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/quickstart.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: &lt;a href="https://github.com/envoyproxy/gateway/releases/download/v0.3.0/quickstart.yaml">&lt;code>quickstart.yaml&lt;/code>&lt;/a> defines that Envoy Gateway will listen for
traffic on port 80 on its globally-routable IP address, to make it easy to use
browsers to test Envoy Gateway. When Envoy Gateway sees that its Listener is
using a privileged port (&amp;lt;1024), it will map this internally to an
unprivileged port, so that Envoy Gateway doesn&amp;rsquo;t need additional privileges.
It&amp;rsquo;s important to be aware of this mapping, since you may need to take it into
consideration when debugging.&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/quickstart/</guid><description>&lt;p>This guide will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the Gateway API CRDs and Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.4.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the GatewayClass, Gateway, HTTPRoute and example app:&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/quickstart/</guid><description>&lt;p>This guide will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the Gateway API CRDs and Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.5.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the GatewayClass, Gateway, HTTPRoute and example app:&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/</guid><description>&lt;p>This guide will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> In case your Kubernetes cluster, does not have a LoadBalancer implementation, we recommend installing one
so the &lt;code>Gateway&lt;/code> resource has an Address associated with it. We recommend using &lt;a href="https://metallb.universe.tf/installation/">MetalLB&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the Gateway API CRDs and Envoy Gateway:&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/</guid><description>&lt;p>This &amp;ldquo;quick start&amp;rdquo; will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> In case your Kubernetes cluster, does not have a LoadBalancer implementation, we recommend installing one
so the &lt;code>Gateway&lt;/code> resource has an Address associated with it. We recommend using &lt;a href="https://metallb.universe.tf/installation/">MetalLB&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the Gateway API CRDs and Envoy Gateway:&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/</guid><description>&lt;p>This &amp;ldquo;quick start&amp;rdquo; will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> In case your Kubernetes cluster does not have a LoadBalancer implementation, we recommend installing one
so the &lt;code>Gateway&lt;/code> resource has an Address associated with it. We recommend using &lt;a href="https://metallb.universe.tf/installation/">MetalLB&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> For Mac user, you need install and run &lt;a href="https://github.com/chipmk/docker-mac-net-connect">Docker Mac Net Connect&lt;/a> to make the Docker network work.&lt;/p></description></item><item><title>Quickstart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/</guid><description>&lt;p>This &amp;ldquo;quick start&amp;rdquo; will help you get started with Envoy Gateway in a few simple steps.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A Kubernetes cluster.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a> for supported Kubernetes versions.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> In case your Kubernetes cluster does not have a LoadBalancer implementation, we recommend installing one
so the &lt;code>Gateway&lt;/code> resource has an Address associated with it. We recommend using &lt;a href="https://metallb.universe.tf/installation/">MetalLB&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> For Mac user, you need install and run &lt;a href="https://github.com/chipmk/docker-mac-net-connect">Docker Mac Net Connect&lt;/a> to make the Docker network work.&lt;/p></description></item><item><title>Developer Guide</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/develop/</guid><description>&lt;p>Envoy Gateway is built using a &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>-based build system. Our CI is based on &lt;a href="https://docs.github.com/en/actions">Github Actions&lt;/a> using &lt;a href="https://github.com/envoyproxy/gateway/tree/main/.github/workflows">workflows&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="go">go&lt;a class="td-heading-self-link" href="#go" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Version: 1.22&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://go.dev/doc/install">https://go.dev/doc/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="make">make&lt;a class="td-heading-self-link" href="#make" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Recommended Version: 4.0 or later&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://www.gnu.org/software/make">https://www.gnu.org/software/make&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker">docker&lt;a class="td-heading-self-link" href="#docker" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Optional when you want to build a Docker image or run &lt;code>make&lt;/code> inside Docker.&lt;/li>
&lt;li>Recommended Version: 20.10.16&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://docs.docker.com/engine/install">https://docs.docker.com/engine/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="python3">python3&lt;a class="td-heading-self-link" href="#python3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Need a &lt;code>python3&lt;/code> program&lt;/li>
&lt;li>Must have a functioning &lt;code>venv&lt;/code> module; this is part of the standard
library, but some distributions (such as Debian and Ubuntu) replace
it with a stub and require you to install a &lt;code>python3-venv&lt;/code> package
separately.&lt;/li>
&lt;/ul>
&lt;h2 id="quickstart">Quickstart&lt;a class="td-heading-self-link" href="#quickstart" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Run &lt;code>make help&lt;/code> to see all the available targets to build, test and run Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h3 id="building">Building&lt;a class="td-heading-self-link" href="#building" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Run &lt;code>make build&lt;/code> to build all the binaries.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code> to build the Envoy Gateway binary.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;egctl&amp;quot;&lt;/code> to build the egctl binary.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The binaries get generated in the &lt;code>bin/$OS/$ARCH&lt;/code> directory, for example, &lt;code>bin/linux/amd64/&lt;/code>.&lt;/p></description></item><item><title>Developer Guide</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/develop/</guid><description>&lt;p>Envoy Gateway is built using a &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>-based build system. Our CI is based on &lt;a href="https://docs.github.com/en/actions">Github Actions&lt;/a> using &lt;a href="https://github.com/envoyproxy/gateway/tree/main/.github/workflows">workflows&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="go">go&lt;a class="td-heading-self-link" href="#go" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Version: 1.20&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://go.dev/doc/install">https://go.dev/doc/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="make">make&lt;a class="td-heading-self-link" href="#make" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Recommended Version: 4.0 or later&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://www.gnu.org/software/make">https://www.gnu.org/software/make&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker">docker&lt;a class="td-heading-self-link" href="#docker" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Optional when you want to build a Docker image or run &lt;code>make&lt;/code> inside Docker.&lt;/li>
&lt;li>Recommended Version: 20.10.16&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://docs.docker.com/engine/install">https://docs.docker.com/engine/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="python3">python3&lt;a class="td-heading-self-link" href="#python3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Need a &lt;code>python3&lt;/code> program&lt;/li>
&lt;li>Must have a functioning &lt;code>venv&lt;/code> module; this is part of the standard
library, but some distributions (such as Debian and Ubuntu) replace
it with a stub and require you to install a &lt;code>python3-venv&lt;/code> package
separately.&lt;/li>
&lt;/ul>
&lt;h2 id="quickstart">Quickstart&lt;a class="td-heading-self-link" href="#quickstart" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Run &lt;code>make help&lt;/code> to see all the available targets to build, test and run Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h3 id="building">Building&lt;a class="td-heading-self-link" href="#building" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Run &lt;code>make build&lt;/code> to build all the binaries.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code> to build the Envoy Gateway binary.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;egctl&amp;quot;&lt;/code> to build the egctl binary.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The binaries get generated in the &lt;code>bin/$OS/$ARCH&lt;/code> directory, for example, &lt;code>bin/linux/amd64/&lt;/code>.&lt;/p></description></item><item><title>Developer Guide</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/develop/</guid><description>&lt;p>Envoy Gateway is built using a &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>-based build system. Our CI is based on &lt;a href="https://docs.github.com/en/actions">Github Actions&lt;/a> using &lt;a href="https://github.com/envoyproxy/gateway/tree/main/.github/workflows">workflows&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="go">go&lt;a class="td-heading-self-link" href="#go" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Version: 1.20&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://go.dev/doc/install">https://go.dev/doc/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="make">make&lt;a class="td-heading-self-link" href="#make" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Recommended Version: 4.0 or later&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://www.gnu.org/software/make">https://www.gnu.org/software/make&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker">docker&lt;a class="td-heading-self-link" href="#docker" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Optional when you want to build a Docker image or run &lt;code>make&lt;/code> inside Docker.&lt;/li>
&lt;li>Recommended Version: 20.10.16&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://docs.docker.com/engine/install">https://docs.docker.com/engine/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="python3">python3&lt;a class="td-heading-self-link" href="#python3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Need a &lt;code>python3&lt;/code> program&lt;/li>
&lt;li>Must have a functioning &lt;code>venv&lt;/code> module; this is part of the standard
library, but some distributions (such as Debian and Ubuntu) replace
it with a stub and require you to install a &lt;code>python3-venv&lt;/code> package
separately.&lt;/li>
&lt;/ul>
&lt;h2 id="quickstart">Quickstart&lt;a class="td-heading-self-link" href="#quickstart" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Run &lt;code>make help&lt;/code> to see all the available targets to build, test and run Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h3 id="building">Building&lt;a class="td-heading-self-link" href="#building" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Run &lt;code>make build&lt;/code> to build all the binaries.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code> to build the Envoy Gateway binary.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;egctl&amp;quot;&lt;/code> to build the egctl binary.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The binaries get generated in the &lt;code>bin/$OS/$ARCH&lt;/code> directory, for example, &lt;code>bin/linux/amd64/&lt;/code>.&lt;/p></description></item><item><title>Developer Guide</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/develop/</guid><description>&lt;p>Envoy Gateway is built using a &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>-based build system. Our CI is based on &lt;a href="https://docs.github.com/en/actions">Github Actions&lt;/a> using &lt;a href="https://github.com/envoyproxy/gateway/tree/main/.github/workflows">workflows&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="go">go&lt;a class="td-heading-self-link" href="#go" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Version: 1.20&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://go.dev/doc/install">https://go.dev/doc/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="make">make&lt;a class="td-heading-self-link" href="#make" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Recommended Version: 4.0 or later&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://www.gnu.org/software/make">https://www.gnu.org/software/make&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker">docker&lt;a class="td-heading-self-link" href="#docker" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Optional when you want to build a Docker image or run &lt;code>make&lt;/code> inside Docker.&lt;/li>
&lt;li>Recommended Version: 20.10.16&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://docs.docker.com/engine/install">https://docs.docker.com/engine/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="python3">python3&lt;a class="td-heading-self-link" href="#python3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Need a &lt;code>python3&lt;/code> program&lt;/li>
&lt;li>Must have a functioning &lt;code>venv&lt;/code> module; this is part of the standard
library, but some distributions (such as Debian and Ubuntu) replace
it with a stub and require you to install a &lt;code>python3-venv&lt;/code> package
separately.&lt;/li>
&lt;/ul>
&lt;h2 id="quickstart">Quickstart&lt;a class="td-heading-self-link" href="#quickstart" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Run &lt;code>make help&lt;/code> to see all the available targets to build, test and run Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h3 id="building">Building&lt;a class="td-heading-self-link" href="#building" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Run &lt;code>make build&lt;/code> to build all the binaries.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code> to build the Envoy Gateway binary.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;egctl&amp;quot;&lt;/code> to build the egctl binary.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The binaries get generated in the &lt;code>bin/$OS/$ARCH&lt;/code> directory, for example, &lt;code>bin/linux/amd64/&lt;/code>.&lt;/p></description></item><item><title>Developer Guide</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/develop/</guid><description>&lt;p>Envoy Gateway is built using a &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>-based build system. Our CI is based on &lt;a href="https://docs.github.com/en/actions">Github Actions&lt;/a> using &lt;a href="https://github.com/envoyproxy/gateway/tree/main/.github/workflows">workflows&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="go">go&lt;a class="td-heading-self-link" href="#go" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Version: 1.20&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://go.dev/doc/install">https://go.dev/doc/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="make">make&lt;a class="td-heading-self-link" href="#make" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Recommended Version: 4.0 or later&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://www.gnu.org/software/make">https://www.gnu.org/software/make&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker">docker&lt;a class="td-heading-self-link" href="#docker" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Optional when you want to build a Docker image or run &lt;code>make&lt;/code> inside Docker.&lt;/li>
&lt;li>Recommended Version: 20.10.16&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://docs.docker.com/engine/install">https://docs.docker.com/engine/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="python3">python3&lt;a class="td-heading-self-link" href="#python3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Need a &lt;code>python3&lt;/code> program&lt;/li>
&lt;li>Must have a functioning &lt;code>venv&lt;/code> module; this is part of the standard
library, but some distributions (such as Debian and Ubuntu) replace
it with a stub and require you to install a &lt;code>python3-venv&lt;/code> package
separately.&lt;/li>
&lt;/ul>
&lt;h2 id="quickstart">Quickstart&lt;a class="td-heading-self-link" href="#quickstart" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Run &lt;code>make help&lt;/code> to see all the available targets to build, test and run Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h3 id="building">Building&lt;a class="td-heading-self-link" href="#building" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Run &lt;code>make build&lt;/code> to build all the binaries.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code> to build the Envoy Gateway binary.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;egctl&amp;quot;&lt;/code> to build the egctl binary.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The binaries get generated in the &lt;code>bin/$OS/$ARCH&lt;/code> directory, for example, &lt;code>bin/linux/amd64/&lt;/code>.&lt;/p></description></item><item><title>Developer Guide</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/develop/</guid><description>&lt;p>Envoy Gateway is built using a &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>-based build system. Our CI is based on &lt;a href="https://docs.github.com/en/actions">Github Actions&lt;/a> using &lt;a href="https://github.com/envoyproxy/gateway/tree/main/.github/workflows">workflows&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="go">go&lt;a class="td-heading-self-link" href="#go" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Version: 1.20&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://go.dev/doc/install">https://go.dev/doc/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="make">make&lt;a class="td-heading-self-link" href="#make" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Recommended Version: 4.0 or later&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://www.gnu.org/software/make">https://www.gnu.org/software/make&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="docker">docker&lt;a class="td-heading-self-link" href="#docker" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Optional when you want to build a Docker image or run &lt;code>make&lt;/code> inside Docker.&lt;/li>
&lt;li>Recommended Version: 20.10.16&lt;/li>
&lt;li>Installation Guide: &lt;a href="https://docs.docker.com/engine/install">https://docs.docker.com/engine/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="python3">python3&lt;a class="td-heading-self-link" href="#python3" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Need a &lt;code>python3&lt;/code> program&lt;/li>
&lt;li>Must have a functioning &lt;code>venv&lt;/code> module; this is part of the standard
library, but some distributions (such as Debian and Ubuntu) replace
it with a stub and require you to install a &lt;code>python3-venv&lt;/code> package
separately.&lt;/li>
&lt;/ul>
&lt;h2 id="quickstart">Quickstart&lt;a class="td-heading-self-link" href="#quickstart" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Run &lt;code>make help&lt;/code> to see all the available targets to build, test and run Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h3 id="building">Building&lt;a class="td-heading-self-link" href="#building" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Run &lt;code>make build&lt;/code> to build all the binaries.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;envoy-gateway&amp;quot;&lt;/code> to build the Envoy Gateway binary.&lt;/li>
&lt;li>Run &lt;code>make build BINS=&amp;quot;egctl&amp;quot;&lt;/code> to build the egctl binary.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The binaries get generated in the &lt;code>bin/$OS/$ARCH&lt;/code> directory, for example, &lt;code>bin/linux/amd64/&lt;/code>.&lt;/p></description></item><item><title>System Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/</guid><description>&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to satisfy the requirements of Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Create a detailed design and interface specification for each system component.&lt;/li>
&lt;/ul>
&lt;h2 id="terminology">Terminology&lt;a class="td-heading-self-link" href="#terminology" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Control Plane- A collection of inter-related software components for providing application gateway and routing
functionality. The control plane is implemented by Envoy Gateway and provides services for managing the data plane.
These services are detailed in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/#components">components&lt;/a> section.&lt;/li>
&lt;li>Data Plane- Provides intelligent application-level traffic routing and is implemented as one or more Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/architecture.png" alt="Architecture">&lt;/p></description></item><item><title>System Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/system-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/system-design/</guid><description>&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to satisfy the requirements of Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Create a detailed design and interface specification for each system component.&lt;/li>
&lt;/ul>
&lt;h2 id="terminology">Terminology&lt;a class="td-heading-self-link" href="#terminology" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Control Plane- A collection of inter-related software components for providing application gateway and routing
functionality. The control plane is implemented by Envoy Gateway and provides services for managing the data plane.
These services are detailed in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/design/system-design/#components">components&lt;/a> section.&lt;/li>
&lt;li>Data Plane- Provides intelligent application-level traffic routing and is implemented as one or more Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/architecture.png" alt="Architecture">&lt;/p></description></item><item><title>System Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/system-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/system-design/</guid><description>&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to satisfy the requirements of Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Create a detailed design and interface specification for each system component.&lt;/li>
&lt;/ul>
&lt;h2 id="terminology">Terminology&lt;a class="td-heading-self-link" href="#terminology" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Control Plane- A collection of inter-related software components for providing application gateway and routing
functionality. The control plane is implemented by Envoy Gateway and provides services for managing the data plane.
These services are detailed in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/design/system-design/#components">components&lt;/a> section.&lt;/li>
&lt;li>Data Plane- Provides intelligent application-level traffic routing and is implemented as one or more Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/architecture.png" alt="Architecture">&lt;/p></description></item><item><title>System Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/system-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/system-design/</guid><description>&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to satisfy the requirements of Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Create a detailed design and interface specification for each system component.&lt;/li>
&lt;/ul>
&lt;h2 id="terminology">Terminology&lt;a class="td-heading-self-link" href="#terminology" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Control Plane- A collection of inter-related software components for providing application gateway and routing
functionality. The control plane is implemented by Envoy Gateway and provides services for managing the data plane.
These services are detailed in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/design/system-design/#components">components&lt;/a> section.&lt;/li>
&lt;li>Data Plane- Provides intelligent application-level traffic routing and is implemented as one or more Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/architecture.png" alt="Architecture">&lt;/p></description></item><item><title>System Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/system-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/system-design/</guid><description>&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to satisfy the requirements of Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Create a detailed design and interface specification for each system component.&lt;/li>
&lt;/ul>
&lt;h2 id="terminology">Terminology&lt;a class="td-heading-self-link" href="#terminology" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Control Plane- A collection of inter-related software components for providing application gateway and routing
functionality. The control plane is implemented by Envoy Gateway and provides services for managing the data plane.
These services are detailed in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/design/system-design/#components">components&lt;/a> section.&lt;/li>
&lt;li>Data Plane- Provides intelligent application-level traffic routing and is implemented as one or more Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/architecture.png" alt="Architecture">&lt;/p></description></item><item><title>System Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/system-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/system-design/</guid><description>&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to satisfy the requirements of Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Create a detailed design and interface specification for each system component.&lt;/li>
&lt;/ul>
&lt;h2 id="terminology">Terminology&lt;a class="td-heading-self-link" href="#terminology" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Control Plane- A collection of inter-related software components for providing application gateway and routing
functionality. The control plane is implemented by Envoy Gateway and provides services for managing the data plane.
These services are detailed in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/design/system-design/#components">components&lt;/a> section.&lt;/li>
&lt;li>Data Plane- Provides intelligent application-level traffic routing and is implemented as one or more Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/architecture.png" alt="Architecture">&lt;/p></description></item><item><title>Contributing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/contributing/</guid><description>&lt;p>We welcome contributions from the community. Please carefully review the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/">project goals&lt;/a>
and following guidelines to streamline your contributions.&lt;/p>
&lt;h2 id="communication">Communication&lt;a class="td-heading-self-link" href="#communication" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Before starting work on a major feature, please contact us via GitHub or Slack. We will ensure no
one else is working on it and ask you to open a GitHub issue.&lt;/li>
&lt;li>A &amp;ldquo;major feature&amp;rdquo; is defined as any change that is &amp;gt; 100 LOC altered (not including tests), or
changes any user-facing behavior. We will use the GitHub issue to discuss the feature and come to
agreement. This is to prevent your time being wasted, as well as ours. The GitHub review process
for major features is also important so that &lt;a href="../codeowners">affiliations with commit access&lt;/a> can
come to agreement on the design. If it&amp;rsquo;s appropriate to write a design document, the document must
be hosted either in the GitHub issue, or linked to from the issue and hosted in a world-readable
location.&lt;/li>
&lt;li>Small patches and bug fixes don&amp;rsquo;t need prior communication.&lt;/li>
&lt;/ul>
&lt;h2 id="inclusivity">Inclusivity&lt;a class="td-heading-self-link" href="#inclusivity" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Envoy Gateway community has an explicit goal to be inclusive to all. As such, all PRs must adhere
to the following guidelines for all code, APIs, and documentation:&lt;/p></description></item><item><title>Contributing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/contributing/</guid><description>&lt;p>We welcome contributions from the community. Please carefully review the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/">project goals&lt;/a>
and following guidelines to streamline your contributions.&lt;/p>
&lt;h2 id="communication">Communication&lt;a class="td-heading-self-link" href="#communication" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Before starting work on a major feature, please contact us via GitHub or Slack. We will ensure no
one else is working on it and ask you to open a GitHub issue.&lt;/li>
&lt;li>A &amp;ldquo;major feature&amp;rdquo; is defined as any change that is &amp;gt; 100 LOC altered (not including tests), or
changes any user-facing behavior. We will use the GitHub issue to discuss the feature and come to
agreement. This is to prevent your time being wasted, as well as ours. The GitHub review process
for major features is also important so that &lt;a href="../codeowners">affiliations with commit access&lt;/a> can
come to agreement on the design. If it&amp;rsquo;s appropriate to write a design document, the document must
be hosted either in the GitHub issue, or linked to from the issue and hosted in a world-readable
location.&lt;/li>
&lt;li>Small patches and bug fixes don&amp;rsquo;t need prior communication.&lt;/li>
&lt;/ul>
&lt;h2 id="inclusivity">Inclusivity&lt;a class="td-heading-self-link" href="#inclusivity" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Envoy Gateway community has an explicit goal to be inclusive to all. As such, all PRs must adhere
to the following guidelines for all code, APIs, and documentation:&lt;/p></description></item><item><title>Contributing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/contributing/</guid><description>&lt;p>We welcome contributions from the community. Please carefully review the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/">project goals&lt;/a>
and following guidelines to streamline your contributions.&lt;/p>
&lt;h2 id="communication">Communication&lt;a class="td-heading-self-link" href="#communication" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Before starting work on a major feature, please contact us via GitHub or Slack. We will ensure no
one else is working on it and ask you to open a GitHub issue.&lt;/li>
&lt;li>A &amp;ldquo;major feature&amp;rdquo; is defined as any change that is &amp;gt; 100 LOC altered (not including tests), or
changes any user-facing behavior. We will use the GitHub issue to discuss the feature and come to
agreement. This is to prevent your time being wasted, as well as ours. The GitHub review process
for major features is also important so that &lt;a href="../codeowners">affiliations with commit access&lt;/a> can
come to agreement on the design. If it&amp;rsquo;s appropriate to write a design document, the document must
be hosted either in the GitHub issue, or linked to from the issue and hosted in a world-readable
location.&lt;/li>
&lt;li>Small patches and bug fixes don&amp;rsquo;t need prior communication.&lt;/li>
&lt;/ul>
&lt;h2 id="inclusivity">Inclusivity&lt;a class="td-heading-self-link" href="#inclusivity" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Envoy Gateway community has an explicit goal to be inclusive to all. As such, all PRs must adhere
to the following guidelines for all code, APIs, and documentation:&lt;/p></description></item><item><title>Contributing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/contributing/</guid><description>&lt;p>We welcome contributions from the community. Please carefully review the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/">project goals&lt;/a>
and following guidelines to streamline your contributions.&lt;/p>
&lt;h2 id="communication">Communication&lt;a class="td-heading-self-link" href="#communication" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Before starting work on a major feature, please contact us via GitHub or Slack. We will ensure no
one else is working on it and ask you to open a GitHub issue.&lt;/li>
&lt;li>A &amp;ldquo;major feature&amp;rdquo; is defined as any change that is &amp;gt; 100 LOC altered (not including tests), or
changes any user-facing behavior. We will use the GitHub issue to discuss the feature and come to
agreement. This is to prevent your time being wasted, as well as ours. The GitHub review process
for major features is also important so that &lt;a href="../codeowners">affiliations with commit access&lt;/a> can
come to agreement on the design. If it&amp;rsquo;s appropriate to write a design document, the document must
be hosted either in the GitHub issue, or linked to from the issue and hosted in a world-readable
location.&lt;/li>
&lt;li>Small patches and bug fixes don&amp;rsquo;t need prior communication.&lt;/li>
&lt;/ul>
&lt;h2 id="inclusivity">Inclusivity&lt;a class="td-heading-self-link" href="#inclusivity" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Envoy Gateway community has an explicit goal to be inclusive to all. As such, all PRs must adhere
to the following guidelines for all code, APIs, and documentation:&lt;/p></description></item><item><title>Contributing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/contributing/</guid><description>&lt;p>We welcome contributions from the community. Please carefully review the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/">project goals&lt;/a>
and following guidelines to streamline your contributions.&lt;/p>
&lt;h2 id="communication">Communication&lt;a class="td-heading-self-link" href="#communication" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Before starting work on a major feature, please contact us via GitHub or Slack. We will ensure no
one else is working on it and ask you to open a GitHub issue.&lt;/li>
&lt;li>A &amp;ldquo;major feature&amp;rdquo; is defined as any change that is &amp;gt; 100 LOC altered (not including tests), or
changes any user-facing behavior. We will use the GitHub issue to discuss the feature and come to
agreement. This is to prevent your time being wasted, as well as ours. The GitHub review process
for major features is also important so that &lt;a href="../codeowners">affiliations with commit access&lt;/a> can
come to agreement on the design. If it&amp;rsquo;s appropriate to write a design document, the document must
be hosted either in the GitHub issue, or linked to from the issue and hosted in a world-readable
location.&lt;/li>
&lt;li>Small patches and bug fixes don&amp;rsquo;t need prior communication.&lt;/li>
&lt;/ul>
&lt;h2 id="inclusivity">Inclusivity&lt;a class="td-heading-self-link" href="#inclusivity" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Envoy Gateway community has an explicit goal to be inclusive to all. As such, all PRs must adhere
to the following guidelines for all code, APIs, and documentation:&lt;/p></description></item><item><title>Contributing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/contributing/</guid><description>&lt;p>We welcome contributions from the community. Please carefully review the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/">project goals&lt;/a>
and following guidelines to streamline your contributions.&lt;/p>
&lt;h2 id="communication">Communication&lt;a class="td-heading-self-link" href="#communication" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Before starting work on a major feature, please contact us via GitHub or Slack. We will ensure no
one else is working on it and ask you to open a GitHub issue.&lt;/li>
&lt;li>A &amp;ldquo;major feature&amp;rdquo; is defined as any change that is &amp;gt; 100 LOC altered (not including tests), or
changes any user-facing behavior. We will use the GitHub issue to discuss the feature and come to
agreement. This is to prevent your time being wasted, as well as ours. The GitHub review process
for major features is also important so that &lt;a href="../codeowners">affiliations with commit access&lt;/a> can
come to agreement on the design. If it&amp;rsquo;s appropriate to write a design document, the document must
be hosted either in the GitHub issue, or linked to from the issue and hosted in a world-readable
location.&lt;/li>
&lt;li>Small patches and bug fixes don&amp;rsquo;t need prior communication.&lt;/li>
&lt;/ul>
&lt;h2 id="inclusivity">Inclusivity&lt;a class="td-heading-self-link" href="#inclusivity" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Envoy Gateway community has an explicit goal to be inclusive to all. As such, all PRs must adhere
to the following guidelines for all code, APIs, and documentation:&lt;/p></description></item><item><title>Watching Components Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/watching/</guid><description>&lt;p>Envoy Gateway is made up of several components that communicate in-process. Some of them (namely Providers) watch
external resources, and &amp;ldquo;publish&amp;rdquo; what they see for other components to consume; others watch what another publishes and
act on it (such as the resource translator watches what the providers publish, and then publishes its own results that
are watched by another component). Some of these internally published results are consumed by multiple components.&lt;/p></description></item><item><title>Watching Components Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/watching/</guid><description>&lt;p>Envoy Gateway is made up of several components that communicate in-process. Some of them (namely Providers) watch
external resources, and &amp;ldquo;publish&amp;rdquo; what they see for other components to consume; others watch what another publishes and
act on it (such as the resource translator watches what the providers publish, and then publishes its own results that
are watched by another component). Some of these internally published results are consumed by multiple components.&lt;/p></description></item><item><title>Watching Components Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/watching/</guid><description>&lt;p>Envoy Gateway is made up of several components that communicate in-process. Some of them (namely Providers) watch
external resources, and &amp;ldquo;publish&amp;rdquo; what they see for other components to consume; others watch what another publishes and
act on it (such as the resource translator watches what the providers publish, and then publishes its own results that
are watched by another component). Some of these internally published results are consumed by multiple components.&lt;/p></description></item><item><title>Watching Components Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/watching/</guid><description>&lt;p>Envoy Gateway is made up of several components that communicate in-process. Some of them (namely Providers) watch
external resources, and &amp;ldquo;publish&amp;rdquo; what they see for other components to consume; others watch what another publishes and
act on it (such as the resource translator watches what the providers publish, and then publishes its own results that
are watched by another component). Some of these internally published results are consumed by multiple components.&lt;/p></description></item><item><title>Watching Components Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/watching/</guid><description>&lt;p>Envoy Gateway is made up of several components that communicate in-process. Some of them (namely Providers) watch
external resources, and &amp;ldquo;publish&amp;rdquo; what they see for other components to consume; others watch what another publishes and
act on it (such as the resource translator watches what the providers publish, and then publishes its own results that
are watched by another component). Some of these internally published results are consumed by multiple components.&lt;/p></description></item><item><title>Watching Components Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/watching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/watching/</guid><description>&lt;p>Envoy Gateway is made up of several components that communicate in-process. Some of them (namely Providers) watch
external resources, and &amp;ldquo;publish&amp;rdquo; what they see for other components to consume; others watch what another publishes and
act on it (such as the resource translator watches what the providers publish, and then publishes its own results that
are watched by another component). Some of these internally published results are consumed by multiple components.&lt;/p></description></item><item><title>Gateway API Translator Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/gatewayapi-translator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/gatewayapi-translator/</guid><description>&lt;p>The Gateway API translates external resources, e.g. GatewayClass, from the configured Provider to the Intermediate
Representation (IR).&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;a class="td-heading-self-link" href="#assumptions" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Initially target core conformance features only, to be followed by extended conformance features.&lt;/p>
&lt;h2 id="inputs-and-outputs">Inputs and Outputs&lt;a class="td-heading-self-link" href="#inputs-and-outputs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The main inputs to the Gateway API translator are:&lt;/p>
&lt;ul>
&lt;li>GatewayClass, Gateway, HTTPRoute, TLSRoute, Service, ReferenceGrant, Namespace, and Secret resources.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> ReferenceGrant is not fully implemented as of v0.2.&lt;/p>
&lt;p>The outputs of the Gateway API translator are:&lt;/p></description></item><item><title>Gateway API Translator Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/gatewayapi-translator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/gatewayapi-translator/</guid><description>&lt;p>The Gateway API translates external resources, e.g. GatewayClass, from the configured Provider to the Intermediate
Representation (IR).&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;a class="td-heading-self-link" href="#assumptions" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Initially target core conformance features only, to be followed by extended conformance features.&lt;/p>
&lt;h2 id="inputs-and-outputs">Inputs and Outputs&lt;a class="td-heading-self-link" href="#inputs-and-outputs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The main inputs to the Gateway API translator are:&lt;/p>
&lt;ul>
&lt;li>GatewayClass, Gateway, HTTPRoute, TLSRoute, Service, ReferenceGrant, Namespace, and Secret resources.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> ReferenceGrant is not fully implemented as of v0.2.&lt;/p>
&lt;p>The outputs of the Gateway API translator are:&lt;/p></description></item><item><title>Gateway API Translator Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/gatewayapi-translator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/gatewayapi-translator/</guid><description>&lt;p>The Gateway API translates external resources, e.g. GatewayClass, from the configured Provider to the Intermediate
Representation (IR).&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;a class="td-heading-self-link" href="#assumptions" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Initially target core conformance features only, to be followed by extended conformance features.&lt;/p>
&lt;h2 id="inputs-and-outputs">Inputs and Outputs&lt;a class="td-heading-self-link" href="#inputs-and-outputs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The main inputs to the Gateway API translator are:&lt;/p>
&lt;ul>
&lt;li>GatewayClass, Gateway, HTTPRoute, TLSRoute, Service, ReferenceGrant, Namespace, and Secret resources.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> ReferenceGrant is not fully implemented as of v0.2.&lt;/p>
&lt;p>The outputs of the Gateway API translator are:&lt;/p></description></item><item><title>Gateway API Translator Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/gatewayapi-translator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/gatewayapi-translator/</guid><description>&lt;p>The Gateway API translates external resources, e.g. GatewayClass, from the configured Provider to the Intermediate
Representation (IR).&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;a class="td-heading-self-link" href="#assumptions" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Initially target core conformance features only, to be followed by extended conformance features.&lt;/p>
&lt;h2 id="inputs-and-outputs">Inputs and Outputs&lt;a class="td-heading-self-link" href="#inputs-and-outputs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The main inputs to the Gateway API translator are:&lt;/p>
&lt;ul>
&lt;li>GatewayClass, Gateway, HTTPRoute, TLSRoute, Service, ReferenceGrant, Namespace, and Secret resources.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> ReferenceGrant is not fully implemented as of v0.2.&lt;/p>
&lt;p>The outputs of the Gateway API translator are:&lt;/p></description></item><item><title>Gateway API Translator Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/gatewayapi-translator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/gatewayapi-translator/</guid><description>&lt;p>The Gateway API translates external resources, e.g. GatewayClass, from the configured Provider to the Intermediate
Representation (IR).&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;a class="td-heading-self-link" href="#assumptions" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Initially target core conformance features only, to be followed by extended conformance features.&lt;/p>
&lt;h2 id="inputs-and-outputs">Inputs and Outputs&lt;a class="td-heading-self-link" href="#inputs-and-outputs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The main inputs to the Gateway API translator are:&lt;/p>
&lt;ul>
&lt;li>GatewayClass, Gateway, HTTPRoute, TLSRoute, Service, ReferenceGrant, Namespace, and Secret resources.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> ReferenceGrant is not fully implemented as of v0.2.&lt;/p>
&lt;p>The outputs of the Gateway API translator are:&lt;/p></description></item><item><title>Gateway API Translator Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/gatewayapi-translator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/gatewayapi-translator/</guid><description>&lt;p>The Gateway API translates external resources, e.g. GatewayClass, from the configured Provider to the Intermediate
Representation (IR).&lt;/p>
&lt;h2 id="assumptions">Assumptions&lt;a class="td-heading-self-link" href="#assumptions" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Initially target core conformance features only, to be followed by extended conformance features.&lt;/p>
&lt;h2 id="inputs-and-outputs">Inputs and Outputs&lt;a class="td-heading-self-link" href="#inputs-and-outputs" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The main inputs to the Gateway API translator are:&lt;/p>
&lt;ul>
&lt;li>GatewayClass, Gateway, HTTPRoute, TLSRoute, Service, ReferenceGrant, Namespace, and Secret resources.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> ReferenceGrant is not fully implemented as of v0.2.&lt;/p>
&lt;p>The outputs of the Gateway API translator are:&lt;/p></description></item><item><title>v1.2.4</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.4/</link><pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.4/</guid><description>&lt;p>Date: December 13, 2024&lt;/p>
&lt;h2 id="bug-fixes">Bug fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed BackendTLSPolicy not supporting the use of a port name as the sectionName in targetRefs.&lt;/li>
&lt;li>Fixed reference grant from EnvoyExtensionPolicy to the referenced ext-proc backend not being respected.&lt;/li>
&lt;li>Fixed BackendTrafficPolicy not applying to Gateway Routes when a Route has a Request Timeout defined.&lt;/li>
&lt;li>Fixed proxies connected to the secondary Envoy Gateway not receiving xDS configuration.&lt;/li>
&lt;li>Fixed traffic splitting not working when some backends were invalid.&lt;/li>
&lt;/ul>
&lt;h2 id="other-changes">Other changes&lt;a class="td-heading-self-link" href="#other-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped Envoy to version 1.32.2.&lt;/li>
&lt;/ul></description></item><item><title>v1.1.4</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.4/</link><pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.4/</guid><description>&lt;p>Date: December 12, 2024&lt;/p>
&lt;h2 id="bug-fixes">Bug fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed validate proto messages before converting them to anypb.Any&lt;/li>
&lt;li>Fixed BackendTlsPolicy specify multiple targetRefs of the same service, only one will work&lt;/li>
&lt;li>Fixed Envoy rejecting TCP Listeners that have no attached TCPRoutes&lt;/li>
&lt;li>Fixed frequent 503 errors when connecting to a Service experiencing high Pod churn&lt;/li>
&lt;li>Fixed reference grant from EnvoyExtensionPolicy to referenced ext-proc backend not respected&lt;/li>
&lt;li>Fixed BackendTrafficPolicy not applying to Gateway Route when Route has a Request Timeout defined&lt;/li>
&lt;/ul>
&lt;h2 id="other-changes">Other changes&lt;a class="td-heading-self-link" href="#other-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped Rate Limit to 49af5cca&lt;/li>
&lt;li>Bumped golang.org/x/crypto to 0.31.0&lt;/li>
&lt;/ul></description></item><item><title>v1.2.3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.3/</link><pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.3/</guid><description>&lt;p>Date: December 2, 2024&lt;/p>
&lt;h2 id="bug-fixes">Bug fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Disabled the retry policy for the JWT provider to reduce requests sent to the JWKS endpoint. Failed async fetches will retry every 1s.&lt;/li>
&lt;li>Used a waitGroup instead of an enabled channel in the status updater.&lt;/li>
&lt;/ul>
&lt;h2 id="other-changes">Other changes&lt;a class="td-heading-self-link" href="#other-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>EG Listens on IPv4 by default, but if IPFamily is set to IPv6 or DualStack, it listens on :: and enables ipv4_compat for DualStack.&lt;/li>
&lt;li>Bumped Gateway API to v1.2.1.&lt;/li>
&lt;/ul></description></item><item><title>v1.2.2</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.2/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.2/</guid><description>&lt;p>Date: November 28, 2024&lt;/p>
&lt;h2 id="bug-fixes">Bug fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Envoy rejecting TCP Listeners that have no attached TCPRoutes.&lt;/li>
&lt;li>Fixed failed to update SecurityPolicy resources with the &lt;code>backendRef&lt;/code> field specified.&lt;/li>
&lt;li>Fixed xDS translation failed when oidc tokenEndpoint and jwt remoteJWKS are specified in the same SecurityPolicy and using the same hostname.&lt;/li>
&lt;li>Fixed frequent 503 errors when connecting to a Service experiencing high Pod churn.&lt;/li>
&lt;/ul>
&lt;h2 id="other-changes">Other changes&lt;a class="td-heading-self-link" href="#other-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bump the RateLimit image to 49af5cca.&lt;/li>
&lt;li>Always use &lt;code>::&lt;/code> and &lt;code>IPv4Compact&lt;/code> enabled on dynamic listeners.&lt;/li>
&lt;li>Use &lt;code>V4_PREFERRED&lt;/code> instead of &lt;code>V4_ONLY&lt;/code> by default for the cluster&amp;rsquo;s &lt;code>DnsLookupFamily&lt;/code>.&lt;/li>
&lt;/ul></description></item><item><title>v1.2.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.1/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.1/</guid><description>&lt;p>Date: November 7, 2024&lt;/p>
&lt;h2 id="bug-fixes">Bug fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed a panic in the provider goroutine when the body in the direct response configuration was nil.&lt;/li>
&lt;/ul></description></item><item><title>Announcing Envoy Gateway v1.2</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v1.2/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v1.2/</guid><description>&lt;p>We are thrilled to announce the arrival of Envoy Gateway v1.2.0.&lt;/p>
&lt;p>This release represents a significant achievement, and we extend our heartfelt gratitude to the entire Envoy Gateway community for their contributions, dedication, and support. Your collaborative efforts have been instrumental in reaching this pivotal release.&lt;/p>
&lt;p>Thank you for being an integral part of this journey. We are excited to see how Envoy Gateway v1.2.0 will empower your operations and look forward to continuing our work together to drive the future of Cloud Native API Gateway.&lt;/p></description></item><item><title>v1.2.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.0/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.0/</guid><description>&lt;p>Date: November 06, 2024&lt;/p>
&lt;h2 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Gateway API GRPCRoute and ReferenceGrant v1alpha2 have been removed&lt;/li>
&lt;li>Please refer to the &lt;a href="https://github.com/kubernetes-sigs/gateway-api/releases">Gateway API v1.2.0 documentation&lt;/a> for more information&lt;/li>
&lt;li>Removed default CPU limit of the Envoy Gateway deployment, to eliminate CPU throttling&lt;/li>
&lt;li>Changed default Envoy shutdown settings: drain strategy has been changed to immediate, default minDrainDuration, drainTimeout and terminationGracePeriodSeconds have been set to 10s, 60s and 360s respectively&lt;/li>
&lt;li>Set &lt;code>ignore_health_on_host_removal&lt;/code> to true for clusters with static endpoints This was done to speed up removal of static endpoints by the control plane when active health check is configured&lt;/li>
&lt;li>Xds and Infra IR logs are logged at Debug level instead of Info level. They will now not be seen by default in Envoy Gateway logs. You can change the logging level to &lt;code>default: debug&lt;/code> to view them&lt;/li>
&lt;/ul>
&lt;h2 id="new-features">New Features&lt;a class="td-heading-self-link" href="#new-features" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added support for Gateway-API v1.2.0&lt;/li>
&lt;li>Added support for IPv4/IPv6 Dual Stack for EnvoyProxy fleet and BackendRef resources&lt;/li>
&lt;li>Added experimental support for EG standalone(host deployment) mode&lt;/li>
&lt;li>Added support for JWT claims based Authorization in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for Response Override in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for RequestTimeout in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for inverting header matches for Rate Limit in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for client TLS session resumption in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added support for HTTPRouteFilter and path regex rewrite&lt;/li>
&lt;li>Added support for host header rewrite in HTTPRouteFilter CRD&lt;/li>
&lt;li>Added support for Listener Access Log in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for Datadog tracing support in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for request response sizes stats in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for modifying container SecurityContext for Envoy Gateway deployment in Helm&lt;/li>
&lt;li>Added support for wildcard matching for CORS AllowMethods and AllowHeaders settings in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for match conditions for access log in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for using BackendCluster to represent OIDCProvider&lt;/li>
&lt;li>Added support for RecomputeRoute for ExtAuth in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for sharing token cookies between multiple domains in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for JSONPatches for proxy bootstrap modifications in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for Active Passive Failover Backends&lt;/li>
&lt;li>Added support for configuring the GRPC Health Checker in the BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for early request header mutation in the ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added support for JsonPath in the EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added support for cluster settings for tracing and access log backends in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for cluster settings for non xRoute-generated backend refs&lt;/li>
&lt;li>Added support for socket buffer limit field in ClientTrafficPolicy and BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for http2 upstream settings in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for DNS resolution settings in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for configuring service annotations in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for configuring priorityClassName to Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for ratelimit metrics monitoring in grafana in the addons helm chart&lt;/li>
&lt;li>Added support for default user group and user id for the SecurityContexts in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for maxUnavailable in the PodDisruptionBudget in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for configuring NodeSelector in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for nonce in the OIDC auth flow&lt;/li>
&lt;li>Added support for choosing an HTTPRoute&amp;rsquo;s non-wildcard hostname as the default Host&lt;/li>
&lt;li>Added support for returning 500 when EnvoyExtensionTrafficPolicy translation fails&lt;/li>
&lt;li>Added support for returning 500 when SecurityPolicy translation fails&lt;/li>
&lt;li>Added support for multiple backendRefs for ExtAuth and ExtProc&lt;/li>
&lt;li>Added support for session persistence in HTTPRoute rules&lt;/li>
&lt;li>Added support for the Backend resource for ExtAuth&lt;/li>
&lt;li>Added support for target selectors on Envoy Gateway Extension Server policies&lt;/li>
&lt;li>Added support for non-Kubernetes Backends for TLSRoute&lt;/li>
&lt;li>Added support for fallback to the Backend API&lt;/li>
&lt;li>Added support for reloadable EnvoyGateway configuration&lt;/li>
&lt;li>Added support for adding Labels to the Envoy Service&lt;/li>
&lt;li>Added support for custom name for ratelimit deployment&lt;/li>
&lt;li>Added default SecurityContext for EG components&lt;/li>
&lt;li>Added startupProbe to all provisioned containers&lt;/li>
&lt;li>Added support for local validations for egctl translate and file provider&lt;/li>
&lt;li>Added support for egctl x collect to collect information from the cluster for debugging&lt;/li>
&lt;li>Added support for a native prometheus metrics endpoint in the ratelimit server&lt;/li>
&lt;/ul>
&lt;h2 id="bug-fixes">Bug Fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed xDS translation failing when the WASM HTTP code source was configured without an SHA&lt;/li>
&lt;li>Fixed unsupported listener protocol types causing errors while updating Gateway status&lt;/li>
&lt;li>Fixed unsupported listener protocol types causing errors while updating Gateway status&lt;/li>
&lt;li>Fixed invalid sectionName in BackendTLSPolicy for Backend&lt;/li>
&lt;li>Fixed Delay in SecurityPolicy change propagation for HTTPRoute when using targetSelectors&lt;/li>
&lt;li>Fixed JSONPath not being correctly translated to JSONPatch paths&lt;/li>
&lt;li>Fixed allowing an empty slowStart value when using LeastRequest&lt;/li>
&lt;li>Fixed updating the HTTPRoute status correctly when the linked Backend resource is invalid&lt;/li>
&lt;li>Fixed timeout settings originating from the route being lost when translating the backend traffic policy&lt;/li>
&lt;li>Fixed Backend resources not receiving status updates&lt;/li>
&lt;li>Fixed active health checks requiring the expectedStatuses field to function correctly&lt;/li>
&lt;li>Fixed HTTPHeaderFilter processing not correctly supporting multiple header values&lt;/li>
&lt;li>Fixed reconciling multiple ReferenceGrants within the same namespace&lt;/li>
&lt;li>Fixed unwanted / appearing in the Path when using Prefix Rewrites&lt;/li>
&lt;li>Fixed incorrect gateway being selected as the HTTPRoute parent&lt;/li>
&lt;li>Fixed override issues for EnvoyExtensionPolicy&lt;/li>
&lt;li>Fixed nil pointer error when translating hash load balancing&lt;/li>
&lt;li>Fixed nil pointer if backedtls.minVersion is set but backedtls.maxVersion is not&lt;/li>
&lt;li>Fixed empty connection limits causing xDS rejection&lt;/li>
&lt;li>Fixed rate limiting not working with both headers and CIDR matches&lt;/li>
&lt;li>Fixed EDS not updating when deployments were created after services&lt;/li>
&lt;li>Fixed RBAC issue for deleting infrastructure resources&lt;/li>
&lt;li>Fixed gateways never reaching ready/programmed status when running Envoy as a Daemonset&lt;/li>
&lt;li>Fixed rate limit deployment ignoring pod labels and annotation merges&lt;/li>
&lt;li>Fixed the API Server receives unnecessary requests&lt;/li>
&lt;li>Fixed egctl experimental translate using an incorrect namespace&lt;/li>
&lt;li>Fixed reconciliation not being triggered for Secret updates referenced by a BackendTLSPolicy&lt;/li>
&lt;li>Fixed xDS translation failure when WASM HTTP code source was configured without an SHA&lt;/li>
&lt;li>Fixed HTTPRoute status displaying only one parent when targeting multiple gateways from different GatewayClasses&lt;/li>
&lt;li>Fixed Route with multiple parents having an incorrect namespace in the parentRef status&lt;/li>
&lt;li>Fixed BackendTlsPolicy specifying multiple targetRefs for the same service, to work&lt;/li>
&lt;/ul>
&lt;h3 id="performance-improvements">Performance Improvements&lt;a class="td-heading-self-link" href="#performance-improvements" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Optimize memory usage by only storing distinct resources&lt;/li>
&lt;li>SecurityPolicy translation failures will now cause routes referenced by the policy to return an immediate 500 response&lt;/li>
&lt;li>Gateway-API BackendTLSPolicy v1alpha3 is incompatible with previous versions of the CRD&lt;/li>
&lt;li>xPolicy targetRefs can no longer specify a namespace, since Gateway-API v1.1.0 uses LocalPolicyTargetReferenceWithSectionName in Policy resources&lt;/li>
&lt;/ul>
&lt;h3 id="other-changes">Other changes&lt;a class="td-heading-self-link" href="#other-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Upgraded Envoy Proxy to v1.32.1&lt;/li>
&lt;li>Reduced the amount of configuration logging, and make it line-delimited friendly&lt;/li>
&lt;li>Made watching alpha CRDs optional, so that Envoy Gateway can run with older Gateway Api versions&lt;/li>
&lt;li>Removed grafana test framework from the addons helm chart&lt;/li>
&lt;li>Disabled ALPN for non-HTTP routes&lt;/li>
&lt;li>Added statPrefix for HCM and TCPProxy&lt;/li>
&lt;li>Enabled GatewayHTTPListenerIsolation conformance test&lt;/li>
&lt;li>Enabled GRPC conformance profile&lt;/li>
&lt;li>Enabled HTTPRouteBackendRequestHeaderModifier conformance test&lt;/li>
&lt;li>Added e2e test for Daemonset mode&lt;/li>
&lt;li>Fixed OVS scanner wrong license warnings&lt;/li>
&lt;li>Added e2e test for Gateway with EnvoyProxy&lt;/li>
&lt;li>Added e2e test for TLS session resumption&lt;/li>
&lt;li>Added heap profile into benchmark report&lt;/li>
&lt;li>Added e2e test for RecomputeRoute in ExtAuth&lt;/li>
&lt;li>Added benchmark memory profiles into report&lt;/li>
&lt;li>Fixed flaky gateway_with_conflicted_listener_cannot_be_merged e2e test&lt;/li>
&lt;li>Fixed flaky Zipkin Tracing e2e test&lt;/li>
&lt;li>Added e2e test for cookie based consistent hash load balancing&lt;/li>
&lt;li>Added e2e test for load balancing&lt;/li>
&lt;li>Fixed flaky authorization tests&lt;/li>
&lt;li>Enabled upgrade test&lt;/li>
&lt;li>Fixed flaky basic auth e2e test&lt;/li>
&lt;li>Enabled use-client-protocol e2e test&lt;/li>
&lt;li>Added performance benchmarking test for 1000 HTTPRoutes&lt;/li>
&lt;li>Added e2e test for Datadog tracing&lt;/li>
&lt;li>Added e2e tests for ratelimit invert matching headers&lt;/li>
&lt;li>Reduced readinessProbe failureThreshold and periodSeconds&lt;/li>
&lt;li>Bumped go-control-plane to v0.13.1&lt;/li>
&lt;li>Enabled e2e tests for dual stack&lt;/li>
&lt;li>Use grafana alloy instead of fluent-bit for e2e tests&lt;/li>
&lt;li>Push tags without the v prefix for helm charts to support Flux HelmReleases&lt;/li>
&lt;li>Use a stable label selector when creating Envoy Proxy fleet pods&lt;/li>
&lt;/ul></description></item><item><title>v1.1.3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.3/</link><pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.3/</guid><description>&lt;p>Date: November 1, 2024&lt;/p>
&lt;h2 id="breaking-changes">Breaking changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="new-features">New features&lt;a class="td-heading-self-link" href="#new-features" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="bug-fixes">Bug fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed unsupported listener protocol type causing an error while updating Gateway Status&lt;/li>
&lt;li>Fixed some status updates were being discarded by the status updater&lt;/li>
&lt;li>Fixed error level logging for admin and metrics modules&lt;/li>
&lt;li>Fixed Dashboard typos&lt;/li>
&lt;li>Fixed Ratelimit Deployment ignoring pod labels and annotation merge&lt;/li>
&lt;li>Fixed the API Server receives unnecessary requests&lt;/li>
&lt;li>Fixed set invalid Listener.SupportedKinds to empty list&lt;/li>
&lt;li>Fixed losing timeout settings that originate from the route when translating the backend traffic policy&lt;/li>
&lt;li>Fixed xds translation failure when wasm http code source configured without sha&lt;/li>
&lt;/ul>
&lt;h2 id="performance-improvements">Performance improvements&lt;a class="td-heading-self-link" href="#performance-improvements" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="other-changes">Other changes&lt;a class="td-heading-self-link" href="#other-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped Envoy proxy to 1.31.3&lt;/li>
&lt;li>Bumped github.com/docker/docker to 27.3.1+incompatible&lt;/li>
&lt;/ul></description></item><item><title>v1.2.0-rc.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.0-rc.1/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.2.0-rc.1/</guid><description>&lt;p>Date: October 25, 2024&lt;/p>
&lt;h2 id="breaking-changes">Breaking changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Gateway API GRPCRoute and ReferenceGrant v1alpha2 have been removed.&lt;/li>
&lt;li>Please refer to the &lt;a href="https://github.com/kubernetes-sigs/gateway-api/releases">Gateway API v1.2.0 documentation&lt;/a> for more information.&lt;/li>
&lt;li>Removed default CPU limit of the Envoy Gateway deployment&lt;/li>
&lt;li>Changed default Envoy shutdown settings: drain strategy has been changed to immediate, default minDrainDuration, drainTimeout and terminationGracePeriodSeconds have been set to 10s, 60s and 360s respectively&lt;/li>
&lt;/ul>
&lt;h2 id="new-features">New features&lt;a class="td-heading-self-link" href="#new-features" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added support for Gateway-API v1.2.0&lt;/li>
&lt;li>Added support for IPv4/IPv6 Dual Stack for Envoy listeners and BackendRef resources&lt;/li>
&lt;li>Added support for EG standalone(host deployment) mode (experimental)&lt;/li>
&lt;li>Added support for JWT claims based Authorization in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for Direct Response in HTTPRouteFilter CRD&lt;/li>
&lt;li>Added support for Response Override in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for RequestTimeout in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for inverting header matches for rate limit in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for client TLS session resumption in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added support for HTTPRouteFilter and path regex rewrite&lt;/li>
&lt;li>Added support for host header rewrite in HTTPRouteFilter CRD&lt;/li>
&lt;li>Added support for Listener Access Log in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for Datadog tracing support in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for request response sizes stats in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for wildcard matching for CORS AllowMethods and AllowHeaders settings in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for match conditions for access log in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for using BackendCluster to represent OIDCProvider&lt;/li>
&lt;li>Added support for RecomputeRoute for ExtAuth in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for sharing token cookies between multiple domains in SecurityPolicy CRD&lt;/li>
&lt;li>Added support for JSONPatches for proxy bootstrap modifications in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for LB priority for non xRoute endpoints&lt;/li>
&lt;li>Added support for configuring the GRPC Health Checker in the BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for early request header mutation in the ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added support for JsonPath in the EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added support for cluster settings for tracing and access log backends in EnvoyProxy CRD&lt;/li>
&lt;li>Added support for cluster settings for non xRoute-generated backend refs&lt;/li>
&lt;li>Added support for socket buffer limit field in ClientTrafficPolicy and BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for http2 upstream settings in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for DNS resolution settings in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added support for configuring service annotations in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for configuring priorityClassName to Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for ratelimit metrics monitoring in grafana in the addons helm chart&lt;/li>
&lt;li>Added support for default user group and user id for the SecurityContexts in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for maxUnavailable in the PodDisruptionBudget in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for configuring NodeSelector in the Envoy Gateway helm chart&lt;/li>
&lt;li>Added support for nonce in the OIDC auth flow&lt;/li>
&lt;li>Added support for choosing an HTTPRoute&amp;rsquo;s non-wildcard hostname as the default Host&lt;/li>
&lt;li>Added support for returning 500 when EnvoyExtensionTrafficPolicy translation fails&lt;/li>
&lt;li>Added support for returning 500 when SecurityPolicy translation fails&lt;/li>
&lt;li>Added support for multiple backendRefs for ExtAuth and ExtProc&lt;/li>
&lt;li>Added support for session persistence in HTTPRoute rules&lt;/li>
&lt;li>Added support for the Backend resource for ExtAuth&lt;/li>
&lt;li>Added support for target selectors on Envoy Gateway Extension Server policies&lt;/li>
&lt;li>Added support for non-Kubernetes Backends for TLSRoute&lt;/li>
&lt;li>Added support for fallback to the Backend API&lt;/li>
&lt;li>Added support for reloadable EnvoyGateway configuration&lt;/li>
&lt;li>Added support for adding Labels to the Envoy Service&lt;/li>
&lt;li>Added support for custom name for ratelimit deployment&lt;/li>
&lt;li>Added default SecurityContext for EG components&lt;/li>
&lt;li>Added startupProbe to all provisioned containers&lt;/li>
&lt;li>Added support for local validations for egctl translate and file provider&lt;/li>
&lt;li>Added support for egctl x collect to collect information from the cluster for debugging&lt;/li>
&lt;li>Added support for a native prometheus metrics endpoint in the ratelimit server&lt;/li>
&lt;/ul>
&lt;h2 id="bug-fixes">Bug fixes&lt;a class="td-heading-self-link" href="#bug-fixes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed unsupported listener protocol type causing an error while updating Gateway Status&lt;/li>
&lt;li>Fixed some status updates were being discarded by the status updater&lt;/li>
&lt;li>Fixed Gateway crash adding BackendTLSPolicy to External Backend of an HTTPRoute&lt;/li>
&lt;li>Fixed Delay in SecurityPolicy change propagation for HTTPRoute when using targetSelectors&lt;/li>
&lt;li>Fixed JSONPath not correctly translated to JSONPatch paths&lt;/li>
&lt;li>Fixed allow empty slowStart when using LeastRequest&lt;/li>
&lt;li>Fixed Backends which should be rejected are still used as an HTTPRoute&amp;rsquo;s destination&lt;/li>
&lt;li>Fixed losing timeout settings that originate from the route when translating the backend traffic policy&lt;/li>
&lt;li>Fixed Backend resources don&amp;rsquo;t get status updates&lt;/li>
&lt;li>Fixed Active Health check requires expectedStatuses field to work&lt;/li>
&lt;li>Fixed HTTPHeaderFilter processing doesn&amp;rsquo;t correctly support multiple header values&lt;/li>
&lt;li>Fixed multiple reference grants in same namespace&lt;/li>
&lt;li>Fixed upstream get unwanted /.&lt;/li>
&lt;li>Fixed creation of SecurityPolicy with targetSelectors fails&lt;/li>
&lt;li>Fixed wrong gateway is chosen as HTTPRoute parent&lt;/li>
&lt;li>Fixed override issue for EEP&lt;/li>
&lt;li>Fixed nil pointer err translating hash load balancing&lt;/li>
&lt;li>Fixed ratelimit does not work across multiple GatewayClasses&lt;/li>
&lt;li>Fixed upstream mTLS only works for HTTPS listeners&lt;/li>
&lt;li>Fixed nil pointer if backedtls.minVersion is set but backedtls.maxVersion is not&lt;/li>
&lt;li>Fixed empty connection limit causes XDS rejection&lt;/li>
&lt;li>Fixed ratelimit not working with both headers and cidr matches&lt;/li>
&lt;li>Fixed EDS didn&amp;rsquo;t update when deployments was created after services&lt;/li>
&lt;li>Fixed RBAC issue for deleting infrastructure resources&lt;/li>
&lt;li>Fixed customized infrastructure resources not being deleted&lt;/li>
&lt;li>Fixed Gateways never become ready/programmed when running Envoy as a Daemonset&lt;/li>
&lt;li>Fixed Ratelimit Deployment ignoring pod labels and annotation merge&lt;/li>
&lt;li>Fixed the API Server receives unnecessary requests&lt;/li>
&lt;li>Fixed terminating envoy pods don&amp;rsquo;t respond with &amp;ldquo;Connection: close&amp;rdquo; (H1) or GOAWAY(H2) on shutdown, switch to an immediate drain strategy&lt;/li>
&lt;li>Fixed ratelimit statsd not working&lt;/li>
&lt;li>Fixed not generating selector of deployment/daemonset based on the custom label configuration of EnvoyProxy&lt;/li>
&lt;li>Fixed egctl experimental translate using a wrong ns&lt;/li>
&lt;/ul>
&lt;h2 id="performance-improvements">Performance improvements&lt;a class="td-heading-self-link" href="#performance-improvements" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed repeated resources and optimize memory usage&lt;/li>
&lt;/ul>
&lt;h2 id="other-changes">Other changes&lt;a class="td-heading-self-link" href="#other-changes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Removed grafana test framework from the addons helm chart&lt;/li>
&lt;li>Disabled ALPN for non-HTTP routes&lt;/li>
&lt;li>Added statPrefix for HCM and TCPProxy&lt;/li>
&lt;li>Enabled GatewayHTTPListenerIsolation conformance test&lt;/li>
&lt;li>Enabled GRPC conformance profile&lt;/li>
&lt;li>Enabled HTTPRouteBackendRequestHeaderModifier conformance test&lt;/li>
&lt;li>Added e2e test for Daemonset mode&lt;/li>
&lt;li>Updated upgrades tests to use VERSION env variable&lt;/li>
&lt;li>Fixed OVS scanner wrong license warnings&lt;/li>
&lt;li>Added e2e test for TLS session resumption&lt;/li>
&lt;li>Added heap profile into benchmark report&lt;/li>
&lt;li>Added e2e test for RecomputeRoute in ExtAuth&lt;/li>
&lt;li>Added benchmark memory profiles into report&lt;/li>
&lt;li>Fixed flaky gateway_with_conflicted_listener_cannot_be_merged e2e test&lt;/li>
&lt;li>Fixed flaky Zipkin Tracing e2e test&lt;/li>
&lt;li>Added e2e test for cookie based consistent hash load balancing&lt;/li>
&lt;li>Added e2e test for load balancing&lt;/li>
&lt;li>Fixed flaky authorization tests&lt;/li>
&lt;li>Enabled upgrade test&lt;/li>
&lt;li>Fixed flaky basic auth e2e test&lt;/li>
&lt;li>Enabled use-client-protocol e2e test&lt;/li>
&lt;li>Added performance benchmarking test for 1000 HTTPRoutes&lt;/li>
&lt;li>Added e2e test for Datadog tracing&lt;/li>
&lt;li>Added e2e tests for ratelimit invert matching headers&lt;/li>
&lt;li>Reduced readinessProbe failureThreshold and periodSeconds&lt;/li>
&lt;li>Bumped go-control-plane to v0.13.1&lt;/li>
&lt;/ul></description></item><item><title>v1.1.2</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.2/</link><pubDate>Tue, 24 Sep 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.2/</guid><description>&lt;p>Date: September 24, 2024&lt;/p>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed handling of sectionName in BackendTLSPolicy for Backend resource&lt;/li>
&lt;/ul>
&lt;h2 id="infra-manager">Infra-manager&lt;a class="td-heading-self-link" href="#infra-manager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Pin Envoy Proxy version to v1.32.2&lt;/li>
&lt;li>Change Envoy listener drain strategy from gradual to immediate&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed reconciliation of HTTPRoutes when labels change&lt;/li>
&lt;/ul></description></item><item><title>v1.1.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.1/</link><pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.1/</guid><description>&lt;p>Date: September 11, 2024&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped Golang version to 1.22.7&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Enabled GatewayHTTPListenerIsolation test&lt;/li>
&lt;/ul>
&lt;h2 id="testing">Testing&lt;a class="td-heading-self-link" href="#testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fix download URL of envoy proxy WASM examples used in tests&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed url rewrite to remove trailing slash&lt;/li>
&lt;li>Isolate HTTP route tables to listener according to Gateway-API specifications&lt;/li>
&lt;li>Fixed identification of ReferenceGrant when multiple ReferenceGrants exist in a namespace&lt;/li>
&lt;li>Fixed added header values as a command and space delimited list&lt;/li>
&lt;li>Fixed assertion on expected status in active HTTP healthcheck&lt;/li>
&lt;li>Fixed rejection of invalid Backends referenced by xRoutes&lt;/li>
&lt;li>Fixed support for empty SlowStart configuration when using LeastRequest loadbalancing&lt;/li>
&lt;li>Fixed update of status for Backends&lt;/li>
&lt;/ul>
&lt;h2 id="infra-manager">Infra-manager&lt;a class="td-heading-self-link" href="#infra-manager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Pin ratelimit version to 26f28d78&lt;/li>
&lt;li>Reduce readinessProbe failureThreshold and periodSeconds of proxy&lt;/li>
&lt;li>Expose ratelimit statsd&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed error returned when referenced Configmap or Secret is not found&lt;/li>
&lt;li>Use component name in Envoy Gateway logs&lt;/li>
&lt;/ul></description></item><item><title>Announcing Envoy Gateway v1.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v1.1/</link><pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v1.1/</guid><description>&lt;p>We are thrilled to announce the arrival of Envoy Gateway v1.1.0.&lt;/p>
&lt;p>This release represents a significant achievement, and we extend our heartfelt gratitude to the entire Envoy Gateway community for their contributions, dedication, and support. Your collaborative efforts have been instrumental in reaching this pivotal release.&lt;/p>
&lt;p>Thank you for being an integral part of this journey. We are excited to see how Envoy Gateway v1.1.0 will empower your operations and look forward to continuing our work together to drive the future of Cloud Native API Gateway.&lt;/p></description></item><item><title>v1.1.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.0/</link><pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.0/</guid><description>&lt;p>Date: July 22, 2024&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Concepts Doc&lt;/li>
&lt;li>Added User Guide for Wasm Extension&lt;/li>
&lt;li>Added User Guide for patching Envoy Service&lt;/li>
&lt;li>Added User Guide for Backend MTLS&lt;/li>
&lt;li>Added User Guide for Backend TLS Parameters&lt;/li>
&lt;li>Added User Guide for IP Allowlist/Denylist&lt;/li>
&lt;li>Added User Guide for Extension Server&lt;/li>
&lt;li>Added User Guide for building Wasm image&lt;/li>
&lt;li>Added Performance Benchmarking Document&lt;/li>
&lt;li>Added User Guide for Zipkin Tracing&lt;/li>
&lt;li>Added User Guide for Customizing Ordering of Filters&lt;/li>
&lt;li>Added User Guide for External Processing Filter in EnvoyExtensionPolicy&lt;/li>
&lt;li>Added User Guide for installation of egctl with brew&lt;/li>
&lt;li>Added User Guide for Client Buffer Size Limit&lt;/li>
&lt;li>Added User Guide for Client Idle Timeout&lt;/li>
&lt;li>Added Chinese translation for release notes, roadmap, installation, development, contribution and several User Guides&lt;/li>
&lt;li>Added User Guide for Backend resource&lt;/li>
&lt;li>Added GA Blog Post&lt;/li>
&lt;li>Added Threat Model&lt;/li>
&lt;li>Added Adopters section to docs&lt;/li>
&lt;li>Added User Guide and Dashboards for Control Plane and Resource Observability&lt;/li>
&lt;li>Added User Guide for Connection Limits in ClientTrafficPolicy&lt;/li>
&lt;li>Added User Guide on using Private Key Provider&lt;/li>
&lt;li>Added Design Doc for Authorization&lt;/li>
&lt;li>Added Design Doc for XDS Metadata&lt;/li>
&lt;li>Added Design Doc for Backend resource&lt;/li>
&lt;li>Added Design Doc for Control Plane Observability&lt;/li>
&lt;li>Added Design Doc for EnvoyExtensionPolicy&lt;/li>
&lt;li>Added Design Doc for External Processing in EnvoyExtensionPolicy&lt;/li>
&lt;li>Updated Access Logging User Guide to include filtering with CEL Expression&lt;/li>
&lt;li>Updated Access Logging User Guide to include Metadata&lt;/li>
&lt;li>Updated Development Guide to require Golang 1.22&lt;/li>
&lt;li>Updated Quickstart User Guide to fetch GATEWAY_HOST from Gateway resource&lt;/li>
&lt;li>Updated Site to reflect GA status&lt;/li>
&lt;li>Updated HTTP Redirect User Guide to not set a redirect port or require a BackendRef&lt;/li>
&lt;li>Updated Observability User Guides to use gateway-addons-helm&lt;/li>
&lt;li>Updated Gateway-API User Guide to reflect support for BackendRef filters&lt;/li>
&lt;li>Updated HTTP Timeouts User Guide to highlight default Envoy timeouts&lt;/li>
&lt;li>Updated Installation Guide to use server-side apply&lt;/li>
&lt;li>Updated Installation Guide to refer to values.yaml docs&lt;/li>
&lt;li>Updated BackendTLSPolicy User Guide to GW-API v1.1.0&lt;/li>
&lt;li>Updated User Guides to use tabs when applying yaml from file or stdin&lt;/li>
&lt;li>Updated OIDC User Guide to use HTTPS redirect URLs&lt;/li>
&lt;li>Updated Order of versions in Site&lt;/li>
&lt;li>Updated Extensbility User Gudie to use yaml-format patches&lt;/li>
&lt;li>Updated Quickstart Guide to include next steps&lt;/li>
&lt;li>Updated CRD docs to include enum values&lt;/li>
&lt;li>Updated Extensibility User Guide with Envoy Patch Policy examples&lt;/li>
&lt;li>Updated structure of docs: rename Guides to Tasks, move Contribution&lt;/li>
&lt;li>Updated Support Matrix&lt;/li>
&lt;li>Updated egctl x status docs for xRoute and xPolicy&lt;/li>
&lt;li>Updated egctl User Guide with Install and Uninstall commands&lt;/li>
&lt;li>Updated GRPCRoute docs to use v1 instead of v1alpha2&lt;/li>
&lt;li>Fixed Rate Limiting User Guide to use correct CIDR matcher type names&lt;/li>
&lt;li>Fixed User Guide for JWT-based routing&lt;/li>
&lt;li>Fixed JSON Access Log Example&lt;/li>
&lt;li>Use linkinator to detect dead links in docs&lt;/li>
&lt;li>Use helm-docs to generate chart docs&lt;/li>
&lt;li>Support Not-Implemented-Hide marker in API docs&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added startupProbe to all provisioned containers to reduce risk of restart&lt;/li>
&lt;li>Added new gateway-addons-helm chart for Observability&lt;/li>
&lt;li>Added support for global image settings for all images in Envoy Gateway helm chart&lt;/li>
&lt;li>Added Support for PodDistruptionBudget for Envoy Gateway&lt;/li>
&lt;li>Added Support for TopologySpreadConstraints for Envoy Gateway&lt;/li>
&lt;li>Added Support for Tolerations for Envoy Gateway&lt;/li>
&lt;li>Added Support for Ratelimit image pull secrets and pull policy&lt;/li>
&lt;li>Updated ttlSecondsAfterFinished on certgen job to 30 by default&lt;/li>
&lt;li>Updated Envoy Gateway ImagePullPolicy to IfNotPresent released charts&lt;/li>
&lt;li>Remove envoy-gateway-metrics-service and merge its contents into envoy-gateway service&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Gateway-API v1.1.0&lt;/li>
&lt;li>Added new Backend CRD&lt;/li>
&lt;li>Added new EnvoyExtensionPolicy CRD&lt;/li>
&lt;li>Added Support for Plural Target Refs and Target Selectors in xPolicy CRDs&lt;/li>
&lt;li>Added Support for Backend CRD BackendRefs in HTTPRoute, GRPCRoute and EnvoyExtensionPolicy CRDs&lt;/li>
&lt;li>Added Support for Custom Extension Server Policy CRDs in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Custom ShutDownManager Image in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Leader Election in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Connecting to Extension Server over Unix Domain Socket in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Proxy PodDisruptionBudget in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Running Envoy Proxy as a Daemonset in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Proxy Loadbalancer Source Ranges in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Proxy Prometheus Metrics Compression in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for BackendRefs in Access Log, Metric and Trace Sinks in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Rate Limiting Tracing in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Routing to Service IP in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Access Log CEL filters in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Access Log Formatters for File and OpenTelemetry in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Zipkin Tracing in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for using the Listener port as a the Container port in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for OpenTelemtry Sink Export Settings in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Backend Client Certificate Authentication in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Backend TLS Settings in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for HTTP Filter Ordering in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for gRPC Access Log Service (ALS) Sink in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for OpenTelelemetry Sinks as a BackendRef in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for User-Provided name for generate Kubernetes resources in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Per-Endpoint stats in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Targeting SectionNames in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Preserving X-Request-ID header in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Using Downstream Protocol in Upstream connections in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for HTTP/2 settings in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Buffer Size Limit in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for HTTP Health Check in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Optionally requiring a Client Certificate in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Headers with Underscores CRD in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for XFCC header processing in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for TCP Listener Idle Timeout in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for IdleTimeout in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Limits in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for additional OIDC settings related to Resource, Token and Cookie in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Optionally requiring a JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for BackendRefs for Ext-Auth in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Authorization in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Ext-Auth failOpen in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Loadbalancer Cookie Consistent Hashing in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Disabling X-RateLimit headers in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Buffer Size Limit in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Loadbalancing Consistent Hash Table Size in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Loadbalancing Header Hash Policy in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Cluster Connection Buffer Size Limit in BackendTrafficPolicy&lt;/li>
&lt;li>Added Support for more Rate Limit Rules in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Wasm extension in EnvoyExtensionPolicy CRD&lt;/li>
&lt;li>Added Support for External Processing extension in EnvoyExtensionPolicy CRD&lt;/li>
&lt;li>Removed Status Print Column from xPolicy CRDs&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>SecurityPolicy translation failures will now cause routes referenced by the policy to return an immediate 500 response&lt;/li>
&lt;li>Gateway-API BackendTLSPolicy v1alpha3 is incompatible with previous versions of the CRD&lt;/li>
&lt;li>xPolicy targetRefs can no longer specify a namespace, since Gateway-API v1.1.0 uses LocalPolicyTargetReferenceWithSectionName in Policy resources&lt;/li>
&lt;/ul>
&lt;h3 id="deprecations">Deprecations&lt;a class="td-heading-self-link" href="#deprecations" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>xPolicy targetRef is deprecated, use targetRefs instead&lt;/li>
&lt;li>SecurityPolicy ExtAuth BackendRef is deprecated, use BackendRefs instead&lt;/li>
&lt;li>OpenTelemetry Proxy Access Log Host and Port are deprecated, use backendRefs instead&lt;/li>
&lt;li>OpenTelemetry Proxy Metrics Sink Host and Port are deprecated, use backendRefs instead&lt;/li>
&lt;li>Proxy Tracing Provider Host and Port are deprecated, use backendRefs instead&lt;/li>
&lt;li>Envoy Gateway Extension Server Host and Port are deprecated, use BackendEndpoint instead&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Supported Features to Gateway Class&lt;/li>
&lt;/ul>
&lt;h2 id="testing">Testing&lt;a class="td-heading-self-link" href="#testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added e2e test for Client MTLS&lt;/li>
&lt;li>Added e2e test for Load Balancing&lt;/li>
&lt;li>Added performance benchmarking test&lt;/li>
&lt;li>Added e2e test for Zipking Tracing&lt;/li>
&lt;li>Added e2e test for HTTP Health Checks&lt;/li>
&lt;li>Added e2e test for CEL Access Log Filter&lt;/li>
&lt;li>Added e2e test for GRPC Access Log Service Sink&lt;/li>
&lt;li>Added e2e test for XDS Metadata&lt;/li>
&lt;li>Added e2e test for Wasm from OCI Images and HTTP Source&lt;/li>
&lt;li>Added e2e test for Service IP Routing&lt;/li>
&lt;li>Added e2e test for Multiple GatewayClasses&lt;/li>
&lt;li>Added e2e test for HTTP Full Path rewrite&lt;/li>
&lt;li>Added e2e test for Backend API&lt;/li>
&lt;li>Added e2e test for Backend TLS Settings&lt;/li>
&lt;li>Added e2e test for disabling X-RateLimit Headers&lt;/li>
&lt;li>Added e2e test for Authorization&lt;/li>
&lt;li>Added e2e test for BackendRefs in Ext-Auth&lt;/li>
&lt;li>Added e2e test for Using Client Protocol in Upstream Connection&lt;/li>
&lt;li>Added e2e test for Backend Client Cert Authentication&lt;/li>
&lt;li>Added e2e test for External Processing Filter&lt;/li>
&lt;li>Added e2e test for Merge Gateways Feature&lt;/li>
&lt;li>Added e2e test for Option JWT authentication&lt;/li>
&lt;li>Added e2e test for Infrastructure using Server-Side Apply&lt;/li>
&lt;li>Added e2e test for Connection Limits&lt;/li>
&lt;li>Added e2e test for Envoy Graceful Shutdown&lt;/li>
&lt;li>Updated e2e test for Limit to cover multiple listeners&lt;/li>
&lt;li>Updated e2e test for CORS to not require access-control-expose-headers&lt;/li>
&lt;li>Run CEL tests on all supported K8s versions&lt;/li>
&lt;li>Added OSV Scanner for Golang Vulnerabilities and Licenses&lt;/li>
&lt;li>Added Trivy scanner for Docker images&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for BackendRef HTTP Filters&lt;/li>
&lt;li>Added Support for attaching EnvoyProxy to Gateways&lt;/li>
&lt;li>Added Support for cross-namespace EnvoyProxy reference from GatewayClass&lt;/li>
&lt;li>Added Support for Backend Traffic Policy for UDPRoute and TCPRoute&lt;/li>
&lt;li>Added Support for ClientTrafficPolicy for UDPRoute and TCPRoute&lt;/li>
&lt;li>Added Support for multiple BackendRefs in TCPRoute and UDPRoute&lt;/li>
&lt;li>Added Metrics related to XDS Server, Infra Manager and Controller&lt;/li>
&lt;li>Added Support for PolicyStatus in EnvoyPatchPolicy&lt;/li>
&lt;li>Added Support for Websocket upgrades in HTTP/1 Routes&lt;/li>
&lt;li>Added Support for custom controller name in egctl&lt;/li>
&lt;li>Added Support for BackendTLSPolicy CA Certificate reference to Secret&lt;/li>
&lt;li>Added names to Filter Chains&lt;/li>
&lt;li>Added Support extension server hooks for TCP and UDP listeners&lt;/li>
&lt;li>Added Support for attaching EnvoyProxy resource to Gateways&lt;/li>
&lt;li>Added Support for Exposing Prometheus Port in Rate Limiter Service&lt;/li>
&lt;li>Added Support for Optional Rate Limit Backend Redis&lt;/li>
&lt;li>Updated OAuth2 filter to preserve Authorization header if OIDC token forwarding is enabled&lt;/li>
&lt;li>Updated Default Filter Order to have Fault filter first in the HTTP Filter Chain&lt;/li>
&lt;li>Updated Ext-Auth Per-Route config to use filter-specific Config Type&lt;/li>
&lt;li>Updated Overload Manager configuration according to Envoy recommendations by default&lt;/li>
&lt;li>Updated Infrastructure resource management to user Server-Side Apply&lt;/li>
&lt;li>Updated Reflection of Errors in Gateway Status when too many addresses are assigned&lt;/li>
&lt;li>Fixed enforcement of same-namespace for BackendTLSPolicy and target&lt;/li>
&lt;li>Fixed processing all listeners before returning with an error&lt;/li>
&lt;li>Fixed creation of infrastructure resources if there are no listeners&lt;/li>
&lt;li>Fixed use GatewayClass Name for Observability if Merge Gateways is enabled&lt;/li>
&lt;li>Fixed CORS to not forward Not-Matching Preflights to Backends&lt;/li>
&lt;li>Fixed BackendTLSPolicy status to fully conform with PolicyStatus&lt;/li>
&lt;li>Fixed duplication of Ext-Auth, OIDC and Basic Auth Filters&lt;/li>
&lt;li>Fixed Proxy Protocol Filter to always be the first Listener Filter&lt;/li>
&lt;li>Fixed Translation Consistency by sorting Gateways&lt;/li>
&lt;li>Fixed QUIC Listener to only Advertise HTTP/3 over ALPN&lt;/li>
&lt;li>Fixed SNI matching for TCP Routes with TLS termination&lt;/li>
&lt;li>Fixed Reconciliation when EnvoyProxy backendRefs changes&lt;/li>
&lt;li>Fixed Reconciliation when a referenced Secret or ConfigMap changes&lt;/li>
&lt;li>Fixed ReplaceFullPath not working for root path&lt;/li>
&lt;li>Fixed Default Application Protocol to TCP for Zipkin Tracing&lt;/li>
&lt;li>Fixed not appending well-known ports (80, 443) in rediret Location header&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped K8s Client to v0.30.0&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped go-control-plane to v0.12.1&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added egctl x collect command&lt;/li>
&lt;li>Added Support for Install and Uninstall commands to egctl&lt;/li>
&lt;li>Added Support for xRoute and xPolicy in egctl x status&lt;/li>
&lt;li>Added Golang version to Envoy Gateway version command&lt;/li>
&lt;li>Fixed egctl x status gatewayclass example message&lt;/li>
&lt;/ul></description></item><item><title>v1.1.0-rc.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.0-rc.1/</link><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.1.0-rc.1/</guid><description>&lt;p>Date: July 8, 2024&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Performance Benchmarking Document&lt;/li>
&lt;li>Added User Guide for Zipkin Tracing&lt;/li>
&lt;li>Added User Guide for Customizing Ordering of Filters&lt;/li>
&lt;li>Added User Guide for External Processing Filter in EnvoyExtensionPolicy&lt;/li>
&lt;li>Added User Guide for installation of egctl with brew&lt;/li>
&lt;li>Added User Guide for Client Buffer Size Limit&lt;/li>
&lt;li>Added User Guide for Client Idle Timeout&lt;/li>
&lt;li>Added Chinese translation for release notes, roadmap, installation, development, contribution and several User Guides&lt;/li>
&lt;li>Added User Guide for Backend resource&lt;/li>
&lt;li>Added GA Blog Post&lt;/li>
&lt;li>Added Threat Model&lt;/li>
&lt;li>Added Adopters section to docs&lt;/li>
&lt;li>Added User Guide and Dashboards for Control Plane and Resource Observability&lt;/li>
&lt;li>Added User Guide for Connection Limits in ClientTrafficPolicy&lt;/li>
&lt;li>Added User Guide on using Private Key Provider&lt;/li>
&lt;li>Added Design Doc for Authorization&lt;/li>
&lt;li>Added Design Doc for XDS Metadata&lt;/li>
&lt;li>Added Design Doc for Backend resource&lt;/li>
&lt;li>Added Design Doc for Control Plane Observability&lt;/li>
&lt;li>Added Design Doc for EnvoyExtensionPolicy&lt;/li>
&lt;li>Added Design Doc for External Processing in EnvoyExtensionPolicy&lt;/li>
&lt;li>Updated Access Logging User Guide to include filtering with CEL Expression&lt;/li>
&lt;li>Updated Access Logging User Guide to include Metadata&lt;/li>
&lt;li>Updated Development Guide to require Golang 1.22&lt;/li>
&lt;li>Updated Quickstart User Guide to fetch GATEWAY_HOST from Gateway resource&lt;/li>
&lt;li>Updated Site to reflect GA status&lt;/li>
&lt;li>Updated HTTP Redirect User Guide to not set a redirect port or require a BackendRef&lt;/li>
&lt;li>Updated Observability User Guides to use gateway-addons-helm&lt;/li>
&lt;li>Updated Gateway-API User Guide to reflect support for BackendRef filters&lt;/li>
&lt;li>Updated HTTP Timeouts User Guide to highlight default Envoy timeouts&lt;/li>
&lt;li>Updated Installation Guide to use server-side apply&lt;/li>
&lt;li>Updated Installation Guide to refer to values.yaml docs&lt;/li>
&lt;li>Updated BackendTLSPolicy User Guide to GW-API v1.1.0&lt;/li>
&lt;li>Updated User Guides to use tabs when applying yaml from file or stdin&lt;/li>
&lt;li>Updated OIDC User Guide to use HTTPS redirect URLs&lt;/li>
&lt;li>Updated Order of versions in Site&lt;/li>
&lt;li>Updated Extensbility User Gudie to use yaml-format patches&lt;/li>
&lt;li>Updated Quickstart Guide to include next steps&lt;/li>
&lt;li>Updated CRD docs to include enum values&lt;/li>
&lt;li>Updated Extensibility User Guide with Envoy Patch Policy examples&lt;/li>
&lt;li>Updated structure of docs: rename Guides to Tasks, move Contribution&lt;/li>
&lt;li>Updated Support Matrix&lt;/li>
&lt;li>Updated egctl x status docs for xRoute and xPolicy&lt;/li>
&lt;li>Updated egctl User Guide with Install and Uninstall commands&lt;/li>
&lt;li>Updated GRPCRoute docs to use v1 instead of v1alpha2&lt;/li>
&lt;li>Fixed Rate Limiting User Guide to use correct CIDR matcher type names&lt;/li>
&lt;li>Fixed User Guide for JWT-based routing&lt;/li>
&lt;li>Fixed JSON Access Log Example&lt;/li>
&lt;li>Use linkinator to detect dead links in docs&lt;/li>
&lt;li>Use helm-docs to generate chart docs&lt;/li>
&lt;li>Support Not-Implemented-Hide marker in API docs&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added new gateway-addons-helm chart for Observability&lt;/li>
&lt;li>Added support for global image settings for all images in Envoy Gateway helm chart&lt;/li>
&lt;li>Added Support for PodDistruptionBudget for Envoy Gateway&lt;/li>
&lt;li>Added Support for TopologySpreadConstraints for Envoy Gateway&lt;/li>
&lt;li>Added Support for Tolerations for Envoy Gateway&lt;/li>
&lt;li>Added Support for Ratelimit image pull secrets and pull policy&lt;/li>
&lt;li>Updated ttlSecondsAfterFinished on certgen job to 30 by default&lt;/li>
&lt;li>Updated Envoy Gateway ImagePullPolicy to IfNotPresent released charts&lt;/li>
&lt;li>Remove envoy-gateway-metrics-service and merge its contents into envoy-gateway service&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Gateway-API v1.1.0&lt;/li>
&lt;li>Added new Backend CRD&lt;/li>
&lt;li>Added new EnvoyExtensionPolicy CRD&lt;/li>
&lt;li>Added Support for Plural Target Refs and Target Selectors in xPolicy CRDs&lt;/li>
&lt;li>Added Support for Backend CRD BackendRefs in HTTPRoute, GRPCRoute and EnvoyExtensionPolicy CRDs&lt;/li>
&lt;li>Added Support for Custom Extension Server Policy CRDs in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Custom ShutDownManager Image in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Leader Election in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Connecting to Extension Server over Unix Domain Socket in EnvoyGateway Config&lt;/li>
&lt;li>Added Support for Proxy PodDisruptionBudget in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Running Envoy Proxy as a Daemonset in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Proxy Loadbalancer Source Ranges in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Proxy Prometheus Metrics Compression in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for BackendRefs in Access Log, Metric and Trace Sinks in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Rate Limiting Tracing in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Routing to Service IP in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Access Log CEL filters in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Access Log Formatters for File and OpenTelemetry in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Zipkin Tracing in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for using the Listener port as a the Container port in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for OpenTelemtry Sink Export Settings in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Backend Client Certificate Authentication in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Backend TLS Settings in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for HTTP Filter Ordering in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for gRPC Access Log Service (ALS) Sink in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for OpenTelelemetry Sinks as a BackendRef in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for User-Provided name for generate Kubernetes resources in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Per-Endpoint stats in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Targeting SectionNames in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Preserving X-Request-ID header in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Using Downstream Protocol in Upstream connections in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for HTTP/2 settings in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Buffer Size Limit in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for HTTP Health Check in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Optionally requiring a Client Certificate in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Headers with Underscores CRD in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for XFCC header processing in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for TCP Listener Idle Timeout in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for IdleTimeout in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Limits in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for additional OIDC settings related to Resource, Token and Cookie in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Optionally requiring a JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for BackendRefs for Ext-Auth in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Authorization in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Ext-Auth failOpen in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Loadbalancer Cookie Consistent Hashing in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Disabling X-RateLimit headers in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Buffer Size Limit in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Loadbalancing Consistent Hash Table Size in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Loadbalancing Header Hash Policy in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Cluster Connection Buffer Size Limit in BackendTrafficPolicy&lt;/li>
&lt;li>Added Support for more Rate Limit Rules in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Wasm extension in EnvoyExtensionPolicy CRD&lt;/li>
&lt;li>Added Support for External Processing extension in EnvoyExtensionPolicy CRD&lt;/li>
&lt;li>Removed Status Print Column from xPolicy CRDs&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Gateway-API BackendTLSPolicy v1alpha3 is incompatible with previous versions of the CRD&lt;/li>
&lt;li>xPolicy targetRefs can no longer specify a namespace, since Gateway-API v1.1.0 uses LocalPolicyTargetReferenceWithSectionName in Policy resources&lt;/li>
&lt;/ul>
&lt;h3 id="deprecations">Deprecations&lt;a class="td-heading-self-link" href="#deprecations" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>xPolicy targetRef is deprecated, use targetRefs instead&lt;/li>
&lt;li>SecurityPolicy ExtAuth BackendRef is deprecated, use BackendRefs instead&lt;/li>
&lt;li>OpenTelemetry Proxy Access Log Host and Port are deprecated, use backendRefs instead&lt;/li>
&lt;li>OpenTelemetry Proxy Metrics Sink Host and Port are deprecated, use backendRefs instead&lt;/li>
&lt;li>Proxy Tracing Provider Host and Port are deprecated, use backendRefs instead&lt;/li>
&lt;li>Envoy Gateway Extension Server Host and Port are deprecated, use BackendEndpoint instead&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Supported Features to Gateway Class&lt;/li>
&lt;/ul>
&lt;h2 id="testing">Testing&lt;a class="td-heading-self-link" href="#testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added performance benchmarking test&lt;/li>
&lt;li>Added e2e test for Zipking Tracing&lt;/li>
&lt;li>Added e2e test for HTTP Health Checks&lt;/li>
&lt;li>Added e2e test for CEL Access Log Filter&lt;/li>
&lt;li>Added e2e test for GRPC Access Log Service Sink&lt;/li>
&lt;li>Added e2e test for XDS Metadata&lt;/li>
&lt;li>Added e2e test for Wasm from OCI Images and HTTP Source&lt;/li>
&lt;li>Added e2e test for Service IP Routing&lt;/li>
&lt;li>Added e2e test for Multiple GatewayClasses&lt;/li>
&lt;li>Added e2e test for HTTP Full Path rewrite&lt;/li>
&lt;li>Added e2e test for Backend API&lt;/li>
&lt;li>Added e2e test for Backend TLS Settings&lt;/li>
&lt;li>Added e2e test for disabling X-RateLimit Headers&lt;/li>
&lt;li>Added e2e test for Authorization&lt;/li>
&lt;li>Added e2e test for BackendRefs in Ext-Auth&lt;/li>
&lt;li>Added e2e test for Using Client Protocol in Upstream Connection&lt;/li>
&lt;li>Added e2e test for Backend Client Cert Authentication&lt;/li>
&lt;li>Added e2e test for External Processing Filter&lt;/li>
&lt;li>Added e2e test for Merge Gateways Feature&lt;/li>
&lt;li>Added e2e test for Option JWT authentication&lt;/li>
&lt;li>Added e2e test for Infrastructure using Server-Side Apply&lt;/li>
&lt;li>Added e2e test for Connection Limits&lt;/li>
&lt;li>Added e2e test for Envoy Graceful Shutdown&lt;/li>
&lt;li>Updated e2e test for Limit to cover multiple listeners&lt;/li>
&lt;li>Updated e2e test for CORS to not require access-control-expose-headers&lt;/li>
&lt;li>Run CEL tests on all supported K8s versions&lt;/li>
&lt;li>Added OSV Scanner for Golang Vulnerabilities and Licenses&lt;/li>
&lt;li>Added Trivy scanner for Docker images&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for BackendRef HTTP Filters&lt;/li>
&lt;li>Added Support for attaching EnvoyProxy to Gateways&lt;/li>
&lt;li>Added Support for cross-namespace EnvoyProxy reference from GatewayClass&lt;/li>
&lt;li>Added Support for Backend Traffic Policy for UDPRoute and TCPRoute&lt;/li>
&lt;li>Added Support for ClientTrafficPolicy for UDPRoute and TCPRoute&lt;/li>
&lt;li>Added Support for multiple BackendRefs in TCPRoute and UDPRoute&lt;/li>
&lt;li>Added Metrics related to XDS Server, Infra Manager and Controller&lt;/li>
&lt;li>Added Support for PolicyStatus in EnvoyPatchPolicy&lt;/li>
&lt;li>Added Support for Websocket upgrades in HTTP/1 Routes&lt;/li>
&lt;li>Added Support for custom controller name in egctl&lt;/li>
&lt;li>Added Support for BackendTLSPolicy CA Certificate reference to Secret&lt;/li>
&lt;li>Added names to Filter Chains&lt;/li>
&lt;li>Added Support extension server hooks for TCP and UDP listeners&lt;/li>
&lt;li>Added Support for attaching EnvoyProxy resource to Gateways&lt;/li>
&lt;li>Added Support for Exposing Prometheus Port in Rate Limiter Service&lt;/li>
&lt;li>Added Support for Optional Rate Limit Backend Redis&lt;/li>
&lt;li>Updated OAuth2 filter to preserve Authorization header if OIDC token forwarding is enabled&lt;/li>
&lt;li>Updated Default Filter Order to have Fault filter first in the HTTP Filter Chain&lt;/li>
&lt;li>Updated Ext-Auth Per-Route config to use filter-specific Config Type&lt;/li>
&lt;li>Updated Overload Manager configuration according to Envoy recommendations by default&lt;/li>
&lt;li>Updated Infrastructure resource management to user Server-Side Apply&lt;/li>
&lt;li>Updated Reflection of Errors in Gateway Status when too many addresses are assigned&lt;/li>
&lt;li>Fixed enforcement of same-namespace for BackendTLSPolicy and target&lt;/li>
&lt;li>Fixed processing all listeners before returning with an error&lt;/li>
&lt;li>Fixed creation of infrastructure resources if there are no listeners&lt;/li>
&lt;li>Fixed use GatewayClass Name for Observability if Merge Gateways is enabled&lt;/li>
&lt;li>Fixed CORS to not forward Not-Matching Preflights to Backends&lt;/li>
&lt;li>Fixed BackendTLSPolicy status to fully conform with PolicyStatus&lt;/li>
&lt;li>Fixed duplication of Ext-Auth, OIDC and Basic Auth Filters&lt;/li>
&lt;li>Fixed Proxy Protocol Filter to always be the first Listener Filter&lt;/li>
&lt;li>Fixed Translation Consistency by sorting Gateways&lt;/li>
&lt;li>Fixed QUIC Listener to only Advertise HTTP/3 over ALPN&lt;/li>
&lt;li>Fixed SNI matching for TCP Routes with TLS termination&lt;/li>
&lt;li>Fixed Reconciliation when EnvoyProxy backendRefs changes&lt;/li>
&lt;li>Fixed Reconciliation when a referenced Secret or ConfigMap changes&lt;/li>
&lt;li>Fixed ReplaceFullPath not working for root path&lt;/li>
&lt;li>Fixed Default Application Protocol to TCP for Zipkin Tracing&lt;/li>
&lt;li>Fixed not appending well-known ports (80, 443) in rediret Location header&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped K8s Client to v0.30.0&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Bumped go-control-plane to v0.12.1&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Install and Uninstall Commands to egctl&lt;/li>
&lt;li>Added Support for xRoute and xPolicy in egctl x status&lt;/li>
&lt;li>Added Golang version to Envoy Gateway version command&lt;/li>
&lt;li>Fixed egctl x status gatewayclass example message&lt;/li>
&lt;/ul></description></item><item><title>v1.0.2</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.2/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.2/</guid><description>&lt;p>Date: June 12, 2024&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Updated EnvoyProxy to 1.29.5&lt;/li>
&lt;li>Use Patch API for infra-client&lt;/li>
&lt;li>Use ServerSideApply instead of CreateOrUpdate for infra-client&lt;/li>
&lt;/ul>
&lt;h2 id="testing">Testing&lt;a class="td-heading-self-link" href="#testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed failures due to an expired certificate in one of the translator tests&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Use &lt;proto>-&lt;port> for naming service and container ports&lt;/li>
&lt;li>Added proxy protocol always as first listenerFilter&lt;/li>
&lt;li>Set ignoreCase for header matchers in extAuth&lt;/li>
&lt;li>Added backend TLS SAN validation&lt;/li>
&lt;li>Fixed ReplaceFullPath not working for root path (/)&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed duplicated xroutes are added to gatewayapi Resources&lt;/li>
&lt;li>Fixed security policy reference grant from field type&lt;/li>
&lt;li>Fixed Route extension filters with different types but the same name and namespace aren&amp;rsquo;t correctly cached&lt;/li>
&lt;li>Fixed secrets/configmap updates to trigger a controller reconcile by removing the generationChanged predicate&lt;/li>
&lt;li>Removed namespace restriction for EnvoyProxy parametersRef&lt;/li>
&lt;/ul></description></item><item><title>v1.0.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.1/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.1/</guid><description>&lt;p>Date: April 9, 2024&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Updated EnvoyProxy version to v1.29.3&lt;/li>
&lt;li>Fixed certgen to support creating the hmac secret during an upgrade&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed nil secret in resourceversiontable&lt;/li>
&lt;li>Add missing http filters to the http filter chain when ClientTrafficPolicy and MergeGateways is enabled&lt;/li>
&lt;li>Allow websockets when url rewrite is enabled&lt;/li>
&lt;li>Set the Host header for http health checker&lt;/li>
&lt;li>Fixed double slashes in redirect URL&lt;/li>
&lt;li>Allow ClientTrafficPolicy to attach to multiple http (non https) listeners within the same Gateway&lt;/li>
&lt;li>Set path prefix for the http ext auth service&lt;/li>
&lt;li>Set the route matching precedence order to Exact &amp;gt; RegularExpression &amp;gt; PathPrefix&lt;/li>
&lt;li>Fixed infraIR duplicate port translation for merged gateways&lt;/li>
&lt;li>Set SpawnUpstreamSpan to true&lt;/li>
&lt;li>Allow rate limit to work with multiple listeners&lt;/li>
&lt;/ul>
&lt;h2 id="infra-manager">Infra-manager&lt;a class="td-heading-self-link" href="#infra-manager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Skip creating infra resources when the InfraIR has empty listeners&lt;/li>
&lt;/ul></description></item><item><title>Announcing Envoy Gateway’s 1.0 Release!</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/blogs/1.0-release/1.0-release/</link><pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/blogs/1.0-release/1.0-release/</guid><description>&lt;p>Today we’re ecstatic to announce the 1.0 release of Envoy Gateway (EG) for Kubernetes. A mature version ready for widespread adoption in production that simplifies the use of Envoy for managing North-South traffic.&lt;/p>
&lt;p>After nearly two years with contributions from over 90 engineers we are proud to say EG meets the goals that Matt outlined in the &lt;a href="https://blog.envoyproxy.io/introducing-envoy-gateway-ad385cc59532">original post&lt;/a> introducing the project, summarized here:&lt;/p>
&lt;ul>
&lt;li>Built around the (then emerging) &lt;a href="https://gateway-api.sigs.k8s.io">Kubernetes Gateway API&lt;/a>&lt;/li>
&lt;li>Addresses common needs with a solution that is simple to configure and understand&lt;/li>
&lt;li>Provides &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/">great docs&lt;/a> for common use cases to enable ease of adoption&lt;/li>
&lt;li>Empowers the community and vendors to drive the project forward through an extensible API&lt;/li>
&lt;/ul>
&lt;p>Can’t wait to try it? Visit the EG &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/">tasks&lt;/a> to get started with Envoy Gateway 1.0&lt;/p></description></item><item><title>Announcing Envoy Gateway v1.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v1.0/</link><pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v1.0/</guid><description>&lt;p>We are thrilled to announce the arrival of Envoy Gateway v1.0.0, marking the official General Availability (GA) milestone for the project!&lt;/p>
&lt;p>This release represents a significant achievement, and we extend our heartfelt gratitude to the entire Envoy Gateway community for their contributions, dedication, and support. Your collaborative efforts have been instrumental in reaching this pivotal release.&lt;/p>
&lt;p>Thank you for being an integral part of this journey. We are excited to see how Envoy Gateway v1.0.0 will empower your operations and look forward to continuing our work together to drive the future of Cloud Native API Gateway.&lt;/p></description></item><item><title>v1.0.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.0/</link><pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.0/</guid><description>&lt;p>Date: March 13, 2024&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added User Guide for Local Ratelimit&lt;/li>
&lt;li>Added User Guide for Circuit Breaker&lt;/li>
&lt;li>Added User Guide for fault injection&lt;/li>
&lt;li>Added User Guide for EnvoyProxy extraArgs&lt;/li>
&lt;li>Added User Guide for Timeouts in ClientTrafficPolicy&lt;/li>
&lt;li>Added User Guide for JWT claim base routing&lt;/li>
&lt;li>Added User Guide for HTTP Timeout&lt;/li>
&lt;li>Added User Guide for Retry in BackendTrafficPolicy&lt;/li>
&lt;li>Added User Guide for Basic Auth&lt;/li>
&lt;li>Added User Guide for OIDC&lt;/li>
&lt;li>Added User Guide for ClientTrafficPolicy&lt;/li>
&lt;li>Added User Guide for BackendTrafficPolicy&lt;/li>
&lt;li>Added User Guide for Basic Auth using HTTPS&lt;/li>
&lt;li>Added User Guide for External Authorization&lt;/li>
&lt;li>Added User Guide for Routing Outside Kubernetes&lt;/li>
&lt;li>Added User Guide for BackendTLSPolicy&lt;/li>
&lt;li>Added User Guide for Mutual TLS from External Clients to the Gateway&lt;/li>
&lt;li>Added User Guide for Control Plane Authentication using custom certs&lt;/li>
&lt;li>Added User Guide for Multiple Gatewayclass and Merge Gateways Deployment Mode&lt;/li>
&lt;li>Added &lt;code>Type&lt;/code> and &lt;code>required&lt;/code> for CRD API doc&lt;/li>
&lt;li>Refactored Structure of User Guide docs&lt;/li>
&lt;li>Refactored Move Design docs under &amp;ldquo;Get Involved&amp;rdquo;&lt;/li>
&lt;li>Updated crd-ref-docs to 0.0.10&lt;/li>
&lt;li>Updated Envoy proxy image to envoy:distroless-dev in main&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Pulling envoyGateway image from a private registry&lt;/li>
&lt;li>Added Support for Configuring resources for certgen job&lt;/li>
&lt;li>Added Support for Configuring affinity for EnvoyGateway pod&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Downstream QUIC/HTTP3 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Downstream MTLS in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Enabling EnvoyHeaders in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for DisableMergeSlash and escapedSlashesAction in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for EnableTrailers in HTTP/1.1 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Preserving header letter-case on HTTP/1 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Enabling HTTP/1.0 and HTTP/0.9 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Client IP Detection using XFF in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Client IP Detection using Custom Header in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Timeouts in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Common TLS configuration properties in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Proxy protocol in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for TCPKeepAlive in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Local rate limit in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for CircuitBreaker in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Fault injection in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Passive Health Checks in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Active Health Checks in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Timeouts in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Compressor/Decompressor in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Retry in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Slow start mode in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Proxy protocol in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for TCPKeepAlive in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for PolicyStatus in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for PolicyStatus in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for PolicyStatus in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for OIDC in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Basic Auth in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for RedirectURL and signoutPath to OIDC in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for ExtractFrom headers and params to JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for External Authorization in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for RecomputeRoute field to JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for AllowCredentials knob to CORS setting in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Extract from different identifier to JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Secret resource in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for Making the value optional for JSONPatchOperation in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for &lt;code>From&lt;/code> field to JSONPatchOperation in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for MergeGateways in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for Upstream TLS by implementing BackendTLSPolicy CRD&lt;/li>
&lt;li>Added Support for LabelSelector type for NamespaceSelectors in EnvoyGateway Configuration&lt;/li>
&lt;li>Added Support for Ratelimit prometheus in EnvoyGateway Configuration&lt;/li>
&lt;li>Added Support for Gracefully drain listeners before envoy shutdown on pod termination in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Configuring externalTrafficPolicy to the envoy service in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Envoy extra args in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Mergepatch to envoyproxy/ratelimit deployment in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Mergepatch to envoyproxy service in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for NodeSelector to PodSpec in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for HorizontalPodAutoscaler in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for TopologySpreadConstraints to PodSpec in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for ImagePullSecrets to PodSpec in EnvoyProxy CRD&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Use wildcard to match AllowOrigins to CORS in SecurityPolicy CRD&lt;/li>
&lt;li>Remove Hostnetwork support in EnvoyProxy CRD&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Replaced backend image from gcr.io/k8s-staging-ingressconformance/echoserver to gcr.io/k8s-staging-gateway-api/echo-basic&lt;/li>
&lt;/ul>
&lt;h2 id="testing">Testing&lt;a class="td-heading-self-link" href="#testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added e2e test for Header Case-Preserving&lt;/li>
&lt;li>Added e2e test for Timeout in ClientTrafficPolicy&lt;/li>
&lt;li>Added e2e test for JWT claim base routing&lt;/li>
&lt;li>Added e2e test for OIDC&lt;/li>
&lt;li>Added e2e test for BackendTrafficPolicy Retry&lt;/li>
&lt;li>Added e2e test for Backend Upgrade&lt;/li>
&lt;li>Added e2e test for External Authorization&lt;/li>
&lt;li>Added e2e test for Backend TLS policy&lt;/li>
&lt;li>Added e2e test for Envoy Gateway Release Upgrade&lt;/li>
&lt;li>Added e2e test for Weighted backend&lt;/li>
&lt;li>Added validation for LoadBalancerIP to prevent trailing period&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Prefix match to prevent mismatching routes with the same prefix&lt;/li>
&lt;li>Fixed Multiple reconciling by implementing comparable interface for ir.Infra&lt;/li>
&lt;li>Fixed EndpointSlice with empty conditions {}&lt;/li>
&lt;li>Fixed Error handling when parsing the http request timeout&lt;/li>
&lt;li>Fixed No status when EnvoyPatchPolicy is disabled&lt;/li>
&lt;li>Fixed Printable for xds and infra IRs&lt;/li>
&lt;li>Fixed Skip backendRefs with weight set to 0&lt;/li>
&lt;li>Fixed AND Header matches in ratelimiting not working&lt;/li>
&lt;li>Fixed Deletion logics when no gatewayclasses exist&lt;/li>
&lt;li>Fixed Match mergedGateways irKey for ClientTrafficPolicy&lt;/li>
&lt;li>Fixed Policies should apply only to gateways they were attached to when mergeGateways is true&lt;/li>
&lt;li>Fixed Listener status is not surfaced for gateways when MergeGateways enabled&lt;/li>
&lt;li>Fixed GRPCroute websocket not working by moving web socket upgrade config from hcm to route&lt;/li>
&lt;li>Fixed Configure idle timeout when timeout is set on HTTPRoute&lt;/li>
&lt;li>Fixed Relaxing HTTPS restriction for OIDC token endpoint&lt;/li>
&lt;li>Fixed Panic when translating routes with empty backends&lt;/li>
&lt;li>Fixed Xds translation should be done in a best-effort manner&lt;/li>
&lt;li>Fixed Delete unused status keys from watchable&lt;/li>
&lt;li>Fixed Ignoring finalizers when comparing envoy proxy service&lt;/li>
&lt;li>Fixed Don&amp;rsquo;t override the ALPN array if HTTP/3 is enabled&lt;/li>
&lt;li>Fixed Add h3 ALPN by default if HTTP/3 is enabled&lt;/li>
&lt;li>Fixed Change the Merge behavior to Replace for SecurityPolicy/BackendTrafficPolicy&lt;/li>
&lt;li>Fixed Use service port in alt-svc header if HTTP/3 is enabled&lt;/li>
&lt;li>Fixed Prevent policies targeting non-TLS listeners on the same port from conflicting&lt;/li>
&lt;li>Fixed Skip the ReasonTargetNotFound for all policies&lt;/li>
&lt;li>Fixed Skip publishing empty status for all policies&lt;/li>
&lt;li>Added Support for validating regex before sending to Envoy&lt;/li>
&lt;li>Added Support for setting spec.addresses.value into ClusterIP when Service Type is ClusterIP&lt;/li>
&lt;li>Added Unsupported status condition for filters within BackendRef&lt;/li>
&lt;li>Added List instead of map for Provider Resources for order stability&lt;/li>
&lt;li>Added Suffix for oauth cookies to prevent multiple oauth filters from overwriting each other&amp;rsquo;s cookies&lt;/li>
&lt;li>Added Support for overriding condition to BackendTrafficPolicy and SecurityPolicy&lt;/li>
&lt;li>Added Support for default retry budget and retry host predicate&lt;/li>
&lt;li>Added Support for implementing gateway.spec.infrastructure&lt;/li>
&lt;li>Added Support for Upstream TLS to multiple Backends&lt;/li>
&lt;li>Added Validation for CA Cert in ClientTrafficPolicy&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for multiple GatewayClass per controller&lt;/li>
&lt;li>Added SecurityPolicyIndexers in Kubernetes Provider&lt;/li>
&lt;li>Added Support for generating HMAC secret in CertGen Job&lt;/li>
&lt;li>Fixed Finalizer logic when deleting Gatewayclasses&lt;/li>
&lt;li>Fixed MergeGateways panics when restarting control plane&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for EDS cache&lt;/li>
&lt;li>Added Support for ADS cache to ensure the rule order&lt;/li>
&lt;li>Fixed Deprecated field error when using RequestHeaderModifier filter&lt;/li>
&lt;li>Fixed Envoy rejects XDS at runtime losing all routes on restart&lt;/li>
&lt;li>Fixed Requests not matching defined routes trigger per-route filters&lt;/li>
&lt;li>Bumped go-control-plane to v0.12.0&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for egctl x status&lt;/li>
&lt;li>Added Support for egctl experimental dashboard envoy-proxy&lt;/li>
&lt;li>Added Support for egctl config ratelimit&lt;/li>
&lt;li>Added Support for egctl translate from gateway-api resources to IR&lt;/li>
&lt;/ul></description></item><item><title>Announcing Envoy Gateway v0.6</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.6/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.6/</guid><description>&lt;p>We are pleased to announce the release of Envoy Gateway v0.6!&lt;/p>
&lt;p>This is the fifth functional release of Envoy Gateway. We would like to thank the entire Envoy Gateway community for
helping publish the release.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.6.0/">Release Notes&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://gateway.envoyproxy.io/v0.6">Docs&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://github.com/envoyproxy/gateway/releases/tag/v0.6.0">Download&lt;/a>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="whats-new">What&amp;rsquo;s New&lt;a class="td-heading-self-link" href="#whats-new" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The release adds a ton of features and functionality. Here are some highlights:&lt;/p>
&lt;h3 id="gateway-api">Gateway API&lt;a class="td-heading-self-link" href="#gateway-api" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Upgraded to Gateway API v1.0&lt;/li>
&lt;li>Added support for HTTPRoute Timeouts&lt;/li>
&lt;/ul>
&lt;h3 id="add-control-plane-proxy-telemetry">Add Control Plane Proxy Telemetry&lt;a class="td-heading-self-link" href="#add-control-plane-proxy-telemetry" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for Metrics Telemetry&lt;/li>
&lt;/ul>
&lt;h3 id="add-support-for-directly-configuring-xds">Add Support for directly configuring xDS&lt;a class="td-heading-self-link" href="#add-support-for-directly-configuring-xds" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for the EnvoyPatchPolicy API&lt;/li>
&lt;/ul>
&lt;h3 id="clienttrafficpolicy">ClientTrafficPolicy&lt;a class="td-heading-self-link" href="#clienttrafficpolicy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for configuring Downstream Keep Alives&lt;/li>
&lt;/ul>
&lt;h3 id="backendtrafficpolicy">BackendTrafficPolicy&lt;a class="td-heading-self-link" href="#backendtrafficpolicy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for configuring Rate limiting&lt;/li>
&lt;li>Added Support for configuring load balancing&lt;/li>
&lt;/ul>
&lt;h3 id="securitypolicy">SecurityPolicy&lt;a class="td-heading-self-link" href="#securitypolicy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for configuring JWT&lt;/li>
&lt;li>Added Support for configuring CORS&lt;/li>
&lt;/ul>
&lt;h3 id="api-updates">API Updates&lt;a class="td-heading-self-link" href="#api-updates" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added support for selectively watching resources based on Namespace Selector&lt;/li>
&lt;li>Added EnvoyGateway Metrics with Prometheus and OpenTelemetry support&lt;/li>
&lt;li>Added Support for InitContainers in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for LoadBalancerIP in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for AllocateLoadBalancerNodePorts in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for LoadBalancerClass in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for selecting EnvoyProxy stats to be generated&lt;/li>
&lt;li>Added Support for enabling EnvoyProxy Virtual Host metrics&lt;/li>
&lt;li>Added Support for Merging Gateway resources onto the same infrastructure&lt;/li>
&lt;/ul>
&lt;h3 id="cli">CLI&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added &lt;code>egctl stats&lt;/code> command&lt;/li>
&lt;/ul>
&lt;h3 id="kubernetes-provider">Kubernetes Provider&lt;a class="td-heading-self-link" href="#kubernetes-provider" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Improved reconiliation by using the same enqueue request for all resources&lt;/li>
&lt;li>Added support for reconciling ServiceImport CRD&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Removed RateLimitFilter, and replaced it with BackendTrafficPolicy&lt;/li>
&lt;li>Removed AuthenticationFilter, and replaced it with SecurityPolicy&lt;/li>
&lt;li>Moved the EnvoyProxy CRD from &lt;code>config.gateway.envoyproxy.io&lt;/code> to &lt;code>gateway.envoyproxy.io&lt;/code>&lt;/li>
&lt;li>Converted the &lt;code>bootstrap&lt;/code> field within &lt;code>EnvoyProxy&lt;/code> into a struct to support merge operations.&lt;/li>
&lt;/ul></description></item><item><title>v0.6.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.6.0/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.6.0/</guid><description>&lt;p>Date: Nov 1, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Introduced a new website based on Hugo&lt;/li>
&lt;li>Added Grafana dashboards and integration docs for EnvoyProxy metrics&lt;/li>
&lt;li>Added Grafana integration docs for Gateway API metrics&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Updated EnvoyProxy image to be a distroless variant.&lt;/li>
&lt;li>Removed resources around kube-rbac-proxy&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to Gateway API v1.0.0&lt;/li>
&lt;li>Added the ClientTrafficPolicy CRD with Keep Alive Support&lt;/li>
&lt;li>Added the BackendTrafficPolicy CRD with RateLimit and LoadBalancer Support&lt;/li>
&lt;li>Added the SecurityPolicy CRD with CORS and JWT Support&lt;/li>
&lt;li>Added EnvoyGateway Metrics with Prometheus and OpenTelemetry support&lt;/li>
&lt;li>Added Support for InitContainers in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for LoadBalancerIP in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for AllocateLoadBalancerNodePorts in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for LoadBalancerClass in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for selecting EnvoyProxy stats to be generated&lt;/li>
&lt;li>Added Support for enabling EnvoyProxy Virtual Host metrics&lt;/li>
&lt;li>Added Support for Merging Gateway resources onto the same infrastructure&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Removed the AuthenticationFilter CRD&lt;/li>
&lt;li>Removed the RateLimitFilter CRD&lt;/li>
&lt;li>Moved EnvoyProxy CRD from &lt;code>config.gateway.envoyproxy.io&lt;/code> to &lt;code>gateway.envoyproxy.io&lt;/code>&lt;/li>
&lt;li>Enabled EnvoyProxy Prometheus Endpoint by default with an option to disable it&lt;/li>
&lt;li>Updated the Bootstrap field within the EnvoyProxy CRD with an additional value&lt;/li>
&lt;li>field to specify bootstrap config&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for HTTPRouteBackendProtocolH2C Test&lt;/li>
&lt;li>Added Support for HTTPRouteBackendProtocolWebSocket Test&lt;/li>
&lt;li>Added Support for HTTPRouteRequestMultipleMirrors Test&lt;/li>
&lt;li>Added Support for HTTPRouteTimeoutRequest Test&lt;/li>
&lt;li>Added Support for HTTPRouteTimeoutBackendRequest Test&lt;/li>
&lt;li>Added Support for HTTPRouteRedirectPortAndScheme Test&lt;/li>
&lt;/ul>
&lt;h2 id="watchable">Watchable&lt;a class="td-heading-self-link" href="#watchable" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Improved caching of resource by implementing a compare function agnostic of resource order&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added support for routing to EndpointSlice endpoints&lt;/li>
&lt;li>Added support for HTTPRoute Timeouts&lt;/li>
&lt;li>Added support for multiple RequestMirror filters per HTTPRoute rule&lt;/li>
&lt;li>Use / instead of - in IR Route Names&lt;/li>
&lt;li>Added Support to ignore ports in Host header&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the generationChangedPredicate to most resources to limit resource reconiliation&lt;/li>
&lt;li>Improved reconiliation by using the same enqueue request for all resources&lt;/li>
&lt;li>Added support for reconciling ServiceImport CRD&lt;/li>
&lt;li>Added support for selectively watching resources based on Namespace Selector&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Layered Runtime warnings&lt;/li>
&lt;li>Upgraded to the latest version of go-control-plane that fixed xDS Resource ordering issues for ADS.&lt;/li>
&lt;li>Added HTTP2 Keep Alives to the xds connection&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for egctl stats command&lt;/li>
&lt;/ul></description></item><item><title>v1.0.0-rc.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.0-rc.1/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v1.0.0-rc.1/</guid><description>&lt;p>Date: Nov 1, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added User Guide for local rate limit&lt;/li>
&lt;li>Added User Guide for circuit breaker&lt;/li>
&lt;li>Added User Guide for fault injection&lt;/li>
&lt;li>Added User Guide for EnvoyProxy extraArgs&lt;/li>
&lt;li>Added User Guide for Timeouts in ClientTrafficPolicy&lt;/li>
&lt;li>Added User Guide for JWT claim base routing&lt;/li>
&lt;li>Added User Guide for HTTP Timeout&lt;/li>
&lt;li>Added User Guide for Retry in BackendTrafficPolicy&lt;/li>
&lt;li>Added User Guide for basic auth&lt;/li>
&lt;li>Added User Guide for OIDC&lt;/li>
&lt;li>Added User Guide for ClientTrafficPolicy&lt;/li>
&lt;li>Added User Guide for BackendTrafficPolicy&lt;/li>
&lt;li>Added &lt;code>Type&lt;/code> and &lt;code>required&lt;/code> for CRD API doc&lt;/li>
&lt;li>Updated crd-ref-docs to 0.0.10&lt;/li>
&lt;li>Updated Envoy proxy image to envoy:distroless-dev in main&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Pulling envoyGateway image from a private registry&lt;/li>
&lt;li>Added Support for Configuring resources for certgen job&lt;/li>
&lt;li>Added Support for Configuring affinity for EnvoyGateway pod&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Downstream QUIC/HTTP3 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Downstream MTLS in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for enabling EnvoyHeaders in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for DisableMergeSlash and escapedSlashesAction in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for EnableTrailers in HTTP/1.1 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Preserving header letter-case on HTTP/1 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for enabling HTTP/1.0 and HTTP/0.9 in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Client IP Detection using XFF in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Client IP Detection using Custom Header in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Timeouts in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Common TLS configuration properties in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Proxy protocol in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for TCPKeepAlive in ClientTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Local rate limit in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for CircuitBreaker in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Fault injection in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Passive Health Checks in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Active Health Checks in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Connection Timeouts in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Compressor/Decompressor in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Retry in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Slow start mode in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for Proxy protocol in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for TCPKeepAlive in BackendTrafficPolicy CRD&lt;/li>
&lt;li>Added Support for OIDC in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Basic Auth in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for RedirectURL and signoutPath to OIDC in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for ExtractFrom headers and params to JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for External authorization in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for RecomputeRoute field to JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for AllowCredentials knob to CORS setting in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Extract from different identifier to JWT in SecurityPolicy CRD&lt;/li>
&lt;li>Added Support for Secret resource in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for Making the value optional for JSONPatchOperation in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for &lt;code>From&lt;/code> field to JSONPatchOperation in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for MergeGateways in EnvoyPatchPolicy CRD&lt;/li>
&lt;li>Added Support for Upstream TLS by implementing BackendTLSPolicy CRD&lt;/li>
&lt;li>Added Support for LabelSelector type for NamespaceSelectors in EnvoyGateway Configuration&lt;/li>
&lt;li>Added Support for ratelimit prometheus in EnvoyGateway Configuration&lt;/li>
&lt;li>Added Support for Gracefully drain listeners before envoy shutdown on pod termination in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Configuring externalTrafficPolicy to the envoy service in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Envoy extra args in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Mergepatch to envoyproxy/ratelimit deployment in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for Mergepatch to envoyproxy service in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for NodeSelector to PodSpec in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for HorizontalPodAutoscaler in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for TopologySpreadConstraints to PodSpec in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for ImagePullSecrets to PodSpec in EnvoyProxy CRD&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Use wildcard to match AllowOrigins to CORS in SecurityPolicy CRD&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Replaced backend image from gcr.io/k8s-staging-ingressconformance/echoserver to gcr.io/k8s-staging-gateway-api/echo-basic&lt;/li>
&lt;/ul>
&lt;h2 id="testing">Testing&lt;a class="td-heading-self-link" href="#testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added e2e test for header case-preserving&lt;/li>
&lt;li>Added LoadBalancerIP validation to prevent trailing period&lt;/li>
&lt;li>Added e2e test for Timeout in ClientTrafficPolicy&lt;/li>
&lt;li>Added e2e test for jwt claim base routing&lt;/li>
&lt;li>Added e2e test for OIDC&lt;/li>
&lt;li>Added e2e test for BackendTrafficPolicy Retry&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Prefix match to prevent mismatching routes with the same prefix&lt;/li>
&lt;li>Fixed Multiple reconciling by implementing comparable interface for ir.Infra&lt;/li>
&lt;li>Fixed EndpointSlice with empty conditions {}&lt;/li>
&lt;li>Fixed Error handling when parsing the http request timeout&lt;/li>
&lt;li>Fixed No status when EnvoyPatchPolicy is disabled&lt;/li>
&lt;li>Fixed Printable for xds and infra IRs&lt;/li>
&lt;li>Fixed Skip backendRefs with weight set to 0&lt;/li>
&lt;li>Fixed AND Header matches in ratelimiting not working&lt;/li>
&lt;li>Fixed Deletion logics when no gatewayclasses exist&lt;/li>
&lt;li>Fixed Match mergedGateways irKey for ClientTrafficPolicy&lt;/li>
&lt;li>Fixed Policies should apply only to gateways they were attached to when mergeGateways is true&lt;/li>
&lt;li>Fixed Listener status is not surfaced for gateways when MergeGateways enabled&lt;/li>
&lt;li>Fixed GRPCroute websocket not working by moving web socket upgrade config from hcm to route&lt;/li>
&lt;li>Fixed Configure idle timeout when timeout is set on HTTPRoute&lt;/li>
&lt;li>Fixed Relaxing HTTPS restriction for OIDC token endpoint&lt;/li>
&lt;li>Fixed Panic when translating routes with empty backends&lt;/li>
&lt;li>Fixed Xds translation should be done in a best-effort manner&lt;/li>
&lt;li>Added Support for validating regex before sending to Envoy&lt;/li>
&lt;li>Added Support for setting spec.addresses.value into ClusterIP when Service Type is ClusterIP&lt;/li>
&lt;li>Added Unsupported status condition for filters within BackendRef&lt;/li>
&lt;li>Added List instead of map for Provider Resources for order stability&lt;/li>
&lt;li>Added Suffix for oauth cookies to prevent multiple oauth filters from overwriting each other&amp;rsquo;s cookies&lt;/li>
&lt;li>Added Support for overriding condition to BackendTrafficPolicy and SecurityPolicy&lt;/li>
&lt;li>Added Support for default retry budget and retry host predicate&lt;/li>
&lt;li>Added Support for implementing gateway.spec.infrastructure&lt;/li>
&lt;li>Added Validation for CA Cert in ClientTrafficPolicy&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for multiple GatewayClass per controller&lt;/li>
&lt;li>Added SecurityPolicyIndexers in Kubernetes Provider&lt;/li>
&lt;li>Added Support for generating HMAC secret in CertGen Job&lt;/li>
&lt;li>Fixed Finalizer logic when deleting Gatewayclasses&lt;/li>
&lt;li>Fixed MergeGateways panics when restarting control plane&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for EDS cache&lt;/li>
&lt;li>Added Support for ADS cache to ensure the rule order&lt;/li>
&lt;li>Fixed Deprecated field error when using RequestHeaderModifier filter&lt;/li>
&lt;li>Fixed Envoy rejects XDS at runtime losing all routes on restart&lt;/li>
&lt;li>Fixed Requests not matching defined routes trigger per-route filters&lt;/li>
&lt;li>Bumped go-control-plane to v0.12.0&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for egctl x status&lt;/li>
&lt;li>Added Support for egctl experimental dashboard envoy-proxy&lt;/li>
&lt;li>Added Support for egctl config ratelimit&lt;/li>
&lt;/ul></description></item><item><title>v0.6.0-rc.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.6.0-rc.1/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.6.0-rc.1/</guid><description>&lt;p>Date: Oct 27, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Introduced a new website based on Hugo&lt;/li>
&lt;li>Added Grafana dashboards and integration docs for EnvoyProxy metrics&lt;/li>
&lt;li>Added Grafana integration docs for Gateway API metrics&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for configuring Envoy Gateway Label and Annotations using Helm&lt;/li>
&lt;li>Increased default Resource defaults for Envoy Gateway to 100m CPU and 256Mi Memory&lt;/li>
&lt;li>Fixes Helm values for EnvoyGateway startup configuration&lt;/li>
&lt;li>Added opt-in field to skip creating control plane TLS Certificates allowing users to bring their own certificates.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to Gateway API v1.0.0&lt;/li>
&lt;li>Added the ClientTrafficPolicy CRD with Keep Alive Support&lt;/li>
&lt;li>Added the BackendTrafficPolicy CRD with RateLimit and LoadBalancer Support&lt;/li>
&lt;li>Added the SecurityPolicy CRD with CORS and JWT Support&lt;/li>
&lt;li>Added EnvoyGateway Metrics with Prometheus and OpenTelemetry support&lt;/li>
&lt;li>Added Support for InitContainers in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for LoadBalancerIP in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for AllocateLoadBalancerNodePorts in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for LoadBalancerClass in EnvoyProxy CRD&lt;/li>
&lt;li>Added Support for selecting EnvoyProxy stats to be generated&lt;/li>
&lt;li>Added Support for enabling EnvoyProxy Virtual Host metrics&lt;/li>
&lt;li>Added Support for Merging Gateway resources onto the same infrastructure&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Removed the AuthenticationFilter CRD&lt;/li>
&lt;li>Removed the RateLimitFilter CRD&lt;/li>
&lt;li>Enabled EnvoyProxy Prometheus Endpoint by default with an option to disable it&lt;/li>
&lt;li>Updated the Bootstrap field within the EnvoyProxy CRD with an additional value&lt;/li>
&lt;li>field to specify bootstrap config&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="watchable">Watchable&lt;a class="td-heading-self-link" href="#watchable" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Improved caching of resource by implementing a compare function agnostic of resource order&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="breaking-changes-1">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added support for routing to EndpointSlice endpoints&lt;/li>
&lt;li>Added support for HTTPRoute Timeouts&lt;/li>
&lt;li>Added support for multiple RequestMirror filters per HTTPRoute rule&lt;/li>
&lt;li>Use / instead of - in IR Route Names&lt;/li>
&lt;li>Added Support to ignore ports in Host header&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the generationChangedPredicate to most resources to limit resource reconiliation&lt;/li>
&lt;li>Improved reconiliation by using the same enqueue request for all resources&lt;/li>
&lt;li>Added support for reconciling ServiceImport CRD&lt;/li>
&lt;li>Added support for selectively watching resources based on Namespace Selector&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Layered Runtime warnings&lt;/li>
&lt;li>Upgraded to the latest version of go-control-plane that fixed xDS Resource ordering issues for ADS.&lt;/li>
&lt;li>Added HTTP2 Keep Alives to the xds connection&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for egctl stats command&lt;/li>
&lt;/ul></description></item><item><title>Control Plane Observability: Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/eg-metrics/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/eg-metrics/</guid><description>&lt;p>This document aims to cover all aspects of envoy gateway control plane metrics observability.&lt;/p>


&lt;div class="alert alert-secondary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>

 &lt;strong>Data plane&lt;/strong> observability (while important) is outside of scope for this document. For data plane observability, refer to &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/proxy-metrics/">here&lt;/a>.

&lt;/div>

&lt;h2 id="current-state">Current State&lt;a class="td-heading-self-link" href="#current-state" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>At present, the Envoy Gateway control plane provides logs and controller-runtime metrics, without traces. Logs are managed through our proprietary library (&lt;code>internal/logging&lt;/code>, a shim to &lt;code>zap&lt;/code>) and are written to &lt;code>/dev/stdout&lt;/code>.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Our objectives include:&lt;/p></description></item><item><title>Control Plane Observability: Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/eg-metrics/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/eg-metrics/</guid><description>&lt;p>This document aims to cover all aspects of envoy gateway control plane metrics observability.&lt;/p>


&lt;div class="alert alert-secondary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>

 &lt;strong>Data plane&lt;/strong> observability (while important) is outside of scope for this document. For dataplane observability, refer to &lt;a href="../metrics">here&lt;/a>.

&lt;/div>

&lt;h2 id="current-state">Current State&lt;a class="td-heading-self-link" href="#current-state" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>At present, the Envoy Gateway control plane provides logs and controller-runtime metrics, without traces. Logs are managed through our proprietary library (&lt;code>internal/logging&lt;/code>, a shim to &lt;code>zap&lt;/code>) and are written to &lt;code>/dev/stdout&lt;/code>.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Our objectives include:&lt;/p></description></item><item><title>Welcome to new website!</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/blogs/new-website/new-website/</link><pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/blogs/new-website/new-website/</guid><description>&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Summary&lt;/h4>

 Migrate from &lt;em>&lt;strong>Sphinx&lt;/strong>&lt;/em> to &lt;em>&lt;strong>Hugo&lt;/strong>&lt;/em> for Envoy Gateway Documents.

&lt;/div>

&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>In the realm of static site generators, two names often come up: Sphinx and Hugo. While both are powerful tools, we recently made the decision to migrate our documentation from Sphinx to Hugo. This article aims to shed light on the reasons behind this move and the advantages we&amp;rsquo;ve discovered in using Hugo for static blogging.&lt;/p></description></item><item><title>KubeCon China 2023</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/presentations/kubecon-cn-2023/kubecon-cn-2023/</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/presentations/kubecon-cn-2023/kubecon-cn-2023/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Topic: Envoy Gateway: The API Gateway in the Cloud Native Era&lt;/h4>

 &lt;em>&lt;strong>&amp;mdash; KubeCon China 2023&lt;/strong>&lt;/em>

&lt;/div>



&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Speaker&lt;/h4>

 &lt;ul>
&lt;li>&lt;strong>Xunzhuo Liu&lt;/strong>: Tencent, Envoy Gateway Maintainer&lt;/li>
&lt;li>&lt;strong>Huabing Zhao&lt;/strong>: Tetrate.io, Envoy Gateway Reviewer&lt;/li>
&lt;/ul>


&lt;/div>



&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Slides&lt;/h4>

 Download from &lt;a href="https://static.sched.com/hosted_files/kccncosschn2023/60/KubeCon-Envoy%20Gateway_%20The%20API%20Gateway-in-the-Cloud-Native-Era.pptx?_gl=1*1aq9xw*_ga*MTM2MDcyNzI2My4xNjkwODU3ODMy*_ga_XH5XM35VHB*MTY5NjgzNjA1NC4xNS4xLjE2OTY4MzYwNjIuNTIuMC4w">Link&lt;/a>.

&lt;/div>

&lt;h2 id="watch-videos">Watch Videos&lt;a class="td-heading-self-link" href="#watch-videos" aria-label="Heading self-link">&lt;/a>&lt;/h2>


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/XBsDe9stMcg?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div></description></item><item><title>Announcing Envoy Gateway v0.5</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.5/</link><pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.5/</guid><description>&lt;p>We are pleased to announce the release of Envoy Gateway v0.5!&lt;/p>
&lt;p>This is the fourth functional release of Envoy Gateway. We would like to thank the entire Envoy Gateway community for
helping publish the release.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.5.0/">Release Notes&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/">Docs&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://github.com/envoyproxy/gateway/releases/tag/v0.5.0">Download&lt;/a>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="whats-new">What&amp;rsquo;s New&lt;a class="td-heading-self-link" href="#whats-new" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The release adds a ton of features and functionality. Here are some highlights:&lt;/p>
&lt;h3 id="upgrade-gateway-api-dependency">Upgrade Gateway API Dependency&lt;a class="td-heading-self-link" href="#upgrade-gateway-api-dependency" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Upgraded to Gateway API v0.7.1&lt;/li>
&lt;/ul>
&lt;h3 id="add-data-plane-proxy-telemetry">Add Data Plane Proxy Telemetry&lt;a class="td-heading-self-link" href="#add-data-plane-proxy-telemetry" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for Access Logging, Tracing and Metrics Telemetry&lt;/li>
&lt;/ul>
&lt;h3 id="add-support-for-directly-configuring-xds">Add Support for directly configuring xDS&lt;a class="td-heading-self-link" href="#add-support-for-directly-configuring-xds" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for the EnvoyPatchPolicy API&lt;/li>
&lt;/ul>
&lt;h3 id="ratelimiting">Ratelimiting&lt;a class="td-heading-self-link" href="#ratelimiting" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for Distinct Ratelimiting Based On IP Addresses&lt;/li>
&lt;li>Added Support for JWT Claim based Ratelimiting&lt;/li>
&lt;li>Switched to Xds SOTW Server for RateLimit Service Configuration&lt;/li>
&lt;/ul>
&lt;h3 id="api-updates">API Updates&lt;a class="td-heading-self-link" href="#api-updates" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for configuring EnvoyProxy Pod Labels&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy Deployment Strategy Settings, Volumes and Volume Mounts&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy as a NodePort Type Service&lt;/li>
&lt;li>Added Admin Server for Envoy Gateway&lt;/li>
&lt;li>Added Pprof Debug Support for Envoy Gateway&lt;/li>
&lt;li>Added Support to Watch for Resources in Select Namespaces&lt;/li>
&lt;/ul>
&lt;h2 id="envoy-proxy">Envoy Proxy&lt;a class="td-heading-self-link" href="#envoy-proxy" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Best Practices Default Edge Settings to Xds Resources&lt;/li>
&lt;/ul></description></item><item><title>v0.5.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.5.0/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.5.0/</guid><description>&lt;p>Date: July 26, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Docs for Installation page using Helm&lt;/li>
&lt;li>Added Docs for Cert Manager Integration&lt;/li>
&lt;li>Added Docs for Presentation Links&lt;/li>
&lt;li>Added Docs for configuring multiple TLS Certificates per Listener&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for configuring Envoy Gateway Label and Annotations using Helm&lt;/li>
&lt;li>Increased default Resource defaults for Envoy Gateway to 100m CPU and 256Mi Memory&lt;/li>
&lt;li>Fixes Helm values for EnvoyGateway startup configuration&lt;/li>
&lt;li>Added opt-in field to skip creating control plane TLS Certificates allowing users to bring their own certificates.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to Gateway API v0.7.1&lt;/li>
&lt;li>Added Support for EnvoyPatchPolicy&lt;/li>
&lt;li>Added Support for EnvoyProxy Telemetry - Access Logging, Traces and Metrics&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy Pod Labels&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy Deployment Strategy Settings, Volumes and Volume Mounts&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy as a NodePort Type Service&lt;/li>
&lt;li>Added Support for Distinct RateLimiting for IP Addresses&lt;/li>
&lt;li>Added Support for converting JWT Claims to Headers, to be used for RateLimiting&lt;/li>
&lt;li>Added Admin Server for Envoy Gateway&lt;/li>
&lt;li>Added Pprof Debug Support for Envoy Gateway&lt;/li>
&lt;li>Added Support to Watch for Resources in Select Namespaces&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Renamed field in EnvoyGateway API from Extension to ExtensionManager&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Retest Github Action&lt;/li>
&lt;li>Added CherryPick Github Action&lt;/li>
&lt;li>Added E2E Step in Github CI Workflow&lt;/li>
&lt;li>Added RateLimit E2E Tests&lt;/li>
&lt;li>Added JWT Claim based RateLimit E2E Tests&lt;/li>
&lt;li>Added Access Logging E2E tests&lt;/li>
&lt;li>Added Metrics E2E tests&lt;/li>
&lt;li>Added Tracing E2E tests&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Enabled GatewayWithAttachedRoutes Test&lt;/li>
&lt;li>Enabled HttpRouteRequestMirror Test&lt;/li>
&lt;li>Skipped HTTPRouteRedirectPortAndScheme Test&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="breaking-changes-1">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Renamed IR resources from &lt;namespace>-&lt;name> to &lt;namespace>/&lt;name>&lt;/li>
&lt;li>which also affects generated Xds Resources&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Reconcile Node resources to be able to compute Status Addresses for Gateway&lt;/li>
&lt;li>Discard Status before publishing Provider resources to reduce memory consumption&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fix Init Race in Xds Runner when starting Xds Server and receiving Xds Input&lt;/li>
&lt;li>Switched to Xds SOTW Server for RateLimit Service Configuration&lt;/li>
&lt;li>Added Control Plane TLS between EnvoyProxy and RateLimit Service&lt;/li>
&lt;li>Enabled adding RateLimit Headers when RateLimit is set&lt;/li>
&lt;li>Allowed GRPCRoute and HTTPRoute to be linked to the same HTTPS Listener&lt;/li>
&lt;li>Set ALPN in the Xds Listener with TLS enabled.&lt;/li>
&lt;li>Added Best Practices Default Edge Settings to Xds Resources&lt;/li>
&lt;li>Compute and Publish EnvoyPatchPolicy status from xds-translator runner&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added egctl x translate Support to generate default missing Resources&lt;/li>
&lt;li>Added egctl x translate Support for AuthenticationFilter and EnvoyPatchPolicy&lt;/li>
&lt;/ul></description></item><item><title>v0.5.0-rc.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.5.0-rc.1/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.5.0-rc.1/</guid><description>&lt;p>Date: July 26, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Docs for Installation page using Helm&lt;/li>
&lt;li>Added Docs for Cert Manager Integration&lt;/li>
&lt;li>Added Docs for Presentation Links&lt;/li>
&lt;li>Added Docs for configuring multiple TLS Certificates per Listener&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for configuring Envoy Gateway Label and Annotations using Helm&lt;/li>
&lt;li>Increased default Resource defaults for Envoy Gateway to 100m CPU and 256Mi Memory&lt;/li>
&lt;li>Fixes Helm values for EnvoyGateway startup configuration&lt;/li>
&lt;li>Added opt-in field to skip creating control plane TLS Certificates allowing users to bring their own certificates.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to Gateway API v0.7.1&lt;/li>
&lt;li>Added Support for EnvoyPatchPolicy&lt;/li>
&lt;li>Added Support for EnvoyProxy Telemetry - Access Logging, Traces and Metrics&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy Pod Labels&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy Deployment Strategy Settings, Volumes and Volume Mounts&lt;/li>
&lt;li>Added Support for configuring EnvoyProxy as a NodePort Type Service&lt;/li>
&lt;li>Added Support for Distinct RateLimiting for IP Addresses&lt;/li>
&lt;li>Added Support for converting JWT Claims to Headers, to be used for RateLimiting&lt;/li>
&lt;li>Added Admin Server for Envoy Gateway&lt;/li>
&lt;li>Added Pprof Debug Support for Envoy Gateway&lt;/li>
&lt;li>Added Support to Watch for Resources in Select Namespaces&lt;/li>
&lt;/ul>
&lt;h3 id="breaking-changes">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Renamed field in EnvoyGateway API from Extension to ExtensionManager&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Retest Github Action&lt;/li>
&lt;li>Added CherryPick Github Action&lt;/li>
&lt;li>Added E2E Step in Github CI Workflow&lt;/li>
&lt;li>Added RateLimit E2E Tests&lt;/li>
&lt;li>Added JWT Claim based RateLimit E2E Tests&lt;/li>
&lt;li>Added Access Logging E2E tests&lt;/li>
&lt;li>Added Metrics E2E tests&lt;/li>
&lt;li>Added Tracing E2E tests&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Enabled GatewayWithAttachedRoutes Test&lt;/li>
&lt;li>Enabled HttpRouteRequestMirror Test&lt;/li>
&lt;li>Skipped HTTPRouteRedirectPortAndScheme Test&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="breaking-changes-1">Breaking Changes&lt;a class="td-heading-self-link" href="#breaking-changes-1" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Renamed IR resources from &lt;namespace>-&lt;name> to &lt;namespace>/&lt;name>&lt;/li>
&lt;li>which also affects generated Xds Resources&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Reconcile Node resources to be able to compute Status Addresses for Gateway&lt;/li>
&lt;li>Discard Status before publishing Provider resources to reduce memory consumption&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fix Init Race in Xds Runner when starting Xds Server and receiving Xds Input&lt;/li>
&lt;li>Switched to Xds SOTW Server for RateLimit Service Configuration&lt;/li>
&lt;li>Added Control Plane TLS between EnvoyProxy and RateLimit Service&lt;/li>
&lt;li>Enabled adding RateLimit Headers when RateLimit is set&lt;/li>
&lt;li>Allowed GRPCRoute and HTTPRoute to be linked to the same HTTPS Listener&lt;/li>
&lt;li>Set ALPN in the Xds Listener with TLS enabled.&lt;/li>
&lt;li>Added Best Practices Default Edge Settings to Xds Resources&lt;/li>
&lt;li>Compute and Publish EnvoyPatchPolicy status from xds-translator runner&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added egctl x translate Support to generate default missing Resources&lt;/li>
&lt;li>Added egctl x translate Support for AuthenticationFilter and EnvoyPatchPolicy&lt;/li>
&lt;/ul></description></item><item><title>KubeCon Europe 2023</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/presentations/kubecon-eu-2023/kubecon-eu-2023/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/presentations/kubecon-eu-2023/kubecon-eu-2023/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Topic: Envoy Gateway Update&lt;/h4>

 &lt;em>&lt;strong>&amp;mdash; KubeCon Europe 2023&lt;/strong>&lt;/em>

&lt;/div>



&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Speaker&lt;/h4>

 &lt;ul>
&lt;li>&lt;strong>Alice Wasko&lt;/strong>: Ambassador Labs, Envoy Gateway Maintainer&lt;/li>
&lt;/ul>


&lt;/div>



&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Slides&lt;/h4>

 Download from &lt;a href="https://static.sched.com/hosted_files/kccnceu2023/58/Kubecon_EU_2023_Envoy_Gateway_Update.pptx">Link&lt;/a>.

&lt;/div>

&lt;h2 id="watch-videos">Watch Videos&lt;a class="td-heading-self-link" href="#watch-videos" aria-label="Heading self-link">&lt;/a>&lt;/h2>


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4vnJxt9sVho?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div></description></item><item><title>Announcing Envoy Gateway v0.4</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.4/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.4/</guid><description>&lt;p>We are pleased to announce the release of Envoy Gateway v0.4!&lt;/p>
&lt;p>This is the third functional release of Envoy Gateway. We would like to thank the entire Envoy Gateway community for
helping publish the release.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.4.0/">Release Notes&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/">Docs&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://github.com/envoyproxy/gateway/releases/tag/v0.4.0">Download&lt;/a>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="whats-new">What&amp;rsquo;s New&lt;a class="td-heading-self-link" href="#whats-new" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The release adds a ton of features and functionality. Here are some highlights:&lt;/p>
&lt;h3 id="upgrade-gateway-api-dependency">Upgrade Gateway API Dependency&lt;a class="td-heading-self-link" href="#upgrade-gateway-api-dependency" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Upgraded to Gateway API v0.6.2&lt;/li>
&lt;/ul>
&lt;h3 id="add-helm-support">Add Helm Support&lt;a class="td-heading-self-link" href="#add-helm-support" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Installation of Envoy Gateway can now be done through helm&lt;/li>
&lt;/ul>
&lt;h3 id="add-egctl-cli-tool">Add egctl CLI Tool&lt;a class="td-heading-self-link" href="#add-egctl-cli-tool" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added egctl Support for Dry Runs of Gateway API Config&lt;/li>
&lt;li>Added egctl Support for Dumping Envoy Proxy xDS Resources&lt;/li>
&lt;/ul>
&lt;h3 id="add-support-for-extending-envoy-gateway">Add Support for extending Envoy Gateway&lt;a class="td-heading-self-link" href="#add-support-for-extending-envoy-gateway" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Initial Framework for Building an Extension on top of Envoy Gateway&lt;/li>
&lt;/ul>
&lt;h3 id="ratelimiting">Ratelimiting&lt;a class="td-heading-self-link" href="#ratelimiting" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for Ratelimiting Based On IP Subnet&lt;/li>
&lt;/ul>
&lt;h3 id="api-updates">API Updates&lt;a class="td-heading-self-link" href="#api-updates" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for Custom Envoy Proxy Bootstrap Config&lt;/li>
&lt;li>Added Support for Configuring the Envoy Proxy Image and Service&lt;/li>
&lt;li>Added Support for Configuring Annotations, Resources, and Securitycontext Settings on Ratelimit Infra and Envoy Proxy&lt;/li>
&lt;li>Added Support for Using Multiple Certificates on a Single Fully Qualified Domain Name&lt;/li>
&lt;li>Envoy Proxy Pod and Container SecurityContext is now Configurable&lt;/li>
&lt;li>Added Support for Service Method Match in GRPCRoute&lt;/li>
&lt;li>Added EDS Support&lt;/li>
&lt;/ul></description></item><item><title>v0.4.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.4.0/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.4.0/</guid><description>&lt;p>Date: April 24, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Docs for Installing and Using egctl&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Helm Installation Support&lt;/li>
&lt;li>Added Support for Ratelimiting Based On IP Subnet&lt;/li>
&lt;li>Added Gateway API Support Doc&lt;/li>
&lt;li>Added Namespace Resource to Helm Templates&lt;/li>
&lt;li>Updated Installation Yaml to Use the envoy-gateway-system Namespace&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to Gateway API v0.6.2&lt;/li>
&lt;li>Added Support for Custom Envoy Proxy Bootstrap Config&lt;/li>
&lt;li>Added Support for Configuring the Envoy Proxy Image and Service&lt;/li>
&lt;li>Added Support for Configuring Annotations, Resources, and Securitycontext Settings on Ratelimit Infra and Envoy Proxy&lt;/li>
&lt;li>Added Support for Using Multiple Certificates on a Single Fully Qualified Domain Name&lt;/li>
&lt;li>Gateway Status Address is now Populated for ClusterIP type Envoy Services&lt;/li>
&lt;li>Envoy Proxy Pod and Container SecurityContext is now Configurable&lt;/li>
&lt;li>Added Custom Envoy Gateway Extensions Framework&lt;/li>
&lt;li>Added Support for Service Method Match in GRPCRoute&lt;/li>
&lt;li>Fixed a Bug in the Extension Hooks for xDS Virtual Hosts and Routes&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed CI Flakes During Helm Install&lt;/li>
&lt;li>Added Test To Ensure Static xDS Cluster Has Same Field Values as Dynamic Cluster&lt;/li>
&lt;li>Added egctl to Build and Test CI Workflow&lt;/li>
&lt;li>Code Coverage Thresholds are now Enforced by CI&lt;/li>
&lt;li>Fixed latest-release-check CI Job Failures&lt;/li>
&lt;li>Added Auto Release Tooling for Charts&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Enabled GatewayWithAttachedRoutes Test&lt;/li>
&lt;li>Enabled Enable HTTPRouteInvalidParentRefNotMatchingSectionName Test&lt;/li>
&lt;li>Enabled Enable HTTPRouteDisallowedKind Test&lt;/li>
&lt;li>Re-Enabled Gateway/HTTPRouteObservedGenerationBump Test&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Dynamic GatewayControllerName in Route Status&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Update GatewayClass Status Based on EnvoyProxy Config Validation&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added EDS Support&lt;/li>
&lt;li>Fixed PathSeparatedPrefix and Optimized Logic for Prefixes Ending With Trailing Slash&lt;/li>
&lt;li>Updated Deprecated RegexMatcher&lt;/li>
&lt;li>Refactored Authn and Ratelimit Features to Reuse buildXdsCluster&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added egctl CLI Tool&lt;/li>
&lt;li>Added egctl Support for Dry Runs of Gateway API Config&lt;/li>
&lt;li>Added egctl Support for Dumping Envoy Proxy xDS Resources&lt;/li>
&lt;/ul></description></item><item><title>v0.4.0-rc.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.4.0-rc.1/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.4.0-rc.1/</guid><description>&lt;p>Date: April 13, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Docs for Installing and Using egctl&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Helm Installation Support&lt;/li>
&lt;li>Added Support for Ratelimiting Based On IP Subnet&lt;/li>
&lt;li>Added Gateway API Support Doc&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to Gateway API v0.6.2&lt;/li>
&lt;li>Added Support for Custom Envoy Proxy Bootstrap Config&lt;/li>
&lt;li>Added Support for Configuring the Envoy Proxy Image and Service&lt;/li>
&lt;li>Added Support for Configuring Annotations, Resources, and Securitycontext Settings on Ratelimit Infra and Envoy Proxy&lt;/li>
&lt;li>Added Support for Using Multiple Certificates on a Single Fully Qualified Domain Name&lt;/li>
&lt;li>Gateway Status Address is now Populated for ClusterIP type Envoy Services&lt;/li>
&lt;li>Envoy Proxy Pod and Container SecurityContext is now Configurable&lt;/li>
&lt;li>Added Custom Envoy Gateway Extensions Framework&lt;/li>
&lt;li>Added Support for Service Method Match in GRPCRoute&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed CI Flakes During Helm Install&lt;/li>
&lt;li>Added Test To Ensure Static xDS Cluster Has Same Field Values as Dynamic Cluster&lt;/li>
&lt;li>Added egctl to Build and Test CI Workflow&lt;/li>
&lt;li>Code Coverage Thresholds are now Enforced by CI&lt;/li>
&lt;li>Fixed latest-release-check CI Job Failures&lt;/li>
&lt;li>Added Auto Release Tooling for Charts&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Enabled GatewayWithAttachedRoutes Test&lt;/li>
&lt;li>Enabled Enable HTTPRouteInvalidParentRefNotMatchingSectionName Test&lt;/li>
&lt;li>Enabled Enable HTTPRouteDisallowedKind Test&lt;/li>
&lt;li>Re-Enabled Gateway/HTTPRouteObservedGenerationBump Test&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Dynamic GatewayControllerName in Route Status&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Update GatewayClass Status Based on EnvoyProxy Config Validation&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added EDS Support&lt;/li>
&lt;li>Fixed PathSeparatedPrefix and Optimized Logic for Prefixes Ending With Trailing Slash&lt;/li>
&lt;li>Updated Deprecated RegexMatcher&lt;/li>
&lt;li>Refactored Authn and Ratelimit Features to Reuse buildXdsCluster&lt;/li>
&lt;/ul>
&lt;h2 id="cli">Cli&lt;a class="td-heading-self-link" href="#cli" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added egctl CLI Tool&lt;/li>
&lt;li>Added egctl Support for Dry Runs of Gateway API Config&lt;/li>
&lt;li>Added egctl Support for Dumping Envoy Proxy xDS Resources&lt;/li>
&lt;/ul></description></item><item><title>Announcing Envoy Gateway v0.3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.3/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.3/</guid><description>&lt;p>We are pleased to announce the release of Envoy Gateway v0.3!&lt;/p>
&lt;p>This is the second functional release of Envoy Gateway. We would like to thank the entire Envoy Gateway community for
helping publish the release.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.3.0/">Release Notes&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/">Docs&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://github.com/envoyproxy/gateway/releases/tag/v0.3.0">Download&lt;/a>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="whats-new">What&amp;rsquo;s New&lt;a class="td-heading-self-link" href="#whats-new" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The release adds a ton of features and functionality. Here are some highlights:&lt;/p>
&lt;h3 id="add-support-for-extended-gateway-api-fields">Add Support for extended Gateway API fields&lt;a class="td-heading-self-link" href="#add-support-for-extended-gateway-api-fields" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for HTTPRoute URLRewrite Filter&lt;/li>
&lt;li>Added Support for HTTPRoute RequestMirror Filter&lt;/li>
&lt;li>Added Support for HTTPRoute ResponseHeaderModifier Filter&lt;/li>
&lt;/ul>
&lt;h3 id="add-support-for-experimental-gateway-apis">Add Support for experimental Gateway APIs&lt;a class="td-heading-self-link" href="#add-support-for-experimental-gateway-apis" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for the TCPRoute API&lt;/li>
&lt;li>Added Support for the UDPRoute API&lt;/li>
&lt;li>Added Support for the GRPCRoute API&lt;/li>
&lt;/ul>
&lt;h3 id="add-support-for-rate-limiting">Add Support for Rate Limiting&lt;a class="td-heading-self-link" href="#add-support-for-rate-limiting" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for Global Rate Limiting&lt;/li>
&lt;/ul>
&lt;h3 id="add-support-for-authentication">Add Support for Authentication&lt;a class="td-heading-self-link" href="#add-support-for-authentication" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Added Support for Request Authentication&lt;/li>
&lt;/ul></description></item><item><title>v0.3.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.3.0/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.3.0/</guid><description>&lt;p>Date: February 09, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Global Rate Limit User Docs&lt;/li>
&lt;li>Added Request Authentication User Docs&lt;/li>
&lt;li>Added TCP Routing User Docs&lt;/li>
&lt;li>Added UDP Routing User Docs&lt;/li>
&lt;li>Added GRPC Routing User Docs&lt;/li>
&lt;li>Added HTTP Response Headers User Docs&lt;/li>
&lt;li>Added TCP and UDP Proxy Design Docs&lt;/li>
&lt;li>Added egctl Design Docs&lt;/li>
&lt;li>Added Rate Limit Design Docs&lt;/li>
&lt;li>Added Request Authentication Design Docs&lt;/li>
&lt;li>Added Support for Versioned Docs&lt;/li>
&lt;li>Added Support for Multiple Release Versions&lt;/li>
&lt;li>Added Release Details Docs&lt;/li>
&lt;li>Added API Docs Generating Tooling&lt;/li>
&lt;li>Refactored Layout for User Docs&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to v0.6.1 Gateway API&lt;/li>
&lt;li>Added Support for the TCPRoute API&lt;/li>
&lt;li>Added Support for the UDPRoute API&lt;/li>
&lt;li>Added Support for the GRPCRoute API&lt;/li>
&lt;li>Added Support for HTTPRoute URLRewrite Filter&lt;/li>
&lt;li>Added Support for HTTPRoute RequestMirror Filter&lt;/li>
&lt;li>Added Support for HTTPRoute ResponseHeaderModifier Filter&lt;/li>
&lt;li>Added Support for Request Authentication&lt;/li>
&lt;li>Added Support for Global Rate Limiting&lt;/li>
&lt;li>Added Support for Routes ReferenceGrant&lt;/li>
&lt;li>Added Support for Namespace Server Config Type&lt;/li>
&lt;li>Added initial management of Envoy Proxy deployment via EnvoyProxy API&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Make Image Failed in Darwin&lt;/li>
&lt;li>Fixed Wait for Job Succeeded before conformance test&lt;/li>
&lt;li>Upgraded Echoserver Image Tag&lt;/li>
&lt;li>Added Support for User-Facing Version&lt;/li>
&lt;li>Added Support for Testing EG against Multiple Kubernetes Versions&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Enabled GatewayClassObservedGenerationBump conformance test&lt;/li>
&lt;li>Enabled GatewayInvalidTLSConfiguration conformance test&lt;/li>
&lt;li>Enabled GatewayInvalidRouteKind conformance test&lt;/li>
&lt;li>Enabled HTTPRouteReferenceGrant conformance test&lt;/li>
&lt;li>Enabled HTTPRouteMethodMatching conformance test&lt;/li>
&lt;li>Enabled HTTPRoutePartiallyInvalidViaInvalidReferenceGrant conformance test&lt;/li>
&lt;li>Enabled HTTPRouteInvalidParentRefNotMatchingListenerPort conformance test&lt;/li>
&lt;li>(Currently EG passes all conformance tests except redirect and gateway/httproute ObservedGenerationBump tests. Redirect tests are failing due to a possible issue with the way upstream conformance tests have made assumptions. Skip them for now until below issues #992 #993 #994 are resolved)&lt;/li>
&lt;/ul>
&lt;h2 id="ir">IR&lt;a class="td-heading-self-link" href="#ir" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added TCP Listener per TLSRoute&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixes Remove Stale Listener Condition&lt;/li>
&lt;li>Added Support for Suffix Matches for Headers&lt;/li>
&lt;li>Added Support for HTTP Method Matching to HTTPRoute&lt;/li>
&lt;li>Added Support for Regex Match Type&lt;/li>
&lt;li>Added Support for HTTPQueryParamMatch&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Refactored Kubernetes Provider to Single Reconciler&lt;/li>
&lt;li>Upgraded Kube Provider Test Data Manifests to v0.6.1&lt;/li>
&lt;li>Removed Duplicate Settings from Bootstrap Config&lt;/li>
&lt;li>Updated Certgen to Use EG Namespace Env&lt;/li>
&lt;li>Added EnvoyProxy to Translator and Kube Infra Manager&lt;/li>
&lt;li>Upgraded Envoyproxy Image to envoy-dev latest in Main&lt;/li>
&lt;li>Removed EG Logs Private Key&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Start xDS Server Watchable Map Panics&lt;/li>
&lt;li>Enabled Access Logging for xDS Components&lt;/li>
&lt;/ul></description></item><item><title>v0.3.0-rc.1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.3.0-rc.1/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.3.0-rc.1/</guid><description>&lt;p>Date: February 02, 2023&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Support for Multiple Release Versions&lt;/li>
&lt;li>Added Support for Versioned Docs&lt;/li>
&lt;li>Added Release Details Docs&lt;/li>
&lt;li>Refactored Layout for User Docs&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Upgraded to v0.6.0 Gateway API&lt;/li>
&lt;li>Added Support for the TCPRoute API&lt;/li>
&lt;li>Added Support for the UDPRoute API&lt;/li>
&lt;li>Added Support for the GRPCRoute API (Add to the ListenerStatus.SupportedKinds Field until &lt;a href="https://github.com/envoyproxy/gateway/issues/950">https://github.com/envoyproxy/gateway/issues/950&lt;/a> is fixed.)&lt;/li>
&lt;li>Added Support for HTTPRoute URLRewrite Filter&lt;/li>
&lt;li>Added Support for HTTPRoute RequestMirror Filter&lt;/li>
&lt;li>Added Support for HTTPRoute ResponseHeaderModifier Filter&lt;/li>
&lt;li>Added APIs to Manage Envoy Deployment&lt;/li>
&lt;li>Added Support for Request Authentication&lt;/li>
&lt;li>Added Support for Global Rate Limiting&lt;/li>
&lt;li>Added Support for Routes ReferenceGrant&lt;/li>
&lt;li>Added Support for Namespace Server Config Type&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixes Make Image Failed in Darwin&lt;/li>
&lt;li>Fixes Wait for Job Succeeded before conformance test&lt;/li>
&lt;li>Upgraded Echoserver Image Tag&lt;/li>
&lt;li>Added Support for User-Facing Version&lt;/li>
&lt;li>Added Support for Testing EG against Multiple Kubernetes Versions&lt;/li>
&lt;/ul>
&lt;h2 id="conformance">Conformance&lt;a class="td-heading-self-link" href="#conformance" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Enabled HTTPRouteInvalidParentRefNotMatchingListenerPort conformance test&lt;/li>
&lt;li>Enabled GatewayInvalidTLSConfiguration conformance test&lt;/li>
&lt;li>Enabled GatewayInvalidRouteKind conformance test&lt;/li>
&lt;li>Enabled HTTPRoutePartiallyInvalidViaInvalidReferenceGrant conformance test&lt;/li>
&lt;li>Enabled HTTPRouteReferenceGrant conformance test&lt;/li>
&lt;li>Enabled HTTPRouteMethodMatching conformance test&lt;/li>
&lt;/ul>
&lt;h2 id="ir">IR&lt;a class="td-heading-self-link" href="#ir" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added TCP Listener per TLSRoute&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixes Remove Stale Listener Condition&lt;/li>
&lt;li>Added Support for Suffix Matches for Headers&lt;/li>
&lt;li>Added Support for HTTP Method Matching to HTTPRoute&lt;/li>
&lt;li>Added Support for Regex Match Type&lt;/li>
&lt;li>Added Support for HTTPQueryParamMatch&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Refactored Kubernetes Provider to Single Reconciler&lt;/li>
&lt;li>Upgraded Kube Provider Test Data Manifests to v0.6.0&lt;/li>
&lt;li>Removed Duplicate Settings from Bootstrap Config&lt;/li>
&lt;li>Updated Certgen to Use EG Namespace Env&lt;/li>
&lt;li>Added EnvoyProxy to Translator and Kube Infra Manager&lt;/li>
&lt;li>Upgraded Envoyproxy Image to envoy-dev latest in Main&lt;/li>
&lt;li>Removed EG Logs Private Key&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Fixed Start xDS Server Watchable Map Panics&lt;/li>
&lt;li>Enabled Access Logging for xDS Components&lt;/li>
&lt;/ul></description></item><item><title>KubeCon North America 2022</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/presentations/kubecon-na-2022/kubecon-na-2022/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/presentations/kubecon-na-2022/kubecon-na-2022/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Topic: Envoy Gateway Update&lt;/h4>

 &lt;em>&lt;strong>&amp;mdash; KubeCon North America 2022&lt;/strong>&lt;/em>

&lt;/div>



&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Speaker&lt;/h4>

 &lt;ul>
&lt;li>&lt;strong>Daneyon Hansen&lt;/strong>: Solo.io, Envoy Gateway Maintainer&lt;/li>
&lt;li>&lt;strong>Alice Wasko&lt;/strong>: Ambassador Labs, Envoy Gateway Maintainer&lt;/li>
&lt;/ul>


&lt;/div>



&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Slides&lt;/h4>

 Download from &lt;a href="https://static.sched.com/hosted_files/envoyconna22/2f/Envoy_Gateway_Project_Update_EnvoyCon_NA_2022.pptx">Link&lt;/a>.

&lt;/div>

&lt;h2 id="watch-videos">Watch Videos&lt;a class="td-heading-self-link" href="#watch-videos" aria-label="Heading self-link">&lt;/a>&lt;/h2>


 
 &lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3MUOZc8XNCc?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
 >&lt;/iframe>
 &lt;/div></description></item><item><title>Announcing Envoy Gateway v0.2</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.2/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/v0.2/</guid><description>&lt;p>We are pleased to announce the release of Envoy Gateway v0.2!&lt;/p>
&lt;p>This is the first functional release of Envoy Gateway. We would like to thank the entire Envoy Gateway community for
helping publish the release.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.2.0/">Release Notes&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://gateway.envoyproxy.io/index.html">Docs&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/releases/matrix/">Compatibility Matrix&lt;/a>&lt;/th>
 &lt;th>&lt;a href="https://github.com/envoyproxy/gateway/releases/tag/v0.2.0">Download&lt;/a>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="whats-new">What&amp;rsquo;s New&lt;a class="td-heading-self-link" href="#whats-new" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The release adds a ton of features and functionality. Here are some highlights:&lt;/p>
&lt;h3 id="kubernetes-support">Kubernetes Support&lt;a class="td-heading-self-link" href="#kubernetes-support" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Run Envoy Gateway in a Kubernetes cluster. Checkout the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/user/quickstart/">quickstart guide&lt;/a> to get started with Envoy Gateway in a few
simple steps.&lt;/p></description></item><item><title>v0.2.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.2.0/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.2.0/</guid><description>&lt;p>Date: October 19, 2022&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Config API, translator, roadmap, and message bus design documentation.&lt;/li>
&lt;li>Added documentation for releasing Envoy Gateway.&lt;/li>
&lt;li>Added user guides for configuring common tasks, e.g. HTTP request routing.&lt;/li>
&lt;li>Added support for the Sphinx documentation generator.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the EnvoyGateway API type for configuring Envoy Gateway.&lt;/li>
&lt;li>Added the EnvoyProxy API type for configuring managed Envoys.&lt;/li>
&lt;/ul>
&lt;h2 id="ci-tooling-testing">Ci tooling testing&lt;a class="td-heading-self-link" href="#ci-tooling-testing" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added tooling to build, run, etc. Envoy Gateway.&lt;/li>
&lt;li>Added Gateway API conformance tests.&lt;/li>
&lt;li>Added Make-based tooling to fetch all tools so checks (code lint, spellchecks) and tests can be run locally.&lt;/li>
&lt;li>Added support for releasing latest artifacts to GitHub.&lt;/li>
&lt;li>Added code coverage with a minimum 60% threshold.&lt;/li>
&lt;/ul>
&lt;h2 id="ir">IR&lt;a class="td-heading-self-link" href="#ir" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added xds and infra IRs to decouple user-facing APIs from Envoy Gateway.&lt;/li>
&lt;li>Added IR validation.&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the gatewayapi translator to translate Gateway API and associated resources to the IR and manage the&lt;/li>
&lt;li>status of Gateway API resources.&lt;/li>
&lt;li>Added the xDS translator to translate the xds IR to xDS resources.&lt;/li>
&lt;/ul>
&lt;h2 id="message-service">Message-service&lt;a class="td-heading-self-link" href="#message-service" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added infra and xds IR watchable map messages for inter-component communication.&lt;/li>
&lt;li>Added a Runner to each Envoy Gateway component to support pub/sub between components.&lt;/li>
&lt;li>Added support for managing multiple separate Envoy proxy fleets.&lt;/li>
&lt;/ul>
&lt;h2 id="infra-manager">Infra-manager&lt;a class="td-heading-self-link" href="#infra-manager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Kubernetes Infra Manager to manage Envoy infrastructure running in a Kubernetes cluster.&lt;/li>
&lt;li>Added support for managing a separate Envoy infrastructure per Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the Kubernetes provider with support for managing GatewayClass, Gateway, HTTPRoute, ReferenceGrant, and&lt;/li>
&lt;li>TLSRoute resources.&lt;/li>
&lt;li>Due to Issue #539, a ReferenceGrant is not removed from the system when unreferenced.&lt;/li>
&lt;li>Due to Issue #577, TLSRoute is not being tested for Gateway API conformance.&lt;/li>
&lt;li>Added watchers for dependent resources of managed Envoy infrastructure to trigger reconciliation.&lt;/li>
&lt;li>Added support for labeling managed infrastructure using Gateway namespace/name labels.&lt;/li>
&lt;li>Added support for finalizing the managed GatewayClass.&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added xDS server support to configure managed Envoys using Delta xDS.&lt;/li>
&lt;li>Added initial support for mTLS between the xDS server and managed Envoys.&lt;/li>
&lt;li>Due to envoyproxy/go-control-plane Issue #599, Envoy Gateway logs the private key of HTTPS listeners.&lt;/li>
&lt;/ul></description></item><item><title>v0.2.0-rc2</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.2.0-rc2/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.2.0-rc2/</guid><description>&lt;p>Date: September 29, 2022&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Updated and expanded developer documentation.&lt;/li>
&lt;li>Added &lt;code>kube-demo&lt;/code> target to demonstrate Envoy Gateway functionality.&lt;/li>
&lt;li>Added developer debugging documentation.&lt;/li>
&lt;/ul>
&lt;h2 id="ci">Ci&lt;a class="td-heading-self-link" href="#ci" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Gateway API conformance tests.&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added watchers for dependent resources of managed Envoy infrastructure.&lt;/li>
&lt;li>Added Gateway namespace/name labels to managed resources.&lt;/li>
&lt;li>Added support for finalizing the managed GatewayClass.&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Updated xds server and Envoy bootstrap config to use Delta xDS.&lt;/li>
&lt;li>Added initial support for mTLS between the xDS server and Envoy.&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Expanded support for Gateway API status.&lt;/li>
&lt;li>Added support for request modifier and redirect filters.&lt;/li>
&lt;li>Added support to return 500 responses for invalid backends.&lt;/li>
&lt;/ul>
&lt;h2 id="message-service">Message service&lt;a class="td-heading-self-link" href="#message-service" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Updated IRs to support managing multiple Envoy fleets.&lt;/li>
&lt;/ul>
&lt;h2 id="infra-manager">Infra manager&lt;a class="td-heading-self-link" href="#infra-manager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Separate Envoy infrastructure is created per Gateway.&lt;/li>
&lt;/ul></description></item><item><title>v0.2.0-rc1</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.2.0-rc1/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.2.0-rc1/</guid><description>&lt;p>Date: August 31, 2022&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added a quickstart guide for users to run and use Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the EnvoyGateway API type for configuring Envoy Gateway.&lt;/li>
&lt;li>Added the EnvoyProxy API type for configuring managed Envoys.&lt;/li>
&lt;/ul>
&lt;h2 id="ci">Ci&lt;a class="td-heading-self-link" href="#ci" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added tooling to build, run, etc. Envoy Gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="providers">Providers&lt;a class="td-heading-self-link" href="#providers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the Kubernetes provider.&lt;/li>
&lt;/ul>
&lt;h2 id="xds">xDS&lt;a class="td-heading-self-link" href="#xds" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added xDS server to configure managed Envoys.&lt;/li>
&lt;/ul>
&lt;h2 id="ir">IR&lt;a class="td-heading-self-link" href="#ir" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added xds and infra IRs to decouple user-facing APIs from Envoy Gateway.&lt;/li>
&lt;li>Added IR validation.&lt;/li>
&lt;/ul>
&lt;h2 id="translator">Translator&lt;a class="td-heading-self-link" href="#translator" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added the gatewayapi translator to translate Gateway API and associated resources to the IR and manage&lt;/li>
&lt;li>Gateway API status.&lt;/li>
&lt;/ul>
&lt;h2 id="message-service">Message service&lt;a class="td-heading-self-link" href="#message-service" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added infra and xds IR watchable map messages for inter-component communication.&lt;/li>
&lt;li>Added a Runner to each component to support pub/sub between components.&lt;/li>
&lt;/ul>
&lt;h2 id="infra-manager">Infra manager&lt;a class="td-heading-self-link" href="#infra-manager" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Added Kubernetes Infra Manager to manage Envoy infrastructure running in a Kubernetes cluster.&lt;/li>
&lt;/ul></description></item><item><title>v0.1.0</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.1.0/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/notes/v0.1.0/</guid><description>&lt;p>Date: May 16, 2022&lt;/p>
&lt;h2 id="documentation">Documentation&lt;a class="td-heading-self-link" href="#documentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>The initial open source release describing project goals and high-level design.&lt;/li>
&lt;/ul></description></item><item><title>About Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/about/</guid><description>&lt;link rel="preload" as="image" href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/featured-background_hu11577074925921995840.jpg" media="(max-width: 1200px)">
&lt;link rel="preload" as="image" href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/about/featured-background_hu14348371288254188965.jpg" media="(min-width: 1200px)">
&lt;style>
#td-cover-block-0 {
 background-image: url(/eg-pr-preview/5-test-docs-preview/about/featured-background_hu11577074925921995840.jpg);
}
@media only screen and (min-width: 1200px) {
 #td-cover-block-0 {
 background-image: url(/eg-pr-preview/5-test-docs-preview/about/featured-background_hu14348371288254188965.jpg);
 }
}
&lt;/style>
&lt;section id="td-cover-block-0" class="row td-cover-block td-cover-block--height-auto js-td-cover td-overlay td-overlay--dark -bg-dark">
 &lt;div class="col-12">
 &lt;div class="container td-overlay__inner">
 &lt;div class="text-center">
 &lt;h1 class="display-1 mt-0 mt-md-5 pb-4">About Envoy Gateway&lt;/h1>
 
 &lt;div class="pt-3 lead">
 
 &lt;p>Envoy Gateway is an open source project for managing Envoy Proxy as a standalone or Kubernetes-based application gateway.&lt;/p>
&lt;p>Gateway API resources are used to dynamically provision and configure the managed Envoy Proxies.&lt;/p>
&lt;p>Read on to find out more, or visit our &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/">documentation&lt;/a> to get started!&lt;/p></description></item><item><title>Accelerating TLS Handshakes using Private Key Provider in Envoy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/private-key-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/private-key-provider/</guid><description>&lt;p>TLS operations can be accelerated or the private key can be protected using specialized hardware. This can be leveraged in Envoy using &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-privatekeyprovider">Envoy Private Key Provider&lt;/a> is added to Envoy.&lt;/p>
&lt;p>Today, there are two private key providers implemented in Envoy as contrib extensions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/qat/v3alpha/qat.proto#extensions-private-key-providers-qat-v3alpha-qatprivatekeymethodconfig">QAT in Envoy 1.24 release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/cryptomb/v3alpha/cryptomb.proto">CryptoMB in Envoy 1.20 release&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Both of them are used to accelerate the TLS handshake through the hardware capabilities.&lt;/p>
&lt;p>This task will walk you through the steps required to configure TLS Termination mode for TCP traffic while also using the Envoy Private Key Provider to accelerate the TLS handshake by leveraging QAT and the HW accelerator available on Intel SPR/EMR Xeon server platforms.&lt;/p></description></item><item><title>Accelerating TLS Handshakes using Private Key Provider in Envoy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/private-key-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/private-key-provider/</guid><description>&lt;p>TLS operations can be accelerated or the private key can be protected using specialized hardware. This can be leveraged in Envoy using &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-privatekeyprovider">Envoy Private Key Provider&lt;/a> is added to Envoy.&lt;/p>
&lt;p>Today, there are two private key providers implemented in Envoy as contrib extensions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/qat/v3alpha/qat.proto#extensions-private-key-providers-qat-v3alpha-qatprivatekeymethodconfig">QAT in Envoy 1.24 release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/cryptomb/v3alpha/cryptomb.proto">CryptoMB in Envoy 1.20 release&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Both of them are used to accelerate the TLS handshake through the hardware capabilities.&lt;/p>
&lt;p>This task will walk you through the steps required to configure TLS Termination mode for TCP traffic while also using the Envoy Private Key Provider to accelerate the TLS handshake by leveraging QAT and the HW accelerator available on Intel SPR/EMR Xeon server platforms.&lt;/p></description></item><item><title>Accelerating TLS Handshakes using Private Key Provider in Envoy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/private-key-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/private-key-provider/</guid><description>&lt;p>TLS operations can be accelerated or the private key can be protected using specialized hardware. This can be leveraged in Envoy using &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-privatekeyprovider">Envoy Private Key Provider&lt;/a> is added to Envoy.&lt;/p>
&lt;p>Today, there are two private key providers implemented in Envoy as contrib extensions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/qat/v3alpha/qat.proto#extensions-private-key-providers-qat-v3alpha-qatprivatekeymethodconfig">QAT in Envoy 1.24 release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/cryptomb/v3alpha/cryptomb.proto">CryptoMB in Envoy 1.20 release&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Both of them are used to accelerate the TLS handshake through the hardware capabilities.&lt;/p>
&lt;p>This task will walk you through the steps required to configure TLS Termination mode for TCP traffic while also using the Envoy Private Key Provider to accelerate the TLS handshake by leveraging QAT and the HW accelerator available on Intel SPR/EMR Xeon server platforms.&lt;/p></description></item><item><title>Accelerating TLS Handshakes using Private Key Provider in Envoy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/private-key-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/private-key-provider/</guid><description>&lt;p>TLS operations can be accelerated or the private key can be protected using specialized hardware. This can be leveraged in Envoy using &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-privatekeyprovider">Envoy Private Key Provider&lt;/a> is added to Envoy.&lt;/p>
&lt;p>Today, there are two private key providers implemented in Envoy as contrib extensions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/qat/v3alpha/qat.proto#extensions-private-key-providers-qat-v3alpha-qatprivatekeymethodconfig">QAT in Envoy 1.24 release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/private_key_providers/cryptomb/v3alpha/cryptomb.proto">CryptoMB in Envoy 1.20 release&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Both of them are used to accelerate the TLS handshake through the hardware capabilities.&lt;/p>
&lt;p>This task will walk you through the steps required to configure TLS Termination mode for TCP traffic while also using the Envoy Private Key Provider to accelerate the TLS handshake by leveraging QAT and the HW accelerator available on Intel SPR/EMR Xeon server platforms.&lt;/p></description></item><item><title>Add Pprof support in Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/pprof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/pprof/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway exposes endpoints at &lt;code>localhost:8899/debug/pprof&lt;/code> to run Golang profiles to aid in live debugging. The endpoints are equivalent to those found in the http/pprof package. &lt;code>/debug/pprof/&lt;/code> returns an HTML page listing the available profiles.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add Debug Pprof support to Envoy Gateway control plane.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to custom debug server configuration.&lt;/li>
&lt;/ul>
&lt;p>The following are the different types of profiles end-user can run:&lt;/p></description></item><item><title>API Reference</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#backend">Backend&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#httproutefilter">HTTPRouteFilter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="alpnprotocol">ALPNProtocol&lt;a class="td-heading-self-link" href="#alpnprotocol" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;em>Underlying type:&lt;/em> &lt;em>string&lt;/em>&lt;/p>
&lt;p>ALPNProtocol specifies the protocol to be negotiated using ALPN&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#backendtlsconfig">BackendTLSConfig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#clienttlssettings">ClientTLSSettings&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#tlssettings">TLSSettings&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Value&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>http/1.0&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_0 specifies that HTTP/1.0 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>http/1.1&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_1 specifies that HTTP/1.1 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>h2&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion2 specifies that HTTP/2 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="alsenvoyproxyaccesslog">ALSEnvoyProxyAccessLog&lt;a class="td-heading-self-link" href="#alsenvoyproxyaccesslog" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>ALSEnvoyProxyAccessLog defines the gRPC Access Log Service (ALS) sink.
The service must implement the Envoy gRPC Access Log Service streaming API:
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto">https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto&lt;/a>
Access log format information is passed in the form of gRPC metadata when the
stream is established. Specifically, the following metadata is passed:&lt;/p></description></item><item><title>API Reference</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#backend">Backend&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#httproutefilter">HTTPRouteFilter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="alpnprotocol">ALPNProtocol&lt;a class="td-heading-self-link" href="#alpnprotocol" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;em>Underlying type:&lt;/em> &lt;em>string&lt;/em>&lt;/p>
&lt;p>ALPNProtocol specifies the protocol to be negotiated using ALPN&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#backendtlsconfig">BackendTLSConfig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#clienttlssettings">ClientTLSSettings&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#tlssettings">TLSSettings&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Value&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>http/1.0&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_0 specifies that HTTP/1.0 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>http/1.1&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_1 specifies that HTTP/1.1 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>h2&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion2 specifies that HTTP/2 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="alsenvoyproxyaccesslog">ALSEnvoyProxyAccessLog&lt;a class="td-heading-self-link" href="#alsenvoyproxyaccesslog" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>ALSEnvoyProxyAccessLog defines the gRPC Access Log Service (ALS) sink.
The service must implement the Envoy gRPC Access Log Service streaming API:
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto">https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto&lt;/a>
Access log format information is passed in the form of gRPC metadata when the
stream is established.&lt;/p></description></item><item><title>API Reference</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#backendtrafficpolicylist">BackendTrafficPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#clienttrafficpolicylist">ClientTrafficPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoypatchpolicylist">EnvoyPatchPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#securitypolicylist">SecurityPolicyList&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="backendtrafficpolicy">BackendTrafficPolicy&lt;a class="td-heading-self-link" href="#backendtrafficpolicy" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>BackendTrafficPolicy allows the user to configure the behavior of the connection between the downstream client and Envoy Proxy listener.&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#backendtrafficpolicylist">BackendTrafficPolicyList&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>apiVersion&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>gateway.envoyproxy.io/v1alpha1&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>kind&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>BackendTrafficPolicy&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>metadata&lt;/code> &lt;em>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#objectmeta-v1-meta">ObjectMeta&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Refer to Kubernetes API documentation for fields of &lt;code>metadata&lt;/code>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>spec&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#backendtrafficpolicyspec">BackendTrafficPolicySpec&lt;/a>&lt;/em>&lt;/td>
 &lt;td>spec defines the desired state of BackendTrafficPolicy.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="backendtrafficpolicylist">BackendTrafficPolicyList&lt;a class="td-heading-self-link" href="#backendtrafficpolicylist" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>BackendTrafficPolicyList contains a list of BackendTrafficPolicy resources.&lt;/p></description></item><item><title>API Reference</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#backendtrafficpolicylist">BackendTrafficPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#clienttrafficpolicylist">ClientTrafficPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#envoypatchpolicylist">EnvoyPatchPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#securitypolicylist">SecurityPolicyList&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="alpnprotocol">ALPNProtocol&lt;a class="td-heading-self-link" href="#alpnprotocol" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;em>Underlying type:&lt;/em> &lt;em>string&lt;/em>&lt;/p>
&lt;p>ALPNProtocol specifies the protocol to be negotiated using ALPN&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/api/extension_types/#tlssettings">TLSSettings&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="activehealthcheck">ActiveHealthCheck&lt;a class="td-heading-self-link" href="#activehealthcheck" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>ActiveHealthCheck defines the active health check configuration. EG supports various types of active health checking including HTTP, TCP.&lt;/p></description></item><item><title>API Reference</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#backend">Backend&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#backendlist">BackendList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#backendtrafficpolicylist">BackendTrafficPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#clienttrafficpolicylist">ClientTrafficPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoyextensionpolicylist">EnvoyExtensionPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoypatchpolicylist">EnvoyPatchPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#securitypolicylist">SecurityPolicyList&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="alpnprotocol">ALPNProtocol&lt;a class="td-heading-self-link" href="#alpnprotocol" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;em>Underlying type:&lt;/em> &lt;em>string&lt;/em>&lt;/p>
&lt;p>ALPNProtocol specifies the protocol to be negotiated using ALPN&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#backendtlsconfig">BackendTLSConfig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#clienttlssettings">ClientTLSSettings&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#tlssettings">TLSSettings&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Value&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>http/1.0&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_0 specifies that HTTP/1.0 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>http/1.1&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_1 specifies that HTTP/1.1 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>h2&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion2 specifies that HTTP/2 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="alsenvoyproxyaccesslog">ALSEnvoyProxyAccessLog&lt;a class="td-heading-self-link" href="#alsenvoyproxyaccesslog" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>ALSEnvoyProxyAccessLog defines the gRPC Access Log Service (ALS) sink.
The service must implement the Envoy gRPC Access Log Service streaming API:
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto">https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto&lt;/a>
Access log format information is passed in the form of gRPC metadata when the
stream is established. Specifically, the following metadata is passed:&lt;/p></description></item><item><title>API Reference</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#backend">Backend&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#httproutefilter">HTTPRouteFilter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="alpnprotocol">ALPNProtocol&lt;a class="td-heading-self-link" href="#alpnprotocol" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>&lt;em>Underlying type:&lt;/em> &lt;em>string&lt;/em>&lt;/p>
&lt;p>ALPNProtocol specifies the protocol to be negotiated using ALPN&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#backendtlsconfig">BackendTLSConfig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#clienttlssettings">ClientTLSSettings&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#tlssettings">TLSSettings&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Value&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>http/1.0&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_0 specifies that HTTP/1.0 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>http/1.1&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion1_1 specifies that HTTP/1.1 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>h2&lt;/code>&lt;/td>
 &lt;td>HTTPProtocolVersion2 specifies that HTTP/2 should be negotiable with ALPN&lt;br />&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="alsenvoyproxyaccesslog">ALSEnvoyProxyAccessLog&lt;a class="td-heading-self-link" href="#alsenvoyproxyaccesslog" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;p>ALSEnvoyProxyAccessLog defines the gRPC Access Log Service (ALS) sink.
The service must implement the Envoy gRPC Access Log Service streaming API:
&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto">https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto&lt;/a>
Access log format information is passed in the form of gRPC metadata when the
stream is established. Specifically, the following metadata is passed:&lt;/p></description></item><item><title>Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/backend/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>Backend&lt;/code> API allowing system administrators to represent backends without the use
of a K8s &lt;code>Service&lt;/code> resource.&lt;/p>
&lt;p>Common use cases for non-Service backends in the K8s and Envoy ecosystem include:&lt;/p>
&lt;ul>
&lt;li>Cluster-external endpoints, which are currently second-class citizens in Gateway-API
(supported using &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/routing-outside-kubernetes/">Services and FQDN endpoints&lt;/a>).&lt;/li>
&lt;li>Host-local endpoints, such as sidecars or daemons that listen on &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#envoy-v3-api-msg-config-core-v3-pipe">unix domain sockets&lt;/a> or envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/other_features/internal_listener">internal listeners&lt;/a>,
that cannot be represented by a K8s service at all.&lt;/li>
&lt;/ul>
&lt;p>Several projects currently support backends that are not registered in the infrastructure-specific service registry.&lt;/p></description></item><item><title>Backend Mutual TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/backend-mtls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/backend-mtls/</guid><description>&lt;p>This task demonstrates how mTLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a> to establish TLS. For mTLS, the Gateway must authenticate by presenting a client certificate to the backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/security/backend-tls/">Backend TLS&lt;/a> to install Envoy Gateway and configure TLS to the backend server.&lt;/p></description></item><item><title>Backend Mutual TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/backend-mtls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/backend-mtls/</guid><description>&lt;p>This task demonstrates how mTLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a> to establish TLS. For mTLS, the Gateway must authenticate by presenting a client certificate to the backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/security/backend-tls/">Backend TLS&lt;/a> to install Envoy Gateway and configure TLS to the backend server.&lt;/p></description></item><item><title>Backend Mutual TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/backend-mtls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/backend-mtls/</guid><description>&lt;p>This task demonstrates how mTLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a> to establish TLS. For mTLS, the Gateway must authenticate by presenting a client certificate to the backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/backend-tls/">Backend TLS&lt;/a> to install Envoy Gateway and configure TLS to the backend server.&lt;/p></description></item><item><title>Backend Mutual TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/backend-mtls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/backend-mtls/</guid><description>&lt;p>This task demonstrates how mTLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a> to establish TLS. For mTLS, the Gateway must authenticate by presenting a client certificate to the backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/backend-tls/">Backend TLS&lt;/a> to install Envoy Gateway and configure TLS to the backend server.&lt;/p></description></item><item><title>Backend Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/backend/</guid><description>&lt;p>Envoy Gateway supports routing to native K8s resources such as &lt;code>Service&lt;/code> and &lt;code>ServiceImport&lt;/code>. The &lt;code>Backend&lt;/code> API is a custom Envoy Gateway &lt;a href="https://gateway-api.sigs.k8s.io/guides/migrating-from-ingress/#approach-to-extensibility">extension resource&lt;/a> that can used in Gateway-API &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendObjectReference">BackendObjectReference&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Backend API was added to support several use cases:&lt;/p>
&lt;ul>
&lt;li>Allowing users to integrate Envoy with services (Ext Auth, Rate Limit, ALS, &amp;hellip;) using Unix Domain Sockets, which are currently not supported by K8s.&lt;/li>
&lt;li>Simplify &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/routing-outside-kubernetes/">routing to cluster-external backends&lt;/a>, which currently requires users to maintain both K8s &lt;code>Service&lt;/code> and &lt;code>EndpointSlice&lt;/code> resources.&lt;/li>
&lt;/ul>
&lt;h2 id="warning">Warning&lt;a class="td-heading-self-link" href="#warning" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Similar to the K8s EndpointSlice API, the Backend API can be misused to allow traffic to be sent to otherwise restricted destinations, as described in &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25740">CVE-2021-25740&lt;/a>.
A Backend resource can be used to:&lt;/p></description></item><item><title>Backend Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/backend/</guid><description>&lt;p>Envoy Gateway supports routing to native K8s resources such as &lt;code>Service&lt;/code> and &lt;code>ServiceImport&lt;/code>. The &lt;code>Backend&lt;/code> API is a custom Envoy Gateway &lt;a href="https://gateway-api.sigs.k8s.io/guides/migrating-from-ingress/#approach-to-extensibility">extension resource&lt;/a> that can used in Gateway-API &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendObjectReference">BackendObjectReference&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Backend API was added to support several use cases:&lt;/p>
&lt;ul>
&lt;li>Allowing users to integrate Envoy with services (Ext Auth, Rate Limit, ALS, &amp;hellip;) using Unix Domain Sockets, which are currently not supported by K8s.&lt;/li>
&lt;li>Simplify &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/routing-outside-kubernetes/">routing to cluster-external backends&lt;/a>, which currently requires users to maintain both K8s &lt;code>Service&lt;/code> and &lt;code>EndpointSlice&lt;/code> resources.&lt;/li>
&lt;/ul>
&lt;h2 id="warning">Warning&lt;a class="td-heading-self-link" href="#warning" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Similar to the K8s EndpointSlice API, the Backend API can be misused to allow traffic to be sent to otherwise restricted destinations, as described in &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25740">CVE-2021-25740&lt;/a>.
A Backend resource can be used to:&lt;/p></description></item><item><title>Backend Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/backend/</guid><description>&lt;p>Envoy Gateway supports routing to native K8s resources such as &lt;code>Service&lt;/code> and &lt;code>ServiceImport&lt;/code>. The &lt;code>Backend&lt;/code> API is a custom Envoy Gateway &lt;a href="https://gateway-api.sigs.k8s.io/guides/migrating-from-ingress/#approach-to-extensibility">extension resource&lt;/a> that can used in Gateway-API &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendObjectReference">BackendObjectReference&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Backend API was added to support several use cases:&lt;/p>
&lt;ul>
&lt;li>Allowing users to integrate Envoy with services (Ext Auth, Rate Limit, ALS, &amp;hellip;) using Unix Domain Sockets, which are currently not supported by K8s.&lt;/li>
&lt;li>Simplify &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/routing-outside-kubernetes/">routing to cluster-external backends&lt;/a>, which currently requires users to maintain both K8s &lt;code>Service&lt;/code> and &lt;code>EndpointSlice&lt;/code> resources.&lt;/li>
&lt;/ul>
&lt;h2 id="warning">Warning&lt;a class="td-heading-self-link" href="#warning" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Similar to the K8s EndpointSlice API, the Backend API can be misused to allow traffic to be sent to otherwise restricted destinations, as described in &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25740">CVE-2021-25740&lt;/a>.
A Backend resource can be used to:&lt;/p></description></item><item><title>Backend Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/backend/</guid><description>&lt;p>Envoy Gateway supports routing to native K8s resources such as &lt;code>Service&lt;/code> and &lt;code>ServiceImport&lt;/code>. The &lt;code>Backend&lt;/code> API is a custom Envoy Gateway &lt;a href="https://gateway-api.sigs.k8s.io/guides/migrating-from-ingress/#approach-to-extensibility">extension resource&lt;/a> that can used in Gateway-API &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendObjectReference">BackendObjectReference&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Backend API was added to support several use cases:&lt;/p>
&lt;ul>
&lt;li>Allowing users to integrate Envoy with services (Ext Auth, Rate Limit, ALS, &amp;hellip;) using Unix Domain Sockets, which are currently not supported by K8s.&lt;/li>
&lt;li>Simplify &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/routing-outside-kubernetes/">routing to cluster-external backends&lt;/a>, which currently requires users to maintain both K8s &lt;code>Service&lt;/code> and &lt;code>EndpointSlice&lt;/code> resources.&lt;/li>
&lt;/ul>
&lt;h2 id="warning">Warning&lt;a class="td-heading-self-link" href="#warning" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Similar to the K8s EndpointSlice API, the Backend API can be misused to allow traffic to be sent to otherwise restricted destinations, as described in &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25740">CVE-2021-25740&lt;/a>.
A Backend resource can be used to:&lt;/p></description></item><item><title>Backend TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/backend-tls/</guid><description>&lt;p>This task demonstrates how TLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Backend TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/backend-tls/</guid><description>&lt;p>This task demonstrates how TLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Backend TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/backend-tls/</guid><description>&lt;p>This task demonstrates how TLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the backend to terminate TLS connections from the Gateways.&lt;/p></description></item><item><title>Backend TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/backend-tls/</guid><description>&lt;p>This task demonstrates how TLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the backend to terminate TLS connections from the Gateways.&lt;/p></description></item><item><title>Backend TLS: Gateway to Backend</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/backend-tls/</guid><description>&lt;p>This task demonstrates how TLS can be achieved between the Gateway and a backend.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;p>Envoy Gateway supports the Gateway-API defined &lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>BackendTrafficPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/backend-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/backend-traffic-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>BackendTrafficPolicy&lt;/code> API allowing users to configure
the behavior for how the Envoy Proxy server communicates with upstream backend services/endpoints.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API definition to hold settings for configuring behavior of the connection between the backend services
and Envoy Proxy listener.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the API configuration fields in this API.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>BackendTrafficPolicy&lt;/code> is an implied hierarchy type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>.
It can target either a &lt;code>Gateway&lt;/code>, or an xRoute (&lt;code>HTTPRoute&lt;/code>/&lt;code>GRPCRoute&lt;/code>/etc.). When targeting a &lt;code>Gateway&lt;/code>,
it will apply the configured settings within ght &lt;code>BackendTrafficPolicy&lt;/code> to all children xRoute resources of that &lt;code>Gateway&lt;/code>.
If a &lt;code>BackendTrafficPolicy&lt;/code> targets an xRoute and a different &lt;code>BackendTrafficPolicy&lt;/code> targets the &lt;code>Gateway&lt;/code> that route belongs to,
then the configuration from the policy that is targeting the xRoute resource will win in a conflict.&lt;/p></description></item><item><title>BackendTrafficPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/backend-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/backend-traffic-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>BackendTrafficPolicy&lt;/code> API allowing users to configure
the behavior for how the Envoy Proxy server communicates with upstream backend services/endpoints.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API definition to hold settings for configuring behavior of the connection between the backend services
and Envoy Proxy listener.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the API configuration fields in this API.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>BackendTrafficPolicy&lt;/code> is an implied hierarchy type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>.
It can target either a &lt;code>Gateway&lt;/code>, or an xRoute (&lt;code>HTTPRoute&lt;/code>/&lt;code>GRPCRoute&lt;/code>/etc.). When targeting a &lt;code>Gateway&lt;/code>,
it will apply the configured settings within ght &lt;code>BackendTrafficPolicy&lt;/code> to all children xRoute resources of that &lt;code>Gateway&lt;/code>.
If a &lt;code>BackendTrafficPolicy&lt;/code> targets an xRoute and a different &lt;code>BackendTrafficPolicy&lt;/code> targets the &lt;code>Gateway&lt;/code> that route belongs to,
then the configuration from the policy that is targeting the xRoute resource will win in a conflict.&lt;/p></description></item><item><title>Basic Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/basic-auth/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc2617">HTTP Basic authentication&lt;/a>.
HTTP Basic authentication checks if an incoming request has a valid username and password before routing the request to
a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure HTTP Basic
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Basic Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/basic-auth/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc2617">HTTP Basic authentication&lt;/a>.
HTTP Basic authentication checks if an incoming request has a valid username and password before routing the request to
a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure HTTP Basic
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Basic Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/basic-auth/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc2617">HTTP Basic authentication&lt;/a>.
HTTP Basic authentication checks if an incoming request has a valid username and password before routing the request to
a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure HTTP Basic
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Basic Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/basic-auth/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc2617">HTTP Basic authentication&lt;/a>.
HTTP Basic authentication checks if an incoming request has a valid username and password before routing the request to
a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure HTTP Basic
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Basic Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/basic-auth/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc2617">HTTP Basic authentication&lt;/a>.
HTTP Basic authentication checks if an incoming request has a valid username and password before routing the request to
a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure HTTP Basic
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Bootstrap Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/bootstrap/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/31">Issue 31&lt;/a> specifies the need for allowing advanced users to specify their custom
Envoy Bootstrap configuration rather than using the default Bootstrap configuration
defined in Envoy Gateway. This allows advanced users to extend Envoy Gateway and
support their custom use cases such setting up tracing and stats configuration
that is not supported by Envoy Gateway.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an API field to allow a user to specify a custom Bootstrap&lt;/li>
&lt;li>Provide tooling to allow the user to generate the default Bootstrap configuration
as well as validate their custom Bootstrap.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Allow user to configure only a section of the Bootstrap&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Leverage the existing &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a> resource which can be attached to the &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> using
the &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.ParametersReference">parametersRef&lt;/a> field, and define a &lt;code>Bootstrap&lt;/code> field within the resource. If this field is set,
the value is used as the Bootstrap configuration for all managed Envoy Proxies created by Envoy Gateway.&lt;/p></description></item><item><title>Bootstrap Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/bootstrap/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/31">Issue 31&lt;/a> specifies the need for allowing advanced users to specify their custom
Envoy Bootstrap configuration rather than using the default Bootstrap configuration
defined in Envoy Gateway. This allows advanced users to extend Envoy Gateway and
support their custom use cases such setting up tracing and stats configuration
that is not supported by Envoy Gateway.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an API field to allow a user to specify a custom Bootstrap&lt;/li>
&lt;li>Provide tooling to allow the user to generate the default Bootstrap configuration
as well as validate their custom Bootstrap.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Allow user to configure only a section of the Bootstrap&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Leverage the existing &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/#envoyproxy">EnvoyProxy&lt;/a> resource which can be attached to the &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.GatewayClass">GatewayClass&lt;/a> using
the &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.ParametersReference">parametersRef&lt;/a> field, and define a &lt;code>Bootstrap&lt;/code> field within the resource. If this field is set,
the value is used as the Bootstrap configuration for all managed Envoy Proxies created by Envoy Gateway.&lt;/p></description></item><item><title>Bootstrap Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/bootstrap/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/31">Issue 31&lt;/a> specifies the need for allowing advanced users to specify their custom
Envoy Bootstrap configuration rather than using the default Bootstrap configuration
defined in Envoy Gateway. This allows advanced users to extend Envoy Gateway and
support their custom use cases such setting up tracing and stats configuration
that is not supported by Envoy Gateway.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an API field to allow a user to specify a custom Bootstrap&lt;/li>
&lt;li>Provide tooling to allow the user to generate the default Bootstrap configuration
as well as validate their custom Bootstrap.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Allow user to configure only a section of the Bootstrap&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Leverage the existing &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#envoyproxy">EnvoyProxy&lt;/a> resource which can be attached to the &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.GatewayClass">GatewayClass&lt;/a> using
the &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.ParametersReference">parametersRef&lt;/a> field, and define a &lt;code>Bootstrap&lt;/code> field within the resource. If this field is set,
the value is used as the Bootstrap configuration for all managed Envoy Proxies created by Envoy Gateway.&lt;/p></description></item><item><title>Bootstrap Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/bootstrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/bootstrap/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/31">Issue 31&lt;/a> specifies the need for allowing advanced users to specify their custom
Envoy Bootstrap configuration rather than using the default Bootstrap configuration
defined in Envoy Gateway. This allows advanced users to extend Envoy Gateway and
support their custom use cases such setting up tracing and stats configuration
that is not supported by Envoy Gateway.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an API field to allow a user to specify a custom Bootstrap&lt;/li>
&lt;li>Provide tooling to allow the user to generate the default Bootstrap configuration
as well as validate their custom Bootstrap.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Allow user to configure only a section of the Bootstrap&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Leverage the existing &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a> resource which can be attached to the &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> using
the &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.ParametersReference">parametersRef&lt;/a> field, and define a &lt;code>Bootstrap&lt;/code> field within the resource. If this field is set,
the value is used as the Bootstrap configuration for all managed Envoy Proxies created by Envoy Gateway.&lt;/p></description></item><item><title>Build a Wasm image</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/build-wasm-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/build-wasm-image/</guid><description>&lt;p>Envoy Gateway supports two types of Wasm extensions within the &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API: HTTP Wasm Extensions and Image Wasm Extensions.
Packaging a Wasm extension as an OCI image is beneficial because it simplifies versioning and distribution for users.
Additionally, users can leverage existing image toolchain to build and manage Wasm images.&lt;/p>
&lt;p>This document describes how to build OCI images which are consumable by Envoy Gateway.&lt;/p>
&lt;h2 id="wasm-image-formats">Wasm Image Formats&lt;a class="td-heading-self-link" href="#wasm-image-formats" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>There are two types of images that are supported by Envoy Gateway. One is in the Docker format, and another is the standard
OCI specification compliant format. Please note that both of them are supported by any OCI registries. You can choose
either format depending on your preference, and both types of images are consumable by Envoy Gateway &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API.&lt;/p></description></item><item><title>Build a Wasm image</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/build-wasm-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/build-wasm-image/</guid><description>&lt;p>Envoy Gateway supports two types of Wasm extensions within the &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API: HTTP Wasm Extensions and Image Wasm Extensions.
Packaging a Wasm extension as an OCI image is beneficial because it simplifies versioning and distribution for users.
Additionally, users can leverage existing image toolchain to build and manage Wasm images.&lt;/p>
&lt;p>This document describes how to build OCI images which are consumable by Envoy Gateway.&lt;/p>
&lt;h2 id="wasm-image-formats">Wasm Image Formats&lt;a class="td-heading-self-link" href="#wasm-image-formats" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>There are two types of images that are supported by Envoy Gateway. One is in the Docker format, and another is the standard
OCI specification compliant format. Please note that both of them are supported by any OCI registries. You can choose
either format depending on your preference, and both types of images are consumable by Envoy Gateway &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API.&lt;/p></description></item><item><title>Build a Wasm image</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/build-wasm-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/build-wasm-image/</guid><description>&lt;p>Envoy Gateway supports two types of Wasm extensions within the &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API: HTTP Wasm Extensions and Image Wasm Extensions.
Packaging a Wasm extension as an OCI image is beneficial because it simplifies versioning and distribution for users.
Additionally, users can leverage existing image toolchain to build and manage Wasm images.&lt;/p>
&lt;p>This document describes how to build OCI images which are consumable by Envoy Gateway.&lt;/p>
&lt;h2 id="wasm-image-formats">Wasm Image Formats&lt;a class="td-heading-self-link" href="#wasm-image-formats" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>There are two types of images that are supported by Envoy Gateway. One is in the Docker format, and another is the standard
OCI specification compliant format. Please note that both of them are supported by any OCI registries. You can choose
either format depending on your preference, and both types of images are consumable by Envoy Gateway &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API.&lt;/p></description></item><item><title>Build a Wasm image</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/build-wasm-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/build-wasm-image/</guid><description>&lt;p>Envoy Gateway supports two types of Wasm extensions within the &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API: HTTP Wasm Extensions and Image Wasm Extensions.
Packaging a Wasm extension as an OCI image is beneficial because it simplifies versioning and distribution for users.
Additionally, users can leverage existing image toolchain to build and manage Wasm images.&lt;/p>
&lt;p>This document describes how to build OCI images which are consumable by Envoy Gateway.&lt;/p>
&lt;h2 id="wasm-image-formats">Wasm Image Formats&lt;a class="td-heading-self-link" href="#wasm-image-formats" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>There are two types of images that are supported by Envoy Gateway. One is in the Docker format, and another is the standard
OCI specification compliant format. Please note that both of them are supported by any OCI registries. You can choose
either format depending on your preference, and both types of images are consumable by Envoy Gateway &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> API.&lt;/p></description></item><item><title>Circuit Breakers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/circuit-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/circuit-breaker/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking">Envoy circuit breakers&lt;/a> can be used to fail quickly and apply back-pressure in response to upstream service degradation.&lt;/p>
&lt;p>Envoy Gateway supports the following circuit breaker thresholds:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concurrent Connections&lt;/strong>: limit the connections that Envoy can establish to the upstream service. When this threshold is met, new connections will not be established, and some requests will be queued until an existing connection becomes available.&lt;/li>
&lt;li>&lt;strong>Concurrent Requests&lt;/strong>: limit on concurrent requests in-flight from Envoy to the upstream service. When this threshold is met, requests will be queued.&lt;/li>
&lt;li>&lt;strong>Pending Requests&lt;/strong>: limit the pending request queue size. When this threshold is met, overflowing requests will be terminated with a &lt;code>503&lt;/code> status code.&lt;/li>
&lt;/ul>
&lt;p>Envoy&amp;rsquo;s circuit breakers are distributed: counters are not synchronized across different Envoy processes. The default Envoy and Envoy Gateway circuit breaker threshold values (1024) may be too strict for high-throughput systems.&lt;/p></description></item><item><title>Circuit Breakers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/circuit-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/circuit-breaker/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking">Envoy circuit breakers&lt;/a> can be used to fail quickly and apply back-pressure in response to upstream service degradation.&lt;/p>
&lt;p>Envoy Gateway supports the following circuit breaker thresholds:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concurrent Connections&lt;/strong>: limit the connections that Envoy can establish to the upstream service. When this threshold is met, new connections will not be established, and some requests will be queued until an existing connection becomes available.&lt;/li>
&lt;li>&lt;strong>Concurrent Requests&lt;/strong>: limit on concurrent requests in-flight from Envoy to the upstream service. When this threshold is met, requests will be queued.&lt;/li>
&lt;li>&lt;strong>Pending Requests&lt;/strong>: limit the pending request queue size. When this threshold is met, overflowing requests will be terminated with a &lt;code>503&lt;/code> status code.&lt;/li>
&lt;/ul>
&lt;p>Envoy&amp;rsquo;s circuit breakers are distributed: counters are not synchronized across different Envoy processes. The default Envoy and Envoy Gateway circuit breaker threshold values (1024) may be too strict for high-throughput systems.&lt;/p></description></item><item><title>Circuit Breakers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/circuit-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/circuit-breaker/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking">Envoy circuit breakers&lt;/a> can be used to fail quickly and apply back-pressure in response to upstream service degradation.&lt;/p>
&lt;p>Envoy Gateway supports the following circuit breaker thresholds:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concurrent Connections&lt;/strong>: limit the connections that Envoy can establish to the upstream service. When this threshold is met, new connections will not be established, and some requests will be queued until an existing connection becomes available.&lt;/li>
&lt;li>&lt;strong>Concurrent Requests&lt;/strong>: limit on concurrent requests in-flight from Envoy to the upstream service. When this threshold is met, requests will be queued.&lt;/li>
&lt;li>&lt;strong>Pending Requests&lt;/strong>: limit the pending request queue size. When this threshold is met, overflowing requests will be terminated with a &lt;code>503&lt;/code> status code.&lt;/li>
&lt;/ul>
&lt;p>Envoy&amp;rsquo;s circuit breakers are distributed: counters are not synchronized across different Envoy processes. The default Envoy and Envoy Gateway circuit breaker threshold values (1024) may be too strict for high-throughput systems.&lt;/p></description></item><item><title>Circuit Breakers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/circuit-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/circuit-breaker/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking">Envoy circuit breakers&lt;/a> can be used to fail quickly and apply back-pressure in response to upstream service degradation.&lt;/p>
&lt;p>Envoy Gateway supports the following circuit breaker thresholds:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concurrent Connections&lt;/strong>: limit the connections that Envoy can establish to the upstream service. When this threshold is met, new connections will not be established, and some requests will be queued until an existing connection becomes available.&lt;/li>
&lt;li>&lt;strong>Concurrent Requests&lt;/strong>: limit on concurrent requests in-flight from Envoy to the upstream service. When this threshold is met, requests will be queued.&lt;/li>
&lt;li>&lt;strong>Pending Requests&lt;/strong>: limit the pending request queue size. When this threshold is met, overflowing requests will be terminated with a &lt;code>503&lt;/code> status code.&lt;/li>
&lt;/ul>
&lt;p>Envoy&amp;rsquo;s circuit breakers are distributed: counters are not synchronized across different Envoy processes. The default Envoy and Envoy Gateway circuit breaker threshold values (1024) may be too strict for high-throughput systems.&lt;/p></description></item><item><title>Circuit Breakers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/circuit-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/circuit-breaker/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking">Envoy circuit breakers&lt;/a> can be used to fail quickly and apply back-pressure in response to upstream service degradation.&lt;/p>
&lt;p>Envoy Gateway supports the following circuit breaker thresholds:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concurrent Connections&lt;/strong>: limit the connections that Envoy can establish to the upstream service. When this threshold is met, new connections will not be established, and some requests will be queued until an existing connection becomes available.&lt;/li>
&lt;li>&lt;strong>Concurrent Requests&lt;/strong>: limit on concurrent requests in-flight from Envoy to the upstream service. When this threshold is met, requests will be queued.&lt;/li>
&lt;li>&lt;strong>Pending Requests&lt;/strong>: limit the pending request queue size. When this threshold is met, overflowing requests will be terminated with a &lt;code>503&lt;/code> status code.&lt;/li>
&lt;/ul>
&lt;p>Envoy&amp;rsquo;s circuit breakers are distributed: counters are not synchronized across different Envoy processes. The default Envoy and Envoy Gateway circuit breaker threshold values (1024) may be too strict for high-throughput systems.&lt;/p></description></item><item><title>Client Traffic Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/client-traffic-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API allows system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This API was added as a new policy attachment resource that can be applied to Gateway resources and it is meant to hold settings for configuring behavior of the connection between the downstream client and Envoy Proxy listener. It is the counterpart to the &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> API resource.&lt;/p></description></item><item><title>Client Traffic Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/client-traffic-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API allows system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This API was added as a new policy attachment resource that can be applied to Gateway resources and it is meant to hold settings for configuring behavior of the connection between the downstream client and Envoy Proxy listener. It is the counterpart to the &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> API resource.&lt;/p></description></item><item><title>Client Traffic Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/client-traffic-policy/</guid><description>&lt;p>This guide explains the usage of the &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API allows system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This API was added as a new policy attachment resource that can be applied to Gateway resources and it is meant to hold settings for configuring behavior of the connection between the downstream client and Envoy Proxy listener. It is the counterpart to the &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> API resource.&lt;/p></description></item><item><title>Client Traffic Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/client-traffic-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API allows system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This API was added as a new policy attachment resource that can be applied to Gateway resources and it is meant to hold settings for configuring behavior of the connection between the downstream client and Envoy Proxy listener. It is the counterpart to the &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> API resource.&lt;/p></description></item><item><title>Client Traffic Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/client-traffic-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API allows system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This API was added as a new policy attachment resource that can be applied to Gateway resources and it is meant to hold settings for configuring behavior of the connection between the downstream client and Envoy Proxy listener. It is the counterpart to the &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> API resource.&lt;/p></description></item><item><title>ClientTrafficPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/client-traffic-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>ClientTrafficPolicy&lt;/code> API allowing system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API definition to hold settings for configuring behavior of the connection between the downstream
client and Envoy Proxy listener.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the API configuration fields in this API.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>ClientTrafficPolicy&lt;/code> is a &lt;a href="https://gateway-api.sigs.k8s.io/references/policy-attachment/#direct-policy-attachment">Direct Policy Attachment&lt;/a> type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>
to define configuration that affect the connection between the downstream client and Envoy Proxy listener.&lt;/p></description></item><item><title>ClientTrafficPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/client-traffic-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>ClientTrafficPolicy&lt;/code> API allowing system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API definition to hold settings for configuring behavior of the connection between the downstream
client and Envoy Proxy listener.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the API configuration fields in this API.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>ClientTrafficPolicy&lt;/code> is a &lt;a href="https://gateway-api.sigs.k8s.io/references/policy-attachment/#direct-policy-attachment">Direct Policy Attachment&lt;/a> type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>
to define configuration that affect the connection between the downstream client and Envoy Proxy listener.&lt;/p></description></item><item><title>Code of Conduct</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/code_of_conduct/</guid><description>&lt;p>Envoy Gateway follows the &lt;a href="https://github.com/cncf/foundation/blob/main/code-of-conduct.md">CNCF Code of Conduct&lt;/a>.&lt;/p></description></item><item><title>Code of Conduct</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/code_of_conduct/</guid><description>&lt;p>Envoy Gateway follows the &lt;a href="https://github.com/cncf/foundation/blob/main/code-of-conduct.md">CNCF Code of Conduct&lt;/a>.&lt;/p></description></item><item><title>Code of Conduct</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/code_of_conduct/</guid><description>&lt;p>Envoy Gateway follows the &lt;a href="https://github.com/cncf/foundation/blob/main/code-of-conduct.md">CNCF Code of Conduct&lt;/a>.&lt;/p></description></item><item><title>Code of Conduct</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/code_of_conduct/</guid><description>&lt;p>Envoy Gateway follows the &lt;a href="https://github.com/cncf/foundation/blob/main/code-of-conduct.md">CNCF Code of Conduct&lt;/a>.&lt;/p></description></item><item><title>Code of Conduct</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/code_of_conduct/</guid><description>&lt;p>Envoy Gateway follows the &lt;a href="https://github.com/cncf/foundation/blob/main/code-of-conduct.md">CNCF Code of Conduct&lt;/a>.&lt;/p></description></item><item><title>Code of Conduct</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/code_of_conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/code_of_conduct/</guid><description>&lt;p>Envoy Gateway follows the &lt;a href="https://github.com/cncf/foundation/blob/main/code-of-conduct.md">CNCF Code of Conduct&lt;/a>.&lt;/p></description></item><item><title>Compatibility Matrix</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/news/releases/matrix/</guid><description>&lt;p>Envoy Gateway relies on the Envoy Proxy and the Gateway API, and runs within a Kubernetes cluster. Not all versions of each of these products can function together for Envoy Gateway. Supported version combinations are listed below; &lt;strong>bold&lt;/strong> type indicates the versions of the Envoy Proxy and the Gateway API actually compiled into each Envoy Gateway release.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Envoy Gateway version&lt;/th>
 &lt;th>Envoy Proxy version&lt;/th>
 &lt;th>Rate Limit version&lt;/th>
 &lt;th>Gateway API version&lt;/th>
 &lt;th>Kubernetes version&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>latest&lt;/td>
 &lt;td>&lt;strong>dev-latest&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>master&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v1.2.0&lt;/strong>&lt;/td>
 &lt;td>v1.29, v1.30, v1.31, v1.32&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v1.2&lt;/td>
 &lt;td>&lt;strong>distroless-v1.32.1&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>28b1629a&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v1.2.0&lt;/strong>&lt;/td>
 &lt;td>v1.28, v1.29, v1.30, v1.31&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v1.1&lt;/td>
 &lt;td>&lt;strong>distroless-v1.31.0&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>91484c59&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v1.1.0&lt;/strong>&lt;/td>
 &lt;td>v1.27, v1.28, v1.29, v1.30&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v1.0&lt;/td>
 &lt;td>&lt;strong>distroless-v1.29.2&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>19f2079f&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v1.0.0&lt;/strong>&lt;/td>
 &lt;td>v1.26, v1.27, v1.28, v1.29&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v0.6&lt;/td>
 &lt;td>&lt;strong>distroless-v1.28-latest&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>b9796237&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v1.0.0&lt;/strong>&lt;/td>
 &lt;td>v1.26, v1.27, v1.28&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v0.5&lt;/td>
 &lt;td>&lt;strong>v1.27-latest&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>e059638d&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v0.7.1&lt;/strong>&lt;/td>
 &lt;td>v1.25, v1.26, v1.27&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v0.4&lt;/td>
 &lt;td>&lt;strong>v1.26-latest&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>542a6047&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v0.6.2&lt;/strong>&lt;/td>
 &lt;td>v1.25, v1.26, v1.27&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v0.3&lt;/td>
 &lt;td>&lt;strong>v1.25-latest&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>f28024e3&lt;/strong>&lt;/td>
 &lt;td>&lt;strong>v0.6.1&lt;/strong>&lt;/td>
 &lt;td>v1.24, v1.25, v1.26&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>v0.2&lt;/td>
 &lt;td>&lt;strong>v1.23-latest&lt;/strong>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;strong>v0.5.1&lt;/strong>&lt;/td>
 &lt;td>v1.24&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Config APIs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#configgatewayenvoyproxyiov1alpha1">config.gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="configgatewayenvoyproxyiov1alpha1">config.gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#configgatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the config.gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="envoygateway">EnvoyGateway&lt;a class="td-heading-self-link" href="#envoygateway" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EnvoyGateway is the schema for the envoygateways API.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>apiVersion&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>config.gateway.envoyproxy.io/v1alpha1&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>kind&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>EnvoyGateway&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>EnvoyGatewaySpec&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#envoygatewayspec">EnvoyGatewaySpec&lt;/a>&lt;/em>&lt;/td>
 &lt;td>EnvoyGatewaySpec defines the desired state of EnvoyGateway.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="envoygatewayspec">EnvoyGatewaySpec&lt;a class="td-heading-self-link" href="#envoygatewayspec" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EnvoyGatewaySpec defines the desired state of Envoy Gateway.&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>gateway&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#gateway">Gateway&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Gateway defines desired Gateway API specific configuration. If unset, default configuration parameters will apply.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>provider&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#provider">Provider&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Provider defines the desired provider and provider-specific configuration. If unspecified, the Kubernetes provider is used with default configuration parameters.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>rateLimit&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/config_types/#ratelimit">RateLimit&lt;/a>&lt;/em>&lt;/td>
 &lt;td>RateLimit defines the configuration associated with the Rate Limit service deployed by Envoy Gateway required to implement the Global Rate limiting functionality. The specific rate limit service used here is the reference implementation in Envoy. For more details visit &lt;a href="https://github.com/envoyproxy/ratelimit">https://github.com/envoyproxy/ratelimit&lt;/a>. This configuration is unneeded for &amp;ldquo;Local&amp;rdquo; rate limiting.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="envoyproxy">EnvoyProxy&lt;a class="td-heading-self-link" href="#envoyproxy" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EnvoyProxy is the schema for the envoyproxies API.&lt;/p></description></item><item><title>Config APIs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/#configgatewayenvoyproxyiov1alpha1">config.gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="configgatewayenvoyproxyiov1alpha1">config.gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#configgatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the config.gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="envoygateway">EnvoyGateway&lt;a class="td-heading-self-link" href="#envoygateway" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EnvoyGateway is the schema for the envoygateways API.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>apiVersion&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>config.gateway.envoyproxy.io/v1alpha1&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>kind&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>EnvoyGateway&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>EnvoyGatewaySpec&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/#envoygatewayspec">EnvoyGatewaySpec&lt;/a>&lt;/em>&lt;/td>
 &lt;td>EnvoyGatewaySpec defines the desired state of EnvoyGateway.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="envoygatewayfileprovider">EnvoyGatewayFileProvider&lt;a class="td-heading-self-link" href="#envoygatewayfileprovider" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EnvoyGatewayFileProvider defines configuration for the File provider.&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/#envoygatewayprovider">EnvoyGatewayProvider&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="envoygatewaykubernetesprovider">EnvoyGatewayKubernetesProvider&lt;a class="td-heading-self-link" href="#envoygatewaykubernetesprovider" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EnvoyGatewayKubernetesProvider defines configuration for the Kubernetes provider.&lt;/p></description></item><item><title>Config APIs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#configgatewayenvoyproxyiov1alpha1">config.gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="configgatewayenvoyproxyiov1alpha1">config.gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#configgatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the config.gateway.envoyproxy.io
API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#envoygateway">EnvoyGateway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="customtag">CustomTag&lt;a class="td-heading-self-link" href="#customtag" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#proxytracing">ProxyTracing&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>type&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#customtagtype">CustomTagType&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Type defines the type of custom tag.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>literal&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#literalcustomtag">LiteralCustomTag&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Literal adds hard-coded value to each span. It&amp;rsquo;s required when the type is &amp;ldquo;Literal&amp;rdquo;.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>environment&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#environmentcustomtag">EnvironmentCustomTag&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Environment adds value from environment variable to each span. It&amp;rsquo;s required when the type is &amp;ldquo;Environment&amp;rdquo;.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>requestHeader&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#requestheadercustomtag">RequestHeaderCustomTag&lt;/a>&lt;/em>&lt;/td>
 &lt;td>RequestHeader adds value from request header to each span. It&amp;rsquo;s required when the type is &amp;ldquo;RequestHeader&amp;rdquo;.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="customtagtype">CustomTagType&lt;a class="td-heading-self-link" href="#customtagtype" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;em>Underlying type:&lt;/em> &lt;code>string&lt;/code>&lt;/p></description></item><item><title>Configuration API Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/config-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/config-api/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/51">Issue 51&lt;/a> specifies the need to design an API for configuring Envoy Gateway. The control plane is configured
statically at startup and the data plane is configured dynamically through Kubernetes resources, primarily
&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Refer to the Envoy Gateway &lt;a href="../system-design/">design doc&lt;/a> for additional details regarding
Envoy Gateway terminology and configuration.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an &lt;strong>initial&lt;/strong> API to configure Envoy Gateway at startup.&lt;/li>
&lt;li>Define an &lt;strong>initial&lt;/strong> API for configuring the managed data plane, e.g. Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Implementation of the configuration APIs.&lt;/li>
&lt;li>Define the &lt;code>status&lt;/code> subresource of the configuration APIs.&lt;/li>
&lt;li>Define a &lt;strong>complete&lt;/strong> set of APIs for configuring Envoy Gateway. As stated in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/config-api/#goals">Goals&lt;/a>, this document
defines the initial configuration APIs.&lt;/li>
&lt;li>Define an API for deploying/provisioning/operating Envoy Gateway. If needed, a future Envoy Gateway operator would be
responsible for designing and implementing this type of API.&lt;/li>
&lt;li>Specify tooling for managing the API, e.g. generate protos, CRDs, controller RBAC, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="control-plane-api">Control Plane API&lt;a class="td-heading-self-link" href="#control-plane-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;code>EnvoyGateway&lt;/code> API defines the control plane configuration, e.g. Envoy Gateway. Key points of this API are:&lt;/p></description></item><item><title>Configuration API Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/config-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/design/config-api/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/51">Issue 51&lt;/a> specifies the need to design an API for configuring Envoy Gateway. The control plane is configured
statically at startup and the data plane is configured dynamically through Kubernetes resources, primarily
&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Refer to the Envoy Gateway &lt;a href="https://github.com/envoyproxy/gateway/blob/main/docs/design/SYSTEM_DESIGN.md">design doc&lt;/a> for additional details regarding
Envoy Gateway terminology and configuration.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an &lt;strong>initial&lt;/strong> API to configure Envoy Gateway at startup.&lt;/li>
&lt;li>Define an &lt;strong>initial&lt;/strong> API for configuring the managed data plane, e.g. Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Implementation of the configuration APIs.&lt;/li>
&lt;li>Define the &lt;code>status&lt;/code> subresource of the configuration APIs.&lt;/li>
&lt;li>Define a &lt;strong>complete&lt;/strong> set of APIs for configuring Envoy Gateway. As stated in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/design/config-api/#goals">Goals&lt;/a>, this document
defines the initial configuration APIs.&lt;/li>
&lt;li>Define an API for deploying/provisioning/operating Envoy Gateway. If needed, a future Envoy Gateway operator would be
responsible for designing and implementing this type of API.&lt;/li>
&lt;li>Specify tooling for managing the API, e.g. generate protos, CRDs, controller RBAC, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="control-plane-api">Control Plane API&lt;a class="td-heading-self-link" href="#control-plane-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;code>EnvoyGateway&lt;/code> API defines the control plane configuration, e.g. Envoy Gateway. Key points of this API are:&lt;/p></description></item><item><title>Configuration API Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/config-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/config-api/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/51">Issue 51&lt;/a> specifies the need to design an API for configuring Envoy Gateway. The control plane is configured
statically at startup and the data plane is configured dynamically through Kubernetes resources, primarily
&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Refer to the Envoy Gateway &lt;a href="https://github.com/envoyproxy/gateway/blob/main/docs/design/SYSTEM_DESIGN.md">design doc&lt;/a> for additional details regarding
Envoy Gateway terminology and configuration.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an &lt;strong>initial&lt;/strong> API to configure Envoy Gateway at startup.&lt;/li>
&lt;li>Define an &lt;strong>initial&lt;/strong> API for configuring the managed data plane, e.g. Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Implementation of the configuration APIs.&lt;/li>
&lt;li>Define the &lt;code>status&lt;/code> subresource of the configuration APIs.&lt;/li>
&lt;li>Define a &lt;strong>complete&lt;/strong> set of APIs for configuring Envoy Gateway. As stated in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/design/config-api/#goals">Goals&lt;/a>, this document
defines the initial configuration APIs.&lt;/li>
&lt;li>Define an API for deploying/provisioning/operating Envoy Gateway. If needed, a future Envoy Gateway operator would be
responsible for designing and implementing this type of API.&lt;/li>
&lt;li>Specify tooling for managing the API, e.g. generate protos, CRDs, controller RBAC, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="control-plane-api">Control Plane API&lt;a class="td-heading-self-link" href="#control-plane-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;code>EnvoyGateway&lt;/code> API defines the control plane configuration, e.g. Envoy Gateway. Key points of this API are:&lt;/p></description></item><item><title>Configuration API Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/config-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/config-api/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/51">Issue 51&lt;/a> specifies the need to design an API for configuring Envoy Gateway. The control plane is configured
statically at startup and the data plane is configured dynamically through Kubernetes resources, primarily
&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Refer to the Envoy Gateway &lt;a href="https://github.com/envoyproxy/gateway/blob/main/docs/design/SYSTEM_DESIGN.md">design doc&lt;/a> for additional details regarding
Envoy Gateway terminology and configuration.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an &lt;strong>initial&lt;/strong> API to configure Envoy Gateway at startup.&lt;/li>
&lt;li>Define an &lt;strong>initial&lt;/strong> API for configuring the managed data plane, e.g. Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Implementation of the configuration APIs.&lt;/li>
&lt;li>Define the &lt;code>status&lt;/code> subresource of the configuration APIs.&lt;/li>
&lt;li>Define a &lt;strong>complete&lt;/strong> set of APIs for configuring Envoy Gateway. As stated in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/design/config-api/#goals">Goals&lt;/a>, this document
defines the initial configuration APIs.&lt;/li>
&lt;li>Define an API for deploying/provisioning/operating Envoy Gateway. If needed, a future Envoy Gateway operator would be
responsible for designing and implementing this type of API.&lt;/li>
&lt;li>Specify tooling for managing the API, e.g. generate protos, CRDs, controller RBAC, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="control-plane-api">Control Plane API&lt;a class="td-heading-self-link" href="#control-plane-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;code>EnvoyGateway&lt;/code> API defines the control plane configuration, e.g. Envoy Gateway. Key points of this API are:&lt;/p></description></item><item><title>Configuration API Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/config-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/config-api/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/51">Issue 51&lt;/a> specifies the need to design an API for configuring Envoy Gateway. The control plane is configured
statically at startup and the data plane is configured dynamically through Kubernetes resources, primarily
&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Refer to the Envoy Gateway &lt;a href="https://github.com/envoyproxy/gateway/blob/main/docs/design/SYSTEM_DESIGN.md">design doc&lt;/a> for additional details regarding
Envoy Gateway terminology and configuration.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an &lt;strong>initial&lt;/strong> API to configure Envoy Gateway at startup.&lt;/li>
&lt;li>Define an &lt;strong>initial&lt;/strong> API for configuring the managed data plane, e.g. Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Implementation of the configuration APIs.&lt;/li>
&lt;li>Define the &lt;code>status&lt;/code> subresource of the configuration APIs.&lt;/li>
&lt;li>Define a &lt;strong>complete&lt;/strong> set of APIs for configuring Envoy Gateway. As stated in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/design/config-api/#goals">Goals&lt;/a>, this document
defines the initial configuration APIs.&lt;/li>
&lt;li>Define an API for deploying/provisioning/operating Envoy Gateway. If needed, a future Envoy Gateway operator would be
responsible for designing and implementing this type of API.&lt;/li>
&lt;li>Specify tooling for managing the API, e.g. generate protos, CRDs, controller RBAC, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="control-plane-api">Control Plane API&lt;a class="td-heading-self-link" href="#control-plane-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;code>EnvoyGateway&lt;/code> API defines the control plane configuration, e.g. Envoy Gateway. Key points of this API are:&lt;/p></description></item><item><title>Configuration API Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/config-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/config-api/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/51">Issue 51&lt;/a> specifies the need to design an API for configuring Envoy Gateway. The control plane is configured
statically at startup and the data plane is configured dynamically through Kubernetes resources, primarily
&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Refer to the Envoy Gateway &lt;a href="../system-design/">design doc&lt;/a> for additional details regarding
Envoy Gateway terminology and configuration.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an &lt;strong>initial&lt;/strong> API to configure Envoy Gateway at startup.&lt;/li>
&lt;li>Define an &lt;strong>initial&lt;/strong> API for configuring the managed data plane, e.g. Envoy proxies.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Implementation of the configuration APIs.&lt;/li>
&lt;li>Define the &lt;code>status&lt;/code> subresource of the configuration APIs.&lt;/li>
&lt;li>Define a &lt;strong>complete&lt;/strong> set of APIs for configuring Envoy Gateway. As stated in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/design/config-api/#goals">Goals&lt;/a>, this document
defines the initial configuration APIs.&lt;/li>
&lt;li>Define an API for deploying/provisioning/operating Envoy Gateway. If needed, a future Envoy Gateway operator would be
responsible for designing and implementing this type of API.&lt;/li>
&lt;li>Specify tooling for managing the API, e.g. generate protos, CRDs, controller RBAC, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="control-plane-api">Control Plane API&lt;a class="td-heading-self-link" href="#control-plane-api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;code>EnvoyGateway&lt;/code> API defines the control plane configuration, e.g. Envoy Gateway. Key points of this API are:&lt;/p></description></item><item><title>Connection Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/connection-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/connection-limit/</guid><description>&lt;p>The connection limit features allows users to limit the number of concurrently active TCP connections on a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a> or a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.Listener">Listener&lt;/a>.
When the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/connection_limit_filter">connection limit&lt;/a> is reached, new connections are closed immediately by Envoy proxy. It&amp;rsquo;s possible to configure a delay for connection rejection.&lt;/p>
&lt;p>Users may want to limit the number of connections for several reasons:&lt;/p>
&lt;ul>
&lt;li>Protect resources like CPU and Memory.&lt;/li>
&lt;li>Ensure that different listeners can receive a fair share of global resources.&lt;/li>
&lt;li>Protect from malicious activity like DoS attacks.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#clienttrafficpolicy">Client Traffic Policy&lt;/a> that allows the user to describe their desired connection limit settings.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a>.&lt;/p></description></item><item><title>Connection Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/connection-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/connection-limit/</guid><description>&lt;p>The connection limit features allows users to limit the number of concurrently active TCP connections on a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a> or a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.Listener">Listener&lt;/a>.
When the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/connection_limit_filter">connection limit&lt;/a> is reached, new connections are closed immediately by Envoy proxy. It&amp;rsquo;s possible to configure a delay for connection rejection.&lt;/p>
&lt;p>Users may want to limit the number of connections for several reasons:&lt;/p>
&lt;ul>
&lt;li>Protect resources like CPU and Memory.&lt;/li>
&lt;li>Ensure that different listeners can receive a fair share of global resources.&lt;/li>
&lt;li>Protect from malicious activity like DoS attacks.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#clienttrafficpolicy">Client Traffic Policy&lt;/a> that allows the user to describe their desired connection limit settings.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a>.&lt;/p></description></item><item><title>Connection Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/connection-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/connection-limit/</guid><description>&lt;p>The connection limit features allows users to limit the number of concurrently active TCP connections on a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a> or a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.Listener">Listener&lt;/a>.
When the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/connection_limit_filter">connection limit&lt;/a> is reached, new connections are closed immediately by Envoy proxy. It&amp;rsquo;s possible to configure a delay for connection rejection.&lt;/p>
&lt;p>Users may want to limit the number of connections for several reasons:&lt;/p>
&lt;ul>
&lt;li>Protect resources like CPU and Memory.&lt;/li>
&lt;li>Ensure that different listeners can receive a fair share of global resources.&lt;/li>
&lt;li>Protect from malicious activity like DoS attacks.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#clienttrafficpolicy">Client Traffic Policy&lt;/a> that allows the user to describe their desired connection limit settings.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a>.&lt;/p></description></item><item><title>Connection Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/connection-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/connection-limit/</guid><description>&lt;p>The connection limit features allows users to limit the number of concurrently active TCP connections on a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a> or a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.Listener">Listener&lt;/a>.
When the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/connection_limit_filter">connection limit&lt;/a> is reached, new connections are closed immediately by Envoy proxy. It&amp;rsquo;s possible to configure a delay for connection rejection.&lt;/p>
&lt;p>Users may want to limit the number of connections for several reasons:&lt;/p>
&lt;ul>
&lt;li>Protect resources like CPU and Memory.&lt;/li>
&lt;li>Ensure that different listeners can receive a fair share of global resources.&lt;/li>
&lt;li>Protect from malicious activity like DoS attacks.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#clienttrafficpolicy">Client Traffic Policy&lt;/a> that allows the user to describe their desired connection limit settings.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a>.&lt;/p></description></item><item><title>CORS</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/cors/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing (CORS)&lt;/a> on Envoy Gateway.
CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different
domain.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure CORS.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>CORS</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/cors/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing (CORS)&lt;/a> on Envoy Gateway.
CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different
domain.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure CORS.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>CORS</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/cors/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing (CORS)&lt;/a> on Envoy Gateway.
CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different
domain.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure CORS.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>CORS</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/cors/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing (CORS)&lt;/a> on Envoy Gateway.
CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different
domain.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure CORS.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>CORS</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/cors/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing (CORS)&lt;/a> on Envoy Gateway.
CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different
domain.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure CORS.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>CORS</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/cors/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">Cross-Origin Resource Sharing (CORS)&lt;/a> on Envoy Gateway.
CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different
domain.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure CORS.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides an &lt;a href="../../../api/extension_types#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in a Gateway and GatewayClass, allowing cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides an &lt;a href="../../../api/extension_types#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in a Gateway and GatewayClass, allowing cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides a &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/config_types/#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in GatewayClass y cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="add-gatewayclass-parametersref">Add GatewayClass ParametersRef&lt;a class="td-heading-self-link" href="#add-gatewayclass-parametersref" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>First, you need to add ParametersRef in GatewayClass, and refer to EnvoyProxy Config:&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides an &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/config_types/#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in GatewayClass, allowing cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="add-gatewayclass-parametersref">Add GatewayClass ParametersRef&lt;a class="td-heading-self-link" href="#add-gatewayclass-parametersref" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>First, you need to add ParametersRef in GatewayClass, and refer to EnvoyProxy Config:&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides an &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in GatewayClass, allowing cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="add-gatewayclass-parametersref">Add GatewayClass ParametersRef&lt;a class="td-heading-self-link" href="#add-gatewayclass-parametersref" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>First, you need to add ParametersRef in GatewayClass, and refer to EnvoyProxy Config:&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/operations/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/operations/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides an &lt;a href="../../../api/extension_types#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in GatewayClass, allowing cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="add-gatewayclass-parametersref">Add GatewayClass ParametersRef&lt;a class="td-heading-self-link" href="#add-gatewayclass-parametersref" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>First, you need to add ParametersRef in GatewayClass, and refer to EnvoyProxy Config:&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/operations/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/operations/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides an &lt;a href="../../../api/extension_types#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in a Gateway and GatewayClass, allowing cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Customize EnvoyProxy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/customize-envoyproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/customize-envoyproxy/</guid><description>&lt;p>Envoy Gateway provides an &lt;a href="../../../api/extension_types#envoyproxy">EnvoyProxy&lt;/a> CRD that can be linked to the ParametersRef
in a Gateway and GatewayClass, allowing cluster admins to customize the managed EnvoyProxy Deployment and
Service. To learn more about GatewayClass and ParametersRef, please refer to &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Data Plane Observability: Accesslog</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/proxy-accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/proxy-accesslog/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy supports extensible accesslog to different sinks, File, gRPC etc.&lt;/p>
&lt;p>Envoy supports customizable access log formats using predefined fields as well as arbitrary HTTP request and response headers.&lt;/p>
&lt;p>Envoy supports several built-in access log filters and extension filters that are registered at runtime.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since accesslog is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config access log formats and sinks per &lt;code>EnvoyProxy&lt;/code>.&lt;/p></description></item><item><title>Data Plane Observability: Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/proxy-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/proxy-metrics/</guid><description>&lt;p>This document aims to cover all aspects of envoy gateway data plane metrics observability.&lt;/p>


&lt;div class="alert alert-secondary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>

 &lt;strong>Control plane&lt;/strong> observability (while important) is outside of scope for this document. For control plane observability, refer to &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/eg-metrics/">here&lt;/a>.

&lt;/div>

&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy provide robust platform for metrics, Envoy support three different kinds of stats: counter, gauges, histograms.&lt;/p>
&lt;p>Envoy enables prometheus format output via the &lt;code>/stats/prometheus&lt;/code> &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/operations/admin">admin endpoint&lt;/a>.&lt;/p>
&lt;p>Envoy support different kinds of sinks, but EG will only support &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/stat_sinks/open_telemetry/v3/open_telemetry.proto">Open Telemetry sink&lt;/a>.&lt;/p></description></item><item><title>Data Plane Observability: Tracing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/proxy-tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/proxy-tracing/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy supports extensible tracing to different sinks, Zipkin, OpenTelemetry etc. Overview of Envoy tracing can be found &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing">here&lt;/a>.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since tracing is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config tracing per &lt;code>EnvoyProxy&lt;/code>.&lt;/p>
&lt;p>Only OpenTelemetry sink can be configured currently, you can use &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> to export to other tracing backends.&lt;/p></description></item><item><title>Debug support in Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/pprof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/pprof/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway exposes endpoints at &lt;code>localhost:19000/debug/pprof&lt;/code> to run Golang profiles to aid in live debugging.&lt;/p>
&lt;p>The endpoints are equivalent to those found in the http/pprof package. &lt;code>/debug/pprof/&lt;/code> returns an HTML page listing the available profiles.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add admin server to Envoy Gateway control plane, separated with admin server.&lt;/li>
&lt;li>Add pprof support to Envoy Gateway control plane.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to custom admin server configuration.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to open envoy gateway config dump in logs.&lt;/li>
&lt;/ul>
&lt;p>The following are the different types of profiles end-user can run:&lt;/p></description></item><item><title>Debug support in Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/pprof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/pprof/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway exposes endpoints at &lt;code>localhost:19000/debug/pprof&lt;/code> to run Golang profiles to aid in live debugging.&lt;/p>
&lt;p>The endpoints are equivalent to those found in the http/pprof package. &lt;code>/debug/pprof/&lt;/code> returns an HTML page listing the available profiles.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add admin server to Envoy Gateway control plane, separated with admin server.&lt;/li>
&lt;li>Add pprof support to Envoy Gateway control plane.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to custom admin server configuration.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to open envoy gateway config dump in logs.&lt;/li>
&lt;/ul>
&lt;p>The following are the different types of profiles end-user can run:&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/deployment-mode/</guid><description>&lt;h2 id="deployment-modes">Deployment modes&lt;a class="td-heading-self-link" href="#deployment-modes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="one-gatewayclass-per-envoy-gateway-controller">One GatewayClass per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resource under one controller.
This is the simplest deployment mode and is suitable for scenarios where each Gateway needs to have its own dedicated set of resources and configurations.&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-gatewayclasses-per-envoy-gateway-controller">Multiple GatewayClasses per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#multiple-gatewayclasses-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with multiple &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resources under one controller.&lt;/li>
&lt;li>Support for accepting multiple GatewayClasses was added &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="separate-envoy-gateway-controllers">Separate Envoy Gateway Controllers&lt;a class="td-heading-self-link" href="#separate-envoy-gateway-controllers" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>If you&amp;rsquo;ve instantiated multiple GatewayClasses, you can also run separate Envoy Gateway controllers in different namespaces, linking a GatewayClass to each of them for multi-tenancy.
Please follow the example &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/deployment-mode/#multi-tenancy">Multi-tenancy&lt;/a>.&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/deployment-mode/</guid><description>&lt;h2 id="deployment-modes">Deployment modes&lt;a class="td-heading-self-link" href="#deployment-modes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="one-gatewayclass-per-envoy-gateway-controller">One GatewayClass per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resource under one controller.
This is the simplest deployment mode and is suitable for scenarios where each Gateway needs to have its own dedicated set of resources and configurations.&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-gatewayclasses-per-envoy-gateway-controller">Multiple GatewayClasses per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#multiple-gatewayclasses-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with multiple &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resources under one controller.&lt;/li>
&lt;li>Support for accepting multiple GatewayClasses was added &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="separate-envoy-gateway-controllers">Separate Envoy Gateway Controllers&lt;a class="td-heading-self-link" href="#separate-envoy-gateway-controllers" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>If you&amp;rsquo;ve instantiated multiple GatewayClasses, you can also run separate Envoy Gateway controllers in different namespaces, linking a GatewayClass to each of them for multi-tenancy.
Please follow the example &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/deployment-mode/#multi-tenancy">Multi-tenancy&lt;/a>.&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/deployment-mode/</guid><description>&lt;h3 id="one-gatewayclass-per-envoy-gateway">One GatewayClass per Envoy Gateway&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Envoy Gateway can accept a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>
resource. If you&amp;rsquo;ve instantiated multiple GatewayClasses, we recommend running multiple Envoy Gateway controllers
in different namespaces, linking a GatewayClass to each of them.&lt;/li>
&lt;li>Support for accepting multiple GatewayClass is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="supported-modes">Supported Modes&lt;a class="td-heading-self-link" href="#supported-modes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>The current deployment model is - Envoy Gateway &lt;strong>watches&lt;/strong> for resources such a &lt;code>Service&lt;/code> &amp;amp; &lt;code>HTTPRoute&lt;/code> in &lt;strong>all&lt;/strong> namespaces
and &lt;strong>creates&lt;/strong> managed data plane resources such as EnvoyProxy &lt;code>Deployment&lt;/code> in the &lt;strong>namespace where Envoy Gateway is running&lt;/strong>.&lt;/li>
&lt;li>Support for alternate deployment modes is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1117">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="multi-tenancy">Multi-tenancy&lt;a class="td-heading-self-link" href="#multi-tenancy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes-1">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes-1" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>A &lt;code>tenant&lt;/code> is a group within an organization (e.g. a team or department) who shares organizational resources. We recommend
each &lt;code>tenant&lt;/code> deploy their own Envoy Gateway controller in their respective &lt;code>namespace&lt;/code>. Below is an example of deploying Envoy Gateway
by the &lt;code>marketing&lt;/code> and &lt;code>product&lt;/code> teams in separate namespaces.&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/deployment-mode/</guid><description>&lt;h3 id="one-gatewayclass-per-envoy-gateway">One GatewayClass per Envoy Gateway&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Envoy Gateway can accept a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>
resource. If you&amp;rsquo;ve instantiated multiple GatewayClasses, we recommend running multiple Envoy Gateway controllers
in different namespaces, linking a GatewayClass to each of them.&lt;/li>
&lt;li>Support for accepting multiple GatewayClass is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="supported-modes">Supported Modes&lt;a class="td-heading-self-link" href="#supported-modes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>The current deployment model is - Envoy Gateway &lt;strong>watches&lt;/strong> for resources such a &lt;code>Service&lt;/code> &amp;amp; &lt;code>HTTPRoute&lt;/code> in &lt;strong>all&lt;/strong> namespaces
and &lt;strong>creates&lt;/strong> managed data plane resources such as EnvoyProxy &lt;code>Deployment&lt;/code> in the &lt;strong>namespace where Envoy Gateway is running&lt;/strong>.&lt;/li>
&lt;li>Support for alternate deployment modes is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1117">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="multi-tenancy">Multi-tenancy&lt;a class="td-heading-self-link" href="#multi-tenancy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes-1">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes-1" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>A &lt;code>tenant&lt;/code> is a group within an organization (e.g. a team or department) who shares organizational resources. We recommend
each &lt;code>tenant&lt;/code> deploy their own Envoy Gateway controller in their respective &lt;code>namespace&lt;/code>. Below is an example of deploying Envoy Gateway
by the &lt;code>marketing&lt;/code> and &lt;code>product&lt;/code> teams in separate namespaces.&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/deployment-mode/</guid><description>&lt;h3 id="one-gatewayclass-per-envoy-gateway">One GatewayClass per Envoy Gateway&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Envoy Gateway can accept a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>
resource. If you&amp;rsquo;ve instantiated multiple GatewayClasses, we recommend running multiple Envoy Gateway controllers
in different namespaces, linking a GatewayClass to each of them.&lt;/li>
&lt;li>Support for accepting multiple GatewayClass is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="supported-modes">Supported Modes&lt;a class="td-heading-self-link" href="#supported-modes" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>The default deployment model is - Envoy Gateway &lt;strong>watches&lt;/strong> for resources such a &lt;code>Service&lt;/code> &amp;amp; &lt;code>HTTPRoute&lt;/code> in &lt;strong>all&lt;/strong> namespaces
and &lt;strong>creates&lt;/strong> managed data plane resources such as EnvoyProxy &lt;code>Deployment&lt;/code> in the &lt;strong>namespace where Envoy Gateway is running&lt;/strong>.&lt;/li>
&lt;li>Envoy Gateway also supports &lt;strong>Namespaced&lt;/strong> deployment mode, you can watch resources in the specific namespaces by assigning
&lt;code>EnvoyGateway.provider.kubernetes.watch.namespaces&lt;/code> and &lt;strong>creates&lt;/strong> managed data plane resources in the &lt;strong>namespace where Envoy Gateway is running&lt;/strong>.&lt;/li>
&lt;li>Support for alternate deployment modes is being tracked &lt;a href="https://github.com/envoyproxy/gateway/issues/1117">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="multi-tenancy">Multi-tenancy&lt;a class="td-heading-self-link" href="#multi-tenancy" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;h4 id="kubernetes-1">Kubernetes&lt;a class="td-heading-self-link" href="#kubernetes-1" aria-label="Heading self-link">&lt;/a>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>A &lt;code>tenant&lt;/code> is a group within an organization (e.g. a team or department) who shares organizational resources. We recommend
each &lt;code>tenant&lt;/code> deploy their own Envoy Gateway controller in their respective &lt;code>namespace&lt;/code>. Below is an example of deploying Envoy Gateway
by the &lt;code>marketing&lt;/code> and &lt;code>product&lt;/code> teams in separate namespaces.&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/operations/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/operations/deployment-mode/</guid><description>&lt;h2 id="deployment-modes">Deployment modes&lt;a class="td-heading-self-link" href="#deployment-modes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="one-gatewayclass-per-envoy-gateway-controller">One GatewayClass per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resource under one controller.
This is the simplest deployment mode and is suitable for scenarios where each Gateway needs to have its own dedicated set of resources and configurations.&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-gatewayclasses-per-envoy-gateway-controller">Multiple GatewayClasses per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#multiple-gatewayclasses-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with multiple &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resources under one controller.&lt;/li>
&lt;li>Support for accepting multiple GatewayClasses was added &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="separate-envoy-gateway-controllers">Separate Envoy Gateway Controllers&lt;a class="td-heading-self-link" href="#separate-envoy-gateway-controllers" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>If you&amp;rsquo;ve instantiated multiple GatewayClasses, you can also run separate Envoy Gateway controllers in different namespaces, linking a GatewayClass to each of them for multi-tenancy.
Please follow the example &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/operations/deployment-mode/#multi-tenancy">Multi-tenancy&lt;/a>.&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/operations/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/operations/deployment-mode/</guid><description>&lt;h2 id="deployment-modes">Deployment modes&lt;a class="td-heading-self-link" href="#deployment-modes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="one-gatewayclass-per-envoy-gateway-controller">One GatewayClass per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resource under one controller.
This is the simplest deployment mode and is suitable for scenarios where each Gateway needs to have its own dedicated set of resources and configurations.&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-gatewayclasses-per-envoy-gateway-controller">Multiple GatewayClasses per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#multiple-gatewayclasses-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with multiple &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resources under one controller.&lt;/li>
&lt;li>Support for accepting multiple GatewayClasses was added &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="separate-envoy-gateway-controllers">Separate Envoy Gateway Controllers&lt;a class="td-heading-self-link" href="#separate-envoy-gateway-controllers" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>If you&amp;rsquo;ve instantiated multiple GatewayClasses, you can also run separate Envoy Gateway controllers in different namespaces, linking a GatewayClass to each of them for multi-tenancy.
Please follow the example &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/operations/deployment-mode/#multi-tenancy">Multi-tenancy&lt;/a>.&lt;/p></description></item><item><title>Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/deployment-mode/</guid><description>&lt;h2 id="deployment-modes">Deployment modes&lt;a class="td-heading-self-link" href="#deployment-modes" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h3 id="one-gatewayclass-per-envoy-gateway-controller">One GatewayClass per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#one-gatewayclass-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with a single &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resource under one controller.
This is the simplest deployment mode and is suitable for scenarios where each Gateway needs to have its own dedicated set of resources and configurations.&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-gatewayclasses-per-envoy-gateway-controller">Multiple GatewayClasses per Envoy Gateway Controller&lt;a class="td-heading-self-link" href="#multiple-gatewayclasses-per-envoy-gateway-controller" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>An Envoy Gateway is associated with multiple &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a> resources under one controller.&lt;/li>
&lt;li>Support for accepting multiple GatewayClasses was added &lt;a href="https://github.com/envoyproxy/gateway/issues/1231">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="separate-envoy-gateway-controllers">Separate Envoy Gateway Controllers&lt;a class="td-heading-self-link" href="#separate-envoy-gateway-controllers" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>If you&amp;rsquo;ve instantiated multiple GatewayClasses, you can also run separate Envoy Gateway controllers in different namespaces, linking a GatewayClass to each of them for multi-tenancy.
Please follow the example &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/deployment-mode/#multi-tenancy">Multi-tenancy&lt;/a>.&lt;/p></description></item><item><title>Direct Response</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/direct-response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/direct-response/</guid><description>&lt;p>Direct responses are valuable in cases where you want the gateway itself
to handle certain requests without forwarding them to backend services.
This task shows you how to configure them.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="testing-direct-response">Testing Direct Response&lt;a class="td-heading-self-link" href="#testing-direct-response" aria-label="Heading self-link">&lt;/a>&lt;/h2>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="apply from stdin" aria-controls="tabs-00-00" aria-selected="true">
 Apply from stdin
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="apply from file" aria-controls="tabs-00-01" aria-selected="false">
 Apply from file
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.networking.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRoute
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> parentRefs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - name: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> hostnames:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;www.example.com&amp;#34; 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> rules:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">data:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> response.body: &amp;#39;{&amp;#34;error&amp;#34;: &amp;#34;Internal Server Error&amp;#34;}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: text/plain
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 503
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: Inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> inline: &amp;#34;Oops! Your request is not found.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: application/json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 500
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: ValueRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> valueRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;p>Save and apply the following resource to your cluster:&lt;/p></description></item><item><title>Direct Response</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/direct-response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/direct-response/</guid><description>&lt;p>Direct responses are valuable in cases where you want the gateway itself
to handle certain requests without forwarding them to backend services.
This task shows you how to configure them.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="testing-direct-response">Testing Direct Response&lt;a class="td-heading-self-link" href="#testing-direct-response" aria-label="Heading self-link">&lt;/a>&lt;/h2>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="apply from stdin" aria-controls="tabs-00-00" aria-selected="true">
 Apply from stdin
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="apply from file" aria-controls="tabs-00-01" aria-selected="false">
 Apply from file
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.networking.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRoute
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> parentRefs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - name: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> hostnames:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;www.example.com&amp;#34; 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> rules:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">data:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> response.body: &amp;#39;{&amp;#34;error&amp;#34;: &amp;#34;Internal Server Error&amp;#34;}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: text/plain
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 503
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: Inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> inline: &amp;#34;Oops! Your request is not found.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: application/json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 500
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: ValueRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> valueRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;p>Save and apply the following resource to your cluster:&lt;/p></description></item><item><title>Direct Response</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/direct-response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/direct-response/</guid><description>&lt;p>Direct responses are valuable in cases where you want the gateway itself
to handle certain requests without forwarding them to backend services.
This task shows you how to configure them.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="testing-direct-response">Testing Direct Response&lt;a class="td-heading-self-link" href="#testing-direct-response" aria-label="Heading self-link">&lt;/a>&lt;/h2>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="apply from stdin" aria-controls="tabs-00-00" aria-selected="true">
 Apply from stdin
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="apply from file" aria-controls="tabs-00-01" aria-selected="false">
 Apply from file
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.networking.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRoute
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> parentRefs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - name: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> hostnames:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;www.example.com&amp;#34; 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> rules:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">data:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> response.body: &amp;#39;{&amp;#34;error&amp;#34;: &amp;#34;Internal Server Error&amp;#34;}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: text/plain
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 503
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: Inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> inline: &amp;#34;Oops! Your request is not found.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: application/json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 500
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: ValueRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> valueRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;p>Save and apply the following resource to your cluster:&lt;/p></description></item><item><title>egctl Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/egctl/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EG should provide a command line tool with following capabilities:&lt;/p>
&lt;ul>
&lt;li>Collect configuration from envoy proxy and gateway&lt;/li>
&lt;li>Analyse system configuration to diagnose any issues in envoy gateway&lt;/li>
&lt;/ul>
&lt;p>This tool is named &lt;code>egctl&lt;/code>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;a class="td-heading-self-link" href="#syntax" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Use the following syntax to run &lt;code>egctl&lt;/code> commands from your terminal window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">egctl [command] [entity] [name] [flags]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>command&lt;/code>, &lt;code>name&lt;/code>, and &lt;code>flags&lt;/code> are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>command&lt;/code>: Specifies the operation that you want to perform on one or more resources,
for example &lt;code>config&lt;/code>, &lt;code>version&lt;/code>.&lt;/p></description></item><item><title>egctl Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/egctl/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EG should provide a command line tool with following capabilities:&lt;/p>
&lt;ul>
&lt;li>Collect configuration from envoy proxy and gateway&lt;/li>
&lt;li>Analyse system configuration to diagnose any issues in envoy gateway&lt;/li>
&lt;/ul>
&lt;p>This tool is named &lt;code>egctl&lt;/code>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;a class="td-heading-self-link" href="#syntax" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Use the following syntax to run &lt;code>egctl&lt;/code> commands from your terminal window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">egctl [command] [entity] [name] [flags]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>command&lt;/code>, &lt;code>name&lt;/code>, and &lt;code>flags&lt;/code> are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>command&lt;/code>: Specifies the operation that you want to perform on one or more resources,
for example &lt;code>config&lt;/code>, &lt;code>version&lt;/code>.&lt;/p></description></item><item><title>egctl Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/egctl/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EG should provide a command line tool with following capabilities:&lt;/p>
&lt;ul>
&lt;li>Collect configuration from envoy proxy and gateway&lt;/li>
&lt;li>Analyse system configuration to diagnose any issues in envoy gateway&lt;/li>
&lt;/ul>
&lt;p>This tool is named &lt;code>egctl&lt;/code>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;a class="td-heading-self-link" href="#syntax" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Use the following syntax to run &lt;code>egctl&lt;/code> commands from your terminal window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">egctl [command] [entity] [name] [flags]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>command&lt;/code>, &lt;code>name&lt;/code>, and &lt;code>flags&lt;/code> are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>command&lt;/code>: Specifies the operation that you want to perform on one or more resources,
for example &lt;code>config&lt;/code>, &lt;code>version&lt;/code>.&lt;/p></description></item><item><title>egctl Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/egctl/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EG should provide a command line tool with following capabilities:&lt;/p>
&lt;ul>
&lt;li>Collect configuration from envoy proxy and gateway&lt;/li>
&lt;li>Analyse system configuration to diagnose any issues in envoy gateway&lt;/li>
&lt;/ul>
&lt;p>This tool is named &lt;code>egctl&lt;/code>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;a class="td-heading-self-link" href="#syntax" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Use the following syntax to run &lt;code>egctl&lt;/code> commands from your terminal window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">egctl [command] [entity] [name] [flags]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>command&lt;/code>, &lt;code>name&lt;/code>, and &lt;code>flags&lt;/code> are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>command&lt;/code>: Specifies the operation that you want to perform on one or more resources,
for example &lt;code>config&lt;/code>, &lt;code>version&lt;/code>.&lt;/p></description></item><item><title>Envoy Gateway Extensions Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/extending-envoy-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/extending-envoy-gateway/</guid><description>&lt;p>As outlined in the &lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOALS.md#extensibility">official goals&lt;/a> for the Envoy Gateway project, one of the main goals is to &amp;ldquo;provide a common foundation for vendors to build value-added products
without having to re-engineer fundamental interactions&amp;rdquo;. Development of the Envoy Gateway project has been focused on developing the core features for the project and
Kubernetes Gateway API conformance. This system focuses on the “common foundation for vendors” component by introducing a way for vendors to extend Envoy Gateway.&lt;/p></description></item><item><title>Envoy Gateway Extensions Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/extending-envoy-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/extending-envoy-gateway/</guid><description>&lt;p>As outlined in the &lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOALS.md#extensibility">official goals&lt;/a> for the Envoy Gateway project, one of the main goals is to &amp;ldquo;provide a common foundation for vendors to build value-added products
without having to re-engineer fundamental interactions&amp;rdquo;. Development of the Envoy Gateway project has been focused on developing the core features for the project and
Kubernetes Gateway API conformance. This system focuses on the “common foundation for vendors” component by introducing a way for vendors to extend Envoy Gateway.&lt;/p></description></item><item><title>Envoy Gateway Extensions Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/extending-envoy-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/extending-envoy-gateway/</guid><description>&lt;p>As outlined in the &lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOALS.md#extensibility">official goals&lt;/a> for the Envoy Gateway project, one of the main goals is to &amp;ldquo;provide a common foundation for vendors to build value-added products
without having to re-engineer fundamental interactions&amp;rdquo;. Development of the Envoy Gateway project has been focused on developing the core features for the project and
Kubernetes Gateway API conformance. This system focuses on the “common foundation for vendors” component by introducing a way for vendors to extend Envoy Gateway.&lt;/p></description></item><item><title>Envoy Gateway Extensions Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/extending-envoy-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/extending-envoy-gateway/</guid><description>&lt;p>As outlined in the &lt;a href="../goals#extensibility">official goals&lt;/a> for the Envoy Gateway project, one of the main goals is to &amp;ldquo;provide a common foundation for vendors to build value-added products
without having to re-engineer fundamental interactions&amp;rdquo;. Development of the Envoy Gateway project has been focused on developing the core features for the project and
Kubernetes Gateway API conformance. This system focuses on the “common foundation for vendors” component by introducing a way for vendors to extend Envoy Gateway.&lt;/p></description></item><item><title>Envoy Gateway Resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/concepts/concepts_overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/concepts/concepts_overview/</guid><description>&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/envoy-gateway-resources-overview.png">&lt;/p>
&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h3 id="kubernetes-gateway-api-resources">Kubernetes Gateway API Resources&lt;a class="td-heading-self-link" href="#kubernetes-gateway-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>GatewayClass:&lt;/strong> Defines a class of Gateways with common configuration.&lt;/li>
&lt;li>&lt;strong>Gateway:&lt;/strong> Specifies how traffic can enter the cluster.&lt;/li>
&lt;li>&lt;strong>Routes:&lt;/strong> &lt;strong>HTTPRoute, GRPCRoute, TLSRoute, TCPRoute, UDPRoute:&lt;/strong> Define routing rules for different types of traffic.&lt;/li>
&lt;/ul>
&lt;h3 id="envoy-gateway-eg-api-resources">Envoy Gateway (EG) API Resources&lt;a class="td-heading-self-link" href="#envoy-gateway-eg-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>EnvoyProxy:&lt;/strong> Represents the deployment and configuration of the Envoy proxy within a Kubernetes cluster, managing its lifecycle and settings.&lt;/li>
&lt;li>&lt;strong>EnvoyPatchPolicy, ClientTrafficPolicy, SecurityPolicy, BackendTrafficPolicy, EnvoyExtensionPolicy, BackendTLSPolicy:&lt;/strong> Additional policies and configurations specific to Envoy Gateway.&lt;/li>
&lt;li>&lt;strong>Backend:&lt;/strong> A resource that makes routing to cluster-external backends easier and makes access to external processes via Unix Domain Sockets possible.&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Resource&lt;/th>
 &lt;th>API&lt;/th>
 &lt;th>Required&lt;/th>
 &lt;th>Purpose&lt;/th>
 &lt;th>References&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>Core&lt;/td>
 &lt;td>Defines a class of Gateways with common configuration.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>GatewayClass&lt;/td>
 &lt;td>Specifies how traffic can enter the cluster.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TLSRoute">TLSRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Define routing rules for different types of traffic. &lt;strong>Note:&lt;/strong>&lt;em>For simplicity these resources are referenced collectively as Route in the References column&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/backend/">Backend&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>N/A&lt;/td>
 &lt;td>Used for routing to cluster-external backends using FQDN or IP. Can also be used when you want to extend Envoy with external processes accessed via Unix Domain Sockets.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Specifies policies for handling client traffic, including rate limiting, retries, and other client-specific configurations.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway, Route&lt;/td>
 &lt;td>Specifies policies for traffic directed towards backend services, including load balancing, health checks, and failover strategies. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Gateway, Route&lt;/td>
 &lt;td>Defines security-related policies such as authentication, authorization, and encryption settings for traffic handled by Envoy Gateway. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Service&lt;/td>
 &lt;td>Defines TLS settings for backend connections, including certificate management, TLS version settings, and other security configurations. This policy is applied to Kubernetes Services.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass, Gateway&lt;/td>
 &lt;td>The EnvoyProxy resource represents the deployment and configuration of the Envoy proxy itself within a Kubernetes cluster, managing its lifecycle and settings. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass, Gateway&lt;/td>
 &lt;td>This policy defines custom patches to be applied to Envoy Gateway resources, allowing users to tailor the configuration to their specific needs. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>Gateway, Route, Backend&lt;/td>
 &lt;td>Allows for the configuration of Envoy proxy extensions, enabling custom behavior and functionality. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#httproutefilter">HTTPRouteFilter&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>HTTPRoute&lt;/td>
 &lt;td>Allows for the additional request/response processing.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Envoy Gateway Resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/concepts/concepts_overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/concepts/concepts_overview/</guid><description>&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/envoy-gateway-resources-overview.png">&lt;/p>
&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h3 id="kubernetes-gateway-api-resources">Kubernetes Gateway API Resources&lt;a class="td-heading-self-link" href="#kubernetes-gateway-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>GatewayClass:&lt;/strong> Defines a class of Gateways with common configuration.&lt;/li>
&lt;li>&lt;strong>Gateway:&lt;/strong> Specifies how traffic can enter the cluster.&lt;/li>
&lt;li>&lt;strong>Routes:&lt;/strong> &lt;strong>HTTPRoute, GRPCRoute, TLSRoute, TCPRoute, UDPRoute:&lt;/strong> Define routing rules for different types of traffic.&lt;/li>
&lt;/ul>
&lt;h3 id="envoy-gateway-eg-api-resources">Envoy Gateway (EG) API Resources&lt;a class="td-heading-self-link" href="#envoy-gateway-eg-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>EnvoyProxy:&lt;/strong> Represents the deployment and configuration of the Envoy proxy within a Kubernetes cluster, managing its lifecycle and settings.&lt;/li>
&lt;li>&lt;strong>EnvoyPatchPolicy, ClientTrafficPolicy, SecurityPolicy, BackendTrafficPolicy, EnvoyExtensionPolicy, BackendTLSPolicy:&lt;/strong> Additional policies and configurations specific to Envoy Gateway.&lt;/li>
&lt;li>&lt;strong>Backend:&lt;/strong> A resource that makes routing to cluster-external backends easier and makes access to external processes via Unix Domain Sockets possible.&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Resource&lt;/th>
 &lt;th>API&lt;/th>
 &lt;th>Required&lt;/th>
 &lt;th>Purpose&lt;/th>
 &lt;th>References&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>Core&lt;/td>
 &lt;td>Defines a class of Gateways with common configuration.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>GatewayClass&lt;/td>
 &lt;td>Specifies how traffic can enter the cluster.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TLSRoute">TLSRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Define routing rules for different types of traffic. &lt;strong>Note:&lt;/strong>&lt;em>For simplicity these resources are referenced collectively as Route in the References column&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/backend/">Backend&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>N/A&lt;/td>
 &lt;td>Used for routing to cluster-external backends using FQDN or IP. Can also be used when you want to extend Envoy with external processes accessed via Unix Domain Sockets.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Specifies policies for handling client traffic, including rate limiting, retries, and other client-specific configurations.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway, Route&lt;/td>
 &lt;td>Specifies policies for traffic directed towards backend services, including load balancing, health checks, and failover strategies. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Gateway, Route&lt;/td>
 &lt;td>Defines security-related policies such as authentication, authorization, and encryption settings for traffic handled by Envoy Gateway. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Service&lt;/td>
 &lt;td>Defines TLS settings for backend connections, including certificate management, TLS version settings, and other security configurations. This policy is applied to Kubernetes Services.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass, Gateway&lt;/td>
 &lt;td>The EnvoyProxy resource represents the deployment and configuration of the Envoy proxy itself within a Kubernetes cluster, managing its lifecycle and settings. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass, Gateway&lt;/td>
 &lt;td>This policy defines custom patches to be applied to Envoy Gateway resources, allowing users to tailor the configuration to their specific needs. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>Gateway, Route, Backend&lt;/td>
 &lt;td>Allows for the configuration of Envoy proxy extensions, enabling custom behavior and functionality. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#httproutefilter">HTTPRouteFilter&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>HTTPRoute&lt;/td>
 &lt;td>Allows for the additional request/response processing.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Envoy Gateway Resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/concepts/concepts_overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/concepts/concepts_overview/</guid><description>&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/envoy-gateway-resources-overview.png">&lt;/p>
&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h3 id="kubernetes-gateway-api-resources">Kubernetes Gateway API Resources&lt;a class="td-heading-self-link" href="#kubernetes-gateway-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>GatewayClass:&lt;/strong> Defines a class of Gateways with common configuration.&lt;/li>
&lt;li>&lt;strong>Gateway:&lt;/strong> Specifies how traffic can enter the cluster.&lt;/li>
&lt;li>&lt;strong>Routes:&lt;/strong> &lt;strong>HTTPRoute, GRPCRoute, TLSRoute, TCPRoute, UDPRoute:&lt;/strong> Define routing rules for different types of traffic.&lt;/li>
&lt;/ul>
&lt;h3 id="envoy-gateway-eg-api-resources">Envoy Gateway (EG) API Resources&lt;a class="td-heading-self-link" href="#envoy-gateway-eg-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>EnvoyProxy:&lt;/strong> Represents the deployment and configuration of the Envoy proxy within a Kubernetes cluster, managing its lifecycle and settings.&lt;/li>
&lt;li>&lt;strong>EnvoyPatchPolicy, ClientTrafficPolicy, SecurityPolicy, BackendTrafficPolicy, EnvoyExtensionPolicy, BackendTLSPolicy:&lt;/strong> Additional policies and configurations specific to Envoy Gateway.&lt;/li>
&lt;li>&lt;strong>Backend:&lt;/strong> A resource that makes routing to cluster-external backends easier and makes access to external processes via Unix Domain Sockets possible.&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Resource&lt;/th>
 &lt;th>API&lt;/th>
 &lt;th>Required&lt;/th>
 &lt;th>Purpose&lt;/th>
 &lt;th>References&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>Core&lt;/td>
 &lt;td>Defines a class of Gateways with common configuration.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>GatewayClass&lt;/td>
 &lt;td>Specifies how traffic can enter the cluster.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TLSRoute">TLSRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Define routing rules for different types of traffic. &lt;strong>Note:&lt;/strong>&lt;em>For simplicity these resources are referenced collectively as Route in the References column&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/backend/">Backend&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>N/A&lt;/td>
 &lt;td>Used for routing to cluster-external backends using FQDN or IP. Can also be used when you want to extend Envoy with external processes accessed via Unix Domain Sockets.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Specifies policies for handling client traffic, including rate limiting, retries, and other client-specific configurations.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway Route&lt;/td>
 &lt;td>Specifies policies for traffic directed towards backend services, including load balancing, health checks, and failover strategies. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Gateway Route&lt;/td>
 &lt;td>Defines security-related policies such as authentication, authorization, and encryption settings for traffic handled by Envoy Gateway. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Service&lt;/td>
 &lt;td>Defines TLS settings for backend connections, including certificate management, TLS version settings, and other security configurations. This policy is applied to Kubernetes Services.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass Gateway&lt;/td>
 &lt;td>The EnvoyProxy resource represents the deployment and configuration of the Envoy proxy itself within a Kubernetes cluster, managing its lifecycle and settings. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass Gateway&lt;/td>
 &lt;td>This policy defines custom patches to be applied to Envoy Gateway resources, allowing users to tailor the configuration to their specific needs. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>Gateway Route, Backend&lt;/td>
 &lt;td>Allows for the configuration of Envoy proxy extensions, enabling custom behavior and functionality. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Envoy Gateway Resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/concepts/concepts_overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/concepts/concepts_overview/</guid><description>&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/envoy-gateway-resources-overview.png">&lt;/p>
&lt;p>There are several resources that play a part in enabling you to meet your Kubernetes ingress traffic handling needs. This page provides a brief overview of the resources you’ll be working with.&lt;/p>
&lt;h3 id="kubernetes-gateway-api-resources">Kubernetes Gateway API Resources&lt;a class="td-heading-self-link" href="#kubernetes-gateway-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>GatewayClass:&lt;/strong> Defines a class of Gateways with common configuration.&lt;/li>
&lt;li>&lt;strong>Gateway:&lt;/strong> Specifies how traffic can enter the cluster.&lt;/li>
&lt;li>&lt;strong>Routes:&lt;/strong> &lt;strong>HTTPRoute, GRPCRoute, TLSRoute, TCPRoute, UDPRoute:&lt;/strong> Define routing rules for different types of traffic.&lt;/li>
&lt;/ul>
&lt;h3 id="envoy-gateway-eg-api-resources">Envoy Gateway (EG) API Resources&lt;a class="td-heading-self-link" href="#envoy-gateway-eg-api-resources" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>EnvoyProxy:&lt;/strong> Represents the deployment and configuration of the Envoy proxy within a Kubernetes cluster, managing its lifecycle and settings.&lt;/li>
&lt;li>&lt;strong>EnvoyPatchPolicy, ClientTrafficPolicy, SecurityPolicy, BackendTrafficPolicy, EnvoyExtensionPolicy, BackendTLSPolicy:&lt;/strong> Additional policies and configurations specific to Envoy Gateway.&lt;/li>
&lt;li>&lt;strong>Backend:&lt;/strong> A resource that makes routing to cluster-external backends easier and makes access to external processes via Unix Domain Sockets possible.&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Resource&lt;/th>
 &lt;th>API&lt;/th>
 &lt;th>Required&lt;/th>
 &lt;th>Purpose&lt;/th>
 &lt;th>References&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>Core&lt;/td>
 &lt;td>Defines a class of Gateways with common configuration.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Gateway Config&lt;/td>
 &lt;td>GatewayClass&lt;/td>
 &lt;td>Specifies how traffic can enter the cluster.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TLSRoute">TLSRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Define routing rules for different types of traffic. &lt;strong>Note:&lt;/strong>&lt;em>For simplicity these resources are referenced collectively as Route in the References column&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/backend/">Backend&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Routing&lt;/td>
 &lt;td>N/A&lt;/td>
 &lt;td>Used for routing to cluster-external backends using FQDN or IP. Can also be used when you want to extend Envoy with external processes accessed via Unix Domain Sockets.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#clienttrafficpolicy">ClientTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway&lt;/td>
 &lt;td>Specifies policies for handling client traffic, including rate limiting, retries, and other client-specific configurations.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Traffic Handling&lt;/td>
 &lt;td>Gateway, Route&lt;/td>
 &lt;td>Specifies policies for traffic directed towards backend services, including load balancing, health checks, and failover strategies. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#securitypolicy">SecurityPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Gateway, Route&lt;/td>
 &lt;td>Defines security-related policies such as authentication, authorization, and encryption settings for traffic handled by Envoy Gateway. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/backendtlspolicy/">BackendTLSPolicy&lt;/a>&lt;/td>
 &lt;td>Gateway API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Security&lt;/td>
 &lt;td>Service&lt;/td>
 &lt;td>Defines TLS settings for backend connections, including certificate management, TLS version settings, and other security configurations. This policy is applied to Kubernetes Services.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#envoyproxy">EnvoyProxy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass, Gateway&lt;/td>
 &lt;td>The EnvoyProxy resource represents the deployment and configuration of the Envoy proxy itself within a Kubernetes cluster, managing its lifecycle and settings. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>GatewayClass, Gateway&lt;/td>
 &lt;td>This policy defines custom patches to be applied to Envoy Gateway resources, allowing users to tailor the configuration to their specific needs. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>Gateway, Route, Backend&lt;/td>
 &lt;td>Allows for the configuration of Envoy proxy extensions, enabling custom behavior and functionality. &lt;strong>Note:&lt;/strong>&lt;em>Most specific configuration wins&lt;/em>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#httproutefilter">HTTPRouteFilter&lt;/a>&lt;/td>
 &lt;td>EG API&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>Customize &amp;amp; Extend&lt;/td>
 &lt;td>HTTPRoute&lt;/td>
 &lt;td>Allows for the additional request/response processing.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/envoy-patch-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/envoy-patch-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/envoy-patch-policy/</guid><description>&lt;p>This guide explains the usage of the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/envoy-patch-policy/</guid><description>&lt;p>This guide explains the usage of the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/extensibility/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/extensibility/envoy-patch-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/envoy-patch-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>Envoy Patch Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/envoy-patch-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API.
&lt;strong>Note:&lt;/strong> This API is meant for users extremely familiar with Envoy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> semantics.
Also before considering this API for production use cases, please be aware that this API
is unstable and the outcome may change across versions. Use at your own risk.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#envoypatchpolicy">EnvoyPatchPolicy&lt;/a> API allows user to modify the output &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a>
configuration generated by Envoy Gateway intended for EnvoyProxy,
using &lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">JSON Patch&lt;/a> semantics.&lt;/p></description></item><item><title>EnvoyExtensionPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/envoy-extension-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/envoy-extension-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>EnvoyExtensionPolicy&lt;/code> API allowing system administrators to configure traffic
processing extensibility policies, based on existing Network and HTTP Envoy proxy &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/extending/extending">extension points&lt;/a>.&lt;/p>
&lt;p>Envoy Gateway already provides two methods of control plane extensibility that can be used to achieve this functionality:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#envoypatchpolicy">Envoy Patch Policy&lt;/a> can be used to patch Listener filters and HTTP Connection Manager filters.&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/extending-envoy-gateway/">Envoy Extension Manager&lt;/a> can be used to programmatically mutate Listener filters and HTTP Connection Manager filters.&lt;/li>
&lt;/ul>
&lt;p>These approaches require a high level of Envoy and Envoy Gateway expertise and may create a significant operational
burden for users (see &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/envoy-extension-policy/#Alternatives">Alternatives&lt;/a> for more details). For this reason, this document proposes to support Envoy
data plane extensibility options as first class citizens of Envoy Gateway.&lt;/p></description></item><item><title>EnvoyPatchPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/envoy-patch-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design introduces the &lt;code>EnvoyPatchPolicy&lt;/code> API allowing users to modify the generated Envoy xDS Configuration
that Envoy Gateway generates before sending it to Envoy Proxy.&lt;/p>
&lt;p>Envoy Gateway allows users to configure networking and security intent using the
upstream &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> as well as implementation specific &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/">Extension APIs&lt;/a> defined in this project
to provide a more batteries included experience for application developers.&lt;/p>
&lt;ul>
&lt;li>These APIs are an abstracted version of the underlying Envoy xDS API to provide a better user experience for the application developer, exposing and setting only a subset of the fields for a specific feature, sometimes in a opinionated way (e.g &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/rate-limit/">RateLimit&lt;/a>)&lt;/li>
&lt;li>These APIs do not expose all the features capabilities that Envoy has either because these features are desired but the API
is not defined yet or the project cannot support such an extensive list of features.
To alleviate this problem, and provide an interim solution for a small section of advanced users who are well versed in
Envoy xDS API and its capabilities, this API is being introduced.&lt;/li>
&lt;/ul>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API allowing users to modify the generated xDS Configuration&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Support multiple patch mechanisims&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>EnvoyPatchPolicy&lt;/code> is a &lt;a href="https://gateway-api.sigs.k8s.io/references/policy-attachment/#direct-policy-attachment">Direct Policy Attachment&lt;/a> type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>
Modifications to the generated xDS configuration can be provided as a JSON Patch which is defined in
&lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">RFC 6902&lt;/a>. This patching mechanism has been adopted in &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/">Kubernetes&lt;/a> as well as &lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/examples/jsonpatch.md">Kustomize&lt;/a> to update
resource objects.&lt;/p></description></item><item><title>EnvoyPatchPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/envoy-patch-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design introduces the &lt;code>EnvoyPatchPolicy&lt;/code> API allowing users to modify the generated Envoy xDS Configuration
that Envoy Gateway generates before sending it to Envoy Proxy.&lt;/p>
&lt;p>Envoy Gateway allows users to configure networking and security intent using the
upstream &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> as well as implementation specific &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/">Extension APIs&lt;/a> defined in this project
to provide a more batteries included experience for application developers.&lt;/p>
&lt;ul>
&lt;li>These APIs are an abstracted version of the underlying Envoy xDS API to provide a better user experience for the application developer, exposing and setting only a subset of the fields for a specific feature, sometimes in a opinionated way (e.g &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/user/rate-limit/">RateLimit&lt;/a>)&lt;/li>
&lt;li>These APIs do not expose all the features capabilities that Envoy has either because these features are desired but the API
is not defined yet or the project cannot support such an extensive list of features.
To alleviate this problem, and provide an interim solution for a small section of advanced users who are well versed in
Envoy xDS API and its capabilities, this API is being introduced.&lt;/li>
&lt;/ul>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API allowing users to modify the generated xDS Configuration&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Support multiple patch mechanisims&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>EnvoyPatchPolicy&lt;/code> is a &lt;a href="https://gateway-api.sigs.k8s.io/references/policy-attachment/#direct-policy-attachment">Direct Policy Attachment&lt;/a> type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>
Modifications to the generated xDS configuration can be provided as a JSON Patch which is defined in
&lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">RFC 6902&lt;/a>. This patching mechanism has been adopted in &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/">Kubernetes&lt;/a> as well as &lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/examples/jsonpatch.md">Kustomize&lt;/a> to update
resource objects.&lt;/p></description></item><item><title>EnvoyPatchPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/envoy-patch-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/envoy-patch-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design introduces the &lt;code>EnvoyPatchPolicy&lt;/code> API allowing users to modify the generated Envoy xDS Configuration
that Envoy Gateway generates before sending it to Envoy Proxy.&lt;/p>
&lt;p>Envoy Gateway allows users to configure networking and security intent using the
upstream &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> as well as implementation specific &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/api/extension_types/">Extension APIs&lt;/a> defined in this project
to provide a more batteries included experience for application developers.&lt;/p>
&lt;ul>
&lt;li>These APIs are an abstracted version of the underlying Envoy xDS API to provide a better user experience for the application developer, exposing and setting only a subset of the fields for a specific feature, sometimes in a opinionated way (e.g &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/rate-limit/">RateLimit&lt;/a>)&lt;/li>
&lt;li>These APIs do not expose all the features capabilities that Envoy has either because these features are desired but the API
is not defined yet or the project cannot support such an extensive list of features.
To alleviate this problem, and provide an interim solution for a small section of advanced users who are well versed in
Envoy xDS API and its capabilities, this API is being introduced.&lt;/li>
&lt;/ul>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API allowing users to modify the generated xDS Configuration&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Support multiple patch mechanisms&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>EnvoyPatchPolicy&lt;/code> is a &lt;a href="https://gateway-api.sigs.k8s.io/references/policy-attachment/#direct-policy-attachment">Direct Policy Attachment&lt;/a> type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>
Modifications to the generated xDS configuration can be provided as a JSON Patch which is defined in
&lt;a href="https://datatracker.ietf.org/doc/html/rfc6902">RFC 6902&lt;/a>. This patching mechanism has been adopted in &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/">Kubernetes&lt;/a> as well as &lt;a href="https://github.com/kubernetes-sigs/kustomize/blob/master/examples/jsonpatch.md">Kustomize&lt;/a> to update
resource objects.&lt;/p></description></item><item><title>Extension APIs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/extension_types/#authenticationfilter">AuthenticationFilter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/extension_types/#ratelimitfilter">RateLimitFilter&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="authenticationfilter">AuthenticationFilter&lt;a class="td-heading-self-link" href="#authenticationfilter" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>apiVersion&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>gateway.envoyproxy.io/v1alpha1&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>kind&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>AuthenticationFilter&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>metadata&lt;/code> &lt;em>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#objectmeta-v1-meta">ObjectMeta&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Refer to Kubernetes API documentation for fields of &lt;code>metadata&lt;/code>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>spec&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/api/extension_types/#authenticationfilterspec">AuthenticationFilterSpec&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Spec defines the desired state of the AuthenticationFilter type.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="authenticationfilterspec">AuthenticationFilterSpec&lt;a class="td-heading-self-link" href="#authenticationfilterspec" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>AuthenticationFilterSpec defines the desired state of the AuthenticationFilter type.&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p></description></item><item><title>Extension APIs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/extension_types/#authenticationfilter">AuthenticationFilter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/extension_types/#ratelimitfilter">RateLimitFilter&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="authenticationfilter">AuthenticationFilter&lt;a class="td-heading-self-link" href="#authenticationfilter" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>apiVersion&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>gateway.envoyproxy.io/v1alpha1&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>kind&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>AuthenticationFilter&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>metadata&lt;/code> &lt;em>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#objectmeta-v1-meta">ObjectMeta&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Refer to Kubernetes API documentation for fields of &lt;code>metadata&lt;/code>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>spec&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/api/extension_types/#authenticationfilterspec">AuthenticationFilterSpec&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Spec defines the desired state of the AuthenticationFilter type.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="authenticationfilterspec">AuthenticationFilterSpec&lt;a class="td-heading-self-link" href="#authenticationfilterspec" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>AuthenticationFilterSpec defines the desired state of the AuthenticationFilter type.&lt;/p>
&lt;p>&lt;em>Appears in:&lt;/em>&lt;/p></description></item><item><title>Extension APIs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/</guid><description>&lt;h2 id="packages">Packages&lt;a class="td-heading-self-link" href="#packages" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="gatewayenvoyproxyiov1alpha1">gateway.envoyproxy.io/v1alpha1&lt;a class="td-heading-self-link" href="#gatewayenvoyproxyiov1alpha1" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Package v1alpha1 contains API schema definitions for the gateway.envoyproxy.io API group.&lt;/p>
&lt;h3 id="resource-types">Resource Types&lt;a class="td-heading-self-link" href="#resource-types" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#authenticationfilter">AuthenticationFilter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#envoypatchpolicy">EnvoyPatchPolicy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#envoypatchpolicylist">EnvoyPatchPolicyList&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#ratelimitfilter">RateLimitFilter&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="authenticationfilter">AuthenticationFilter&lt;a class="td-heading-self-link" href="#authenticationfilter" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Field&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>apiVersion&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>gateway.envoyproxy.io/v1alpha1&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>kind&lt;/code> &lt;em>string&lt;/em>&lt;/td>
 &lt;td>&lt;code>AuthenticationFilter&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>metadata&lt;/code> &lt;em>&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#objectmeta-v1-meta">ObjectMeta&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Refer to Kubernetes API documentation for fields of &lt;code>metadata&lt;/code>.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>spec&lt;/code> &lt;em>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/api/extension_types/#authenticationfilterspec">AuthenticationFilterSpec&lt;/a>&lt;/em>&lt;/td>
 &lt;td>Spec defines the desired state of the AuthenticationFilter type.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="authenticationfilterspec">AuthenticationFilterSpec&lt;a class="td-heading-self-link" href="#authenticationfilterspec" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>AuthenticationFilterSpec defines the desired state of the AuthenticationFilter type.&lt;/p></description></item><item><title>Envoy Gateway Extension Server</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/extension-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/extension-server/</guid><description>&lt;p>This task explains how to extend Envoy Gateway using an Extension Server. Envoy Gateway
can be configured to call an external server over gRPC with the xDS configuration &lt;em>before&lt;/em>
it is sent to Envoy Proxy. The external server can modify the provided configuration
programmatically using any semantics supported by the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> API.&lt;/p>
&lt;p>Using an extension server allows vendors to add xDS configuration that Envoy Gateway itself
doesn&amp;rsquo;t support with a very high level of control over the generated xDS configuration.&lt;/p></description></item><item><title>Envoy Gateway Extension Server</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/extension-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/extension-server/</guid><description>&lt;p>This task explains how to extend Envoy Gateway using an Extension Server. Envoy Gateway
can be configured to call an external server over gRPC with the xDS configuration &lt;em>before&lt;/em>
it is sent to Envoy Proxy. The external server can modify the provided configuration
programmatically using any semantics supported by the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> API.&lt;/p>
&lt;p>Using an extension server allows vendors to add xDS configuration that Envoy Gateway itself
doesn&amp;rsquo;t support with a very high level of control over the generated xDS configuration.&lt;/p></description></item><item><title>Envoy Gateway Extension Server</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/extension-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/extension-server/</guid><description>&lt;p>This task explains how to extend Envoy Gateway using an Extension Server. Envoy Gateway
can be configured to call an external server over gRPC with the xDS configuration &lt;em>before&lt;/em>
it is sent to Envoy Proxy. The external server can modify the provided configuration
programmatically using any semantics supported by the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> API.&lt;/p>
&lt;p>Using an extension server allows vendors to add xDS configuration that Envoy Gateway itself
doesn&amp;rsquo;t support with a very high level of control over the generated xDS configuration.&lt;/p></description></item><item><title>Envoy Gateway Extension Server</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/extension-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/extension-server/</guid><description>&lt;p>This task explains how to extend Envoy Gateway using an Extension Server. Envoy Gateway
can be configured to call an external server over gRPC with the xDS configuration &lt;em>before&lt;/em>
it is sent to Envoy Proxy. The external server can modify the provided configuration
programmatically using any semantics supported by the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration">xDS&lt;/a> API.&lt;/p>
&lt;p>Using an extension server allows vendors to add xDS configuration that Envoy Gateway itself
doesn&amp;rsquo;t support with a very high level of control over the generated xDS configuration.&lt;/p></description></item><item><title>External Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/ext-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/ext-auth/</guid><description>&lt;p>This task provides instructions for configuring external authentication.&lt;/p>
&lt;p>External authorization calls an external HTTP or gRPC service to check whether an incoming HTTP request is authorized
or not. If the request is deemed unauthorized, then the request will be denied with a 403 (Forbidden) response. If the
request is authorized, then the request will be allowed to proceed to the backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure external authorization.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>External Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/ext-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/ext-auth/</guid><description>&lt;p>This task provides instructions for configuring external authentication.&lt;/p>
&lt;p>External authorization calls an external HTTP or gRPC service to check whether an incoming HTTP request is authorized
or not. If the request is deemed unauthorized, then the request will be denied with a 403 (Forbidden) response. If the
request is authorized, then the request will be allowed to proceed to the backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure external authorization.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>External Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/ext-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/ext-auth/</guid><description>&lt;p>This guide provides instructions for configuring external authentication.&lt;/p>
&lt;p>External authorization calls an external HTTP or gRPC service to check whether an incoming HTTP request is authorized
or not. If the request is deemed unauthorized, then the request will be denied with a 403 (Forbidden) response. If the
request is authorized, then the request will be allowed to proceed to the backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure external authorization.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>External Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/ext-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/ext-auth/</guid><description>&lt;p>This task provides instructions for configuring external authentication.&lt;/p>
&lt;p>External authorization calls an external HTTP or gRPC service to check whether an incoming HTTP request is authorized
or not. If the request is deemed unauthorized, then the request will be denied with a 403 (Forbidden) response. If the
request is authorized, then the request will be allowed to proceed to the backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure external authorization.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>External Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/ext-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/ext-auth/</guid><description>&lt;p>This task provides instructions for configuring external authentication.&lt;/p>
&lt;p>External authorization calls an external HTTP or gRPC service to check whether an incoming HTTP request is authorized
or not. If the request is deemed unauthorized, then the request will be denied with a 403 (Forbidden) response. If the
request is authorized, then the request will be allowed to proceed to the backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure external authorization.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>External Processing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/ext-proc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/ext-proc/</guid><description>&lt;p>This task provides instructions for configuring external processing.&lt;/p>
&lt;p>External processing calls an external gRPC service to process HTTP requests and responses.
The external processing service can inspect and mutate requests and responses.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure external processing.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>External Processing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/ext-proc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/ext-proc/</guid><description>&lt;p>This task provides instructions for configuring external processing.&lt;/p>
&lt;p>External processing calls an external gRPC service to process HTTP requests and responses.
The external processing service can inspect and mutate requests and responses.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure external processing.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>External Processing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/ext-proc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/ext-proc/</guid><description>&lt;p>This task provides instructions for configuring external processing.&lt;/p>
&lt;p>External processing calls an external gRPC service to process HTTP requests and responses.
The external processing service can inspect and mutate requests and responses.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure external processing.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>External Processing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/ext-proc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/ext-proc/</guid><description>&lt;p>This task provides instructions for configuring external processing.&lt;/p>
&lt;p>External processing calls an external gRPC service to process HTTP requests and responses.
The external processing service can inspect and mutate requests and responses.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure external processing.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Failover</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/failover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/failover/</guid><description>&lt;p>Active-passive failover in an API gateway setup is like having a backup plan in place to keep things
running smoothly if something goes wrong. Here’s why it’s valuable:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Staying Online: When the main (or &amp;ldquo;active&amp;rdquo;) backend has issues or goes offline,
the fallback (or &amp;ldquo;passive&amp;rdquo;) backend is ready to step in instantly.
This helps keep your API accessible and your services running, so users don’t even notice any interruptions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Automatic Switch Over: If a problem occurs, the system can automatically switch traffic over to the fallback backend.
This avoids needing someone to jump in and fix things manually, which could take time and might even lead to mistakes.&lt;/p></description></item><item><title>Failover</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/failover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/failover/</guid><description>&lt;p>Active-passive failover in an API gateway setup is like having a backup plan in place to keep things
running smoothly if something goes wrong. Here’s why it’s valuable:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Staying Online: When the main (or &amp;ldquo;active&amp;rdquo;) backend has issues or goes offline,
the fallback (or &amp;ldquo;passive&amp;rdquo;) backend is ready to step in instantly.
This helps keep your API accessible and your services running, so users don’t even notice any interruptions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Automatic Switch Over: If a problem occurs, the system can automatically switch traffic over to the fallback backend.
This avoids needing someone to jump in and fix things manually, which could take time and might even lead to mistakes.&lt;/p></description></item><item><title>Failover</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/failover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/failover/</guid><description>&lt;p>Active-passive failover in an API gateway setup is like having a backup plan in place to keep things
running smoothly if something goes wrong. Here’s why it’s valuable:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Staying Online: When the main (or &amp;ldquo;active&amp;rdquo;) backend has issues or goes offline,
the fallback (or &amp;ldquo;passive&amp;rdquo;) backend is ready to step in instantly.
This helps keep your API accessible and your services running, so users don’t even notice any interruptions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Automatic Switch Over: If a problem occurs, the system can automatically switch traffic over to the fallback backend.
This avoids needing someone to jump in and fix things manually, which could take time and might even lead to mistakes.&lt;/p></description></item><item><title>Fault Injection</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/fault-injection/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/fault_filter.html">Envoy fault injection&lt;/a> can be used to inject delays and abort requests to mimic failure scenarios such as service failures and overloads.&lt;/p>
&lt;p>Envoy Gateway supports the following fault scenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>delay fault&lt;/strong>: inject a custom fixed delay into the request with a certain probability to simulate delay failures.&lt;/li>
&lt;li>&lt;strong>abort fault&lt;/strong>: inject a custom response code into the response with a certain probability to simulate abort failures.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired fault scenarios.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>Fault Injection</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/fault-injection/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/fault_filter.html">Envoy fault injection&lt;/a> can be used to inject delays and abort requests to mimic failure scenarios such as service failures and overloads.&lt;/p>
&lt;p>Envoy Gateway supports the following fault scenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>delay fault&lt;/strong>: inject a custom fixed delay into the request with a certain probability to simulate delay failures.&lt;/li>
&lt;li>&lt;strong>abort fault&lt;/strong>: inject a custom response code into the response with a certain probability to simulate abort failures.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired fault scenarios.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>Fault Injection</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/fault-injection/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/fault_filter.html">Envoy fault injection&lt;/a> can be used to inject delays and abort requests to mimic failure scenarios such as service failures and overloads.&lt;/p>
&lt;p>Envoy Gateway supports the following fault scenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>delay fault&lt;/strong>: inject a custom fixed delay into the request with a certain probability to simulate delay failures.&lt;/li>
&lt;li>&lt;strong>abort fault&lt;/strong>: inject a custom response code into the response with a certain probability to simulate abort failures.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired fault scenarios.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>Fault Injection</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/fault-injection/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/fault_filter.html">Envoy fault injection&lt;/a> can be used to inject delays and abort requests to mimic failure scenarios such as service failures and overloads.&lt;/p>
&lt;p>Envoy Gateway supports the following fault scenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>delay fault&lt;/strong>: inject a custom fixed delay into the request with a certain probability to simulate delay failures.&lt;/li>
&lt;li>&lt;strong>abort fault&lt;/strong>: inject a custom response code into the response with a certain probability to simulate abort failures.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired fault scenarios.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>Fault Injection</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/fault-injection/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/fault_filter.html">Envoy fault injection&lt;/a> can be used to inject delays and abort requests to mimic failure scenarios such as service failures and overloads.&lt;/p>
&lt;p>Envoy Gateway supports the following fault scenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>delay fault&lt;/strong>: inject a custom fixed delay into the request with a certain probability to simulate delay failures.&lt;/li>
&lt;li>&lt;strong>abort fault&lt;/strong>: inject a custom response code into the response with a certain probability to simulate abort failures.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired fault scenarios.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>Gateway Addons Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/gateway-addons-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/gateway-addons-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>An Add-ons Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="requirements">Requirements&lt;a class="td-heading-self-link" href="#requirements" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Repository&lt;/th>
 &lt;th>Name&lt;/th>
 &lt;th>Version&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://fluent.github.io/helm-charts">https://fluent.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>fluent-bit&lt;/td>
 &lt;td>0.30.4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>alloy&lt;/td>
 &lt;td>0.9.2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>grafana&lt;/td>
 &lt;td>8.0.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>loki&lt;/td>
 &lt;td>4.8.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>tempo&lt;/td>
 &lt;td>1.3.1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://open-telemetry.github.io/opentelemetry-helm-charts">https://open-telemetry.github.io/opentelemetry-helm-charts&lt;/a>&lt;/td>
 &lt;td>opentelemetry-collector&lt;/td>
 &lt;td>0.108.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://prometheus-community.github.io/helm-charts">https://prometheus-community.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>prometheus&lt;/td>
 &lt;td>25.21.0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>alloy.alloy.configMap.content&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;// Write your Alloy config here:\nlogging {\n level = \&amp;quot;info\&amp;quot;\n format = \&amp;quot;logfmt\&amp;quot;\n}\nloki.write \&amp;quot;alloy\&amp;quot; {\n endpoint {\n url = \&amp;quot;http://loki.monitoring.svc:3100/loki/api/v1/push\&amp;quot;\n }\n}\n// discovery.kubernetes allows you to find scrape targets from Kubernetes resources.\n// It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.\ndiscovery.kubernetes \&amp;quot;pod\&amp;quot; {\n role = \&amp;quot;pod\&amp;quot;\n}\n\n// discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.\n// If no rules are defined, then the input targets are exported as-is.\ndiscovery.relabel \&amp;quot;pod_logs\&amp;quot; {\n targets = discovery.kubernetes.pod.targets\n\n // Label creation - \&amp;quot;namespace\&amp;quot; field from \&amp;quot;__meta_kubernetes_namespace\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_namespace\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;namespace\&amp;quot;\n }\n\n // Label creation - \&amp;quot;pod\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;pod\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;container\&amp;quot;\n }\n\n // Label creation - \&amp;quot;app\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_label_app_kubernetes_io_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_label_app_kubernetes_io_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;app\&amp;quot;\n }\n\n // Label creation - \&amp;quot;job\&amp;quot; field from \&amp;quot;__meta_kubernetes_namespace\&amp;quot; and \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_namespace\&amp;quot;, \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;job\&amp;quot;\n separator = \&amp;quot;/\&amp;quot;\n replacement = \&amp;quot;$1\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_uid\&amp;quot; and \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_uid\&amp;quot;, \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;__path__\&amp;quot;\n separator = \&amp;quot;/\&amp;quot;\n replacement = \&amp;quot;/var/log/pods/*$1/*.log\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container_runtime\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_container_id\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_container_id\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;container_runtime\&amp;quot;\n regex = \&amp;quot;^(\\\\S+):\\\\/\\\\/.+$\&amp;quot;\n replacement = \&amp;quot;$1\&amp;quot;\n }\n}\n\n// loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.\nloki.source.kubernetes \&amp;quot;pod_logs\&amp;quot; {\n targets = discovery.relabel.pod_logs.output\n forward_to = [loki.process.pod_logs.receiver]\n}\n// loki.process receives log entries from other Loki components, applies one or more processing stages,\n// and forwards the results to the list of receivers in the component’s arguments.\nloki.process \&amp;quot;pod_logs\&amp;quot; {\n stage.static_labels {\n values = {\n cluster = \&amp;quot;envoy-gateway\&amp;quot;,\n }\n }\n\n forward_to = [loki.write.alloy.receiver]\n}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>alloy.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>alloy.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;alloy&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.filters&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[FILTER]\n Name kubernetes\n Match kube.*\n Merge_Log On\n Keep_Log Off\n K8S-Logging.Parser On\n K8S-Logging.Exclude On\n\n[FILTER]\n Name grep\n Match kube.*\n Regex $kubernetes['container_name'] ^envoy$\n\n[FILTER]\n Name parser\n Match kube.*\n Key_Name log\n Parser envoy\n Reserve_Data True\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.inputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[INPUT]\n Name tail\n Path /var/log/containers/*.log\n multiline.parser docker, cri\n Tag kube.*\n Mem_Buf_Limit 5MB\n Skip_Long_Lines On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.outputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[OUTPUT]\n Name loki\n Match kube.*\n Host loki.monitoring.svc.cluster.local\n Port 3100\n Labels job=fluentbit, app=$kubernetes['labels']['app'], k8s_namespace_name=$kubernetes['namespace_name'], k8s_pod_name=$kubernetes['pod_name'], k8s_container_name=$kubernetes['container_name']\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.service&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[SERVICE]\n Daemon Off\n Flush {{ .Values.flush }}\n Log_Level {{ .Values.logLevel }}\n Parsers_File parsers.conf\n Parsers_File custom_parsers.conf\n HTTP_Server On\n HTTP_Listen 0.0.0.0\n HTTP_Port {{ .Values.metricsPort }}\n Health_Check On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent/fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;fluentbit.io/exclude&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/path&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/api/v1/metrics/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;2020&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.testFramework.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.adminPassword&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;admin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].disableDeletion&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].editable&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].folder&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].options.path&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/var/lib/grafana/dashboards/envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].orgId&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;file&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardsConfigMaps.envoy-gateway&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana-dashboards&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].url&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.testFramework.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.backend.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.deploymentMode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;SingleBinary&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.gateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.auth_enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.commonConfig.replication_factor&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.compactorAddress&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.memberlist&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki-memberlist&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.rulerConfig.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;filesystem&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.lokiCanary.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.grafanaAgent.installOperator&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.read.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.singleBinary.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.test.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.write.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.debug.verbosity&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;detailed&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.loki.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://loki.monitoring.svc:3100/loki/api/v1/push&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo.monitoring.svc:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.tls.insecure&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.prometheus.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.extensions.health_check.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:13133&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].action&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;insert&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].key&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki.attribute.labels&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].value&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;k8s.pod.name, k8s.namespace.name&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.datadog.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8126&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.grpc.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:14250&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.thrift_compact.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:6831&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.thrift_http.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:14268&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.grpc.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.http.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:4318&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].job_name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;opentelemetry-collector&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].scrape_interval&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;10s&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].static_configs[0].targets[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8888&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.zipkin.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:9411&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.extensions[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;health_check&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.processors[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;attributes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;datadog&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.receivers[1]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;datadog&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[1]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[2]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;zipkin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.telemetry.metrics.address&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8888&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otel-collector&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otel/opentelemetry-collector-contrib&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.mode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;deployment&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.alertmanager.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.kube-state-metrics.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-node-exporter.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-pushgateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.global.scrape_interval&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;15s&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prom/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.persistentVolume.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.readinessProbeInitialDelay&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.securityContext&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Addons Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/gateway-addons-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/gateway-addons-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>An Add-ons Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="requirements">Requirements&lt;a class="td-heading-self-link" href="#requirements" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Repository&lt;/th>
 &lt;th>Name&lt;/th>
 &lt;th>Version&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://fluent.github.io/helm-charts">https://fluent.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>fluent-bit&lt;/td>
 &lt;td>0.30.4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>alloy&lt;/td>
 &lt;td>0.9.2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>grafana&lt;/td>
 &lt;td>8.0.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>loki&lt;/td>
 &lt;td>4.8.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>tempo&lt;/td>
 &lt;td>1.3.1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://open-telemetry.github.io/opentelemetry-helm-charts">https://open-telemetry.github.io/opentelemetry-helm-charts&lt;/a>&lt;/td>
 &lt;td>opentelemetry-collector&lt;/td>
 &lt;td>0.108.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://prometheus-community.github.io/helm-charts">https://prometheus-community.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>prometheus&lt;/td>
 &lt;td>25.21.0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>alloy.alloy.configMap.content&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;// Write your Alloy config here:\nlogging {\n level = \&amp;quot;info\&amp;quot;\n format = \&amp;quot;logfmt\&amp;quot;\n}\nloki.write \&amp;quot;alloy\&amp;quot; {\n endpoint {\n url = \&amp;quot;http://loki.monitoring.svc:3100/loki/api/v1/push\&amp;quot;\n }\n}\n// discovery.kubernetes allows you to find scrape targets from Kubernetes resources.\n// It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.\ndiscovery.kubernetes \&amp;quot;pod\&amp;quot; {\n role = \&amp;quot;pod\&amp;quot;\n}\n\n// discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.\n// If no rules are defined, then the input targets are exported as-is.\ndiscovery.relabel \&amp;quot;pod_logs\&amp;quot; {\n targets = discovery.kubernetes.pod.targets\n\n // Label creation - \&amp;quot;namespace\&amp;quot; field from \&amp;quot;__meta_kubernetes_namespace\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_namespace\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;namespace\&amp;quot;\n }\n\n // Label creation - \&amp;quot;pod\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;pod\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;container\&amp;quot;\n }\n\n // Label creation - \&amp;quot;app\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_label_app_kubernetes_io_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_label_app_kubernetes_io_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;app\&amp;quot;\n }\n\n // Label creation - \&amp;quot;job\&amp;quot; field from \&amp;quot;__meta_kubernetes_namespace\&amp;quot; and \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_namespace\&amp;quot;, \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;job\&amp;quot;\n separator = \&amp;quot;/\&amp;quot;\n replacement = \&amp;quot;$1\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_uid\&amp;quot; and \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_uid\&amp;quot;, \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;__path__\&amp;quot;\n separator = \&amp;quot;/\&amp;quot;\n replacement = \&amp;quot;/var/log/pods/*$1/*.log\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container_runtime\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_container_id\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_container_id\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;container_runtime\&amp;quot;\n regex = \&amp;quot;^(\\\\S+):\\\\/\\\\/.+$\&amp;quot;\n replacement = \&amp;quot;$1\&amp;quot;\n }\n}\n\n// loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.\nloki.source.kubernetes \&amp;quot;pod_logs\&amp;quot; {\n targets = discovery.relabel.pod_logs.output\n forward_to = [loki.process.pod_logs.receiver]\n}\n// loki.process receives log entries from other Loki components, applies one or more processing stages,\n// and forwards the results to the list of receivers in the component’s arguments.\nloki.process \&amp;quot;pod_logs\&amp;quot; {\n stage.static_labels {\n values = {\n cluster = \&amp;quot;envoy-gateway\&amp;quot;,\n }\n }\n\n forward_to = [loki.write.alloy.receiver]\n}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>alloy.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>alloy.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;alloy&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.filters&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[FILTER]\n Name kubernetes\n Match kube.*\n Merge_Log On\n Keep_Log Off\n K8S-Logging.Parser On\n K8S-Logging.Exclude On\n\n[FILTER]\n Name grep\n Match kube.*\n Regex $kubernetes['container_name'] ^envoy$\n\n[FILTER]\n Name parser\n Match kube.*\n Key_Name log\n Parser envoy\n Reserve_Data True\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.inputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[INPUT]\n Name tail\n Path /var/log/containers/*.log\n multiline.parser docker, cri\n Tag kube.*\n Mem_Buf_Limit 5MB\n Skip_Long_Lines On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.outputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[OUTPUT]\n Name loki\n Match kube.*\n Host loki.monitoring.svc.cluster.local\n Port 3100\n Labels job=fluentbit, app=$kubernetes['labels']['app'], k8s_namespace_name=$kubernetes['namespace_name'], k8s_pod_name=$kubernetes['pod_name'], k8s_container_name=$kubernetes['container_name']\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.service&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[SERVICE]\n Daemon Off\n Flush {{ .Values.flush }}\n Log_Level {{ .Values.logLevel }}\n Parsers_File parsers.conf\n Parsers_File custom_parsers.conf\n HTTP_Server On\n HTTP_Listen 0.0.0.0\n HTTP_Port {{ .Values.metricsPort }}\n Health_Check On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent/fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;fluentbit.io/exclude&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/path&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/api/v1/metrics/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;2020&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.testFramework.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.adminPassword&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;admin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].disableDeletion&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].editable&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].folder&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].options.path&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/var/lib/grafana/dashboards/envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].orgId&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;file&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardsConfigMaps.envoy-gateway&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana-dashboards&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].url&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.testFramework.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.backend.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.deploymentMode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;SingleBinary&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.gateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.auth_enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.commonConfig.replication_factor&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.compactorAddress&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.memberlist&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki-memberlist&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.rulerConfig.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;filesystem&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.lokiCanary.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.grafanaAgent.installOperator&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.read.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.singleBinary.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.test.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.write.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.debug.verbosity&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;detailed&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.loki.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://loki.monitoring.svc:3100/loki/api/v1/push&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo.monitoring.svc:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.tls.insecure&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.prometheus.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.extensions.health_check.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:13133&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].action&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;insert&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].key&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki.attribute.labels&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].value&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;k8s.pod.name, k8s.namespace.name&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.datadog.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8126&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.grpc.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:14250&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.thrift_compact.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:6831&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.thrift_http.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:14268&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.grpc.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.http.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:4318&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].job_name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;opentelemetry-collector&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].scrape_interval&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;10s&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].static_configs[0].targets[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8888&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.zipkin.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:9411&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.extensions[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;health_check&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.processors[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;attributes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;datadog&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.receivers[1]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;datadog&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[1]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[2]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;zipkin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.telemetry.metrics.address&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8888&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otel-collector&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otel/opentelemetry-collector-contrib&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.mode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;deployment&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.alertmanager.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.kube-state-metrics.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-node-exporter.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-pushgateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.global.scrape_interval&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;15s&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prom/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.persistentVolume.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.readinessProbeInitialDelay&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.securityContext&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Addons Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/gateway-addons-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/gateway-addons-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>An Add-ons Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="requirements">Requirements&lt;a class="td-heading-self-link" href="#requirements" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Repository&lt;/th>
 &lt;th>Name&lt;/th>
 &lt;th>Version&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://fluent.github.io/helm-charts">https://fluent.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>fluent-bit&lt;/td>
 &lt;td>0.30.4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>grafana&lt;/td>
 &lt;td>8.0.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>loki&lt;/td>
 &lt;td>4.8.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>tempo&lt;/td>
 &lt;td>1.3.1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://open-telemetry.github.io/opentelemetry-helm-charts">https://open-telemetry.github.io/opentelemetry-helm-charts&lt;/a>&lt;/td>
 &lt;td>opentelemetry-collector&lt;/td>
 &lt;td>0.73.1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://prometheus-community.github.io/helm-charts">https://prometheus-community.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>prometheus&lt;/td>
 &lt;td>25.21.0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>fluent-bit.config.filters&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[FILTER]\n Name kubernetes\n Match kube.*\n Merge_Log On\n Keep_Log Off\n K8S-Logging.Parser On\n K8S-Logging.Exclude On\n\n[FILTER]\n Name grep\n Match kube.*\n Regex $kubernetes['container_name'] ^envoy$\n\n[FILTER]\n Name parser\n Match kube.*\n Key_Name log\n Parser envoy\n Reserve_Data True\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.inputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[INPUT]\n Name tail\n Path /var/log/containers/*.log\n multiline.parser docker, cri\n Tag kube.*\n Mem_Buf_Limit 5MB\n Skip_Long_Lines On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.outputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[OUTPUT]\n Name loki\n Match kube.*\n Host loki.monitoring.svc.cluster.local\n Port 3100\n Labels job=fluentbit, app=$kubernetes['labels']['app'], k8s_namespace_name=$kubernetes['namespace_name'], k8s_pod_name=$kubernetes['pod_name'], k8s_container_name=$kubernetes['container_name']\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.service&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[SERVICE]\n Daemon Off\n Flush {{ .Values.flush }}\n Log_Level {{ .Values.logLevel }}\n Parsers_File parsers.conf\n Parsers_File custom_parsers.conf\n HTTP_Server On\n HTTP_Listen 0.0.0.0\n HTTP_Port {{ .Values.metricsPort }}\n Health_Check On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent/fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;fluentbit.io/exclude&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/path&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/api/v1/metrics/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;2020&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.testFramework.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.adminPassword&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;admin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].disableDeletion&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].editable&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].folder&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].options.path&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/var/lib/grafana/dashboards/envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].orgId&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;file&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardsConfigMaps.envoy-gateway&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana-dashboards&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].url&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.backend.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.deploymentMode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;SingleBinary&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.gateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.auth_enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.commonConfig.replication_factor&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.compactorAddress&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.memberlist&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki-memberlist&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.rulerConfig.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;filesystem&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.lokiCanary.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.grafanaAgent.installOperator&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.read.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.singleBinary.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.test.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.write.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.logging.verbosity&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;detailed&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.loki.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://loki.monitoring.svc:3100/loki/api/v1/push&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo.monitoring.svc:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.tls.insecure&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.prometheus.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;0.0.0.0:19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.extensions.health_check&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].action&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;insert&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].key&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki.attribute.labels&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].value&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;k8s.pod.name, k8s.namespace.name&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.grpc.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${env:MY_POD_IP}:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.http.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${env:MY_POD_IP}:4318&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.zipkin.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${env:MY_POD_IP}:9411&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.extensions[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;health_check&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.processors[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;attributes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[1]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;zipkin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otel-collector&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.mode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;deployment&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.alertmanager.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.kube-state-metrics.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-node-exporter.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-pushgateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.global.scrape_interval&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;15s&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prom/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.persistentVolume.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.readinessProbeInitialDelay&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.securityContext&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Addons Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/gateway-addons-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/gateway-addons-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>An Add-ons Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="requirements">Requirements&lt;a class="td-heading-self-link" href="#requirements" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Repository&lt;/th>
 &lt;th>Name&lt;/th>
 &lt;th>Version&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://fluent.github.io/helm-charts">https://fluent.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>fluent-bit&lt;/td>
 &lt;td>0.30.4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>alloy&lt;/td>
 &lt;td>0.9.2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>grafana&lt;/td>
 &lt;td>8.0.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>loki&lt;/td>
 &lt;td>4.8.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://grafana.github.io/helm-charts">https://grafana.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>tempo&lt;/td>
 &lt;td>1.3.1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://open-telemetry.github.io/opentelemetry-helm-charts">https://open-telemetry.github.io/opentelemetry-helm-charts&lt;/a>&lt;/td>
 &lt;td>opentelemetry-collector&lt;/td>
 &lt;td>0.108.0&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://prometheus-community.github.io/helm-charts">https://prometheus-community.github.io/helm-charts&lt;/a>&lt;/td>
 &lt;td>prometheus&lt;/td>
 &lt;td>25.21.0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>alloy.alloy.configMap.content&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;// Write your Alloy config here:\nlogging {\n level = \&amp;quot;info\&amp;quot;\n format = \&amp;quot;logfmt\&amp;quot;\n}\nloki.write \&amp;quot;alloy\&amp;quot; {\n endpoint {\n url = \&amp;quot;http://loki.monitoring.svc:3100/loki/api/v1/push\&amp;quot;\n }\n}\n// discovery.kubernetes allows you to find scrape targets from Kubernetes resources.\n// It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.\ndiscovery.kubernetes \&amp;quot;pod\&amp;quot; {\n role = \&amp;quot;pod\&amp;quot;\n}\n\n// discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.\n// If no rules are defined, then the input targets are exported as-is.\ndiscovery.relabel \&amp;quot;pod_logs\&amp;quot; {\n targets = discovery.kubernetes.pod.targets\n\n // Label creation - \&amp;quot;namespace\&amp;quot; field from \&amp;quot;__meta_kubernetes_namespace\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_namespace\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;namespace\&amp;quot;\n }\n\n // Label creation - \&amp;quot;pod\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;pod\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;container\&amp;quot;\n }\n\n // Label creation - \&amp;quot;app\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_label_app_kubernetes_io_name\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_label_app_kubernetes_io_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;app\&amp;quot;\n }\n\n // Label creation - \&amp;quot;job\&amp;quot; field from \&amp;quot;__meta_kubernetes_namespace\&amp;quot; and \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_namespace\&amp;quot;, \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;job\&amp;quot;\n separator = \&amp;quot;/\&amp;quot;\n replacement = \&amp;quot;$1\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_uid\&amp;quot; and \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;\n // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_uid\&amp;quot;, \&amp;quot;__meta_kubernetes_pod_container_name\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;__path__\&amp;quot;\n separator = \&amp;quot;/\&amp;quot;\n replacement = \&amp;quot;/var/log/pods/*$1/*.log\&amp;quot;\n }\n\n // Label creation - \&amp;quot;container_runtime\&amp;quot; field from \&amp;quot;__meta_kubernetes_pod_container_id\&amp;quot;\n rule {\n source_labels = [\&amp;quot;__meta_kubernetes_pod_container_id\&amp;quot;]\n action = \&amp;quot;replace\&amp;quot;\n target_label = \&amp;quot;container_runtime\&amp;quot;\n regex = \&amp;quot;^(\\\\S+):\\\\/\\\\/.+$\&amp;quot;\n replacement = \&amp;quot;$1\&amp;quot;\n }\n}\n\n// loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.\nloki.source.kubernetes \&amp;quot;pod_logs\&amp;quot; {\n targets = discovery.relabel.pod_logs.output\n forward_to = [loki.process.pod_logs.receiver]\n}\n// loki.process receives log entries from other Loki components, applies one or more processing stages,\n// and forwards the results to the list of receivers in the component’s arguments.\nloki.process \&amp;quot;pod_logs\&amp;quot; {\n stage.static_labels {\n values = {\n cluster = \&amp;quot;envoy-gateway\&amp;quot;,\n }\n }\n\n forward_to = [loki.write.alloy.receiver]\n}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>alloy.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>alloy.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;alloy&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.filters&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[FILTER]\n Name kubernetes\n Match kube.*\n Merge_Log On\n Keep_Log Off\n K8S-Logging.Parser On\n K8S-Logging.Exclude On\n\n[FILTER]\n Name grep\n Match kube.*\n Regex $kubernetes['container_name'] ^envoy$\n\n[FILTER]\n Name parser\n Match kube.*\n Key_Name log\n Parser envoy\n Reserve_Data True\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.inputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[INPUT]\n Name tail\n Path /var/log/containers/*.log\n multiline.parser docker, cri\n Tag kube.*\n Mem_Buf_Limit 5MB\n Skip_Long_Lines On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.outputs&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[OUTPUT]\n Name loki\n Match kube.*\n Host loki.monitoring.svc.cluster.local\n Port 3100\n Labels job=fluentbit, app=$kubernetes['labels']['app'], k8s_namespace_name=$kubernetes['namespace_name'], k8s_pod_name=$kubernetes['pod_name'], k8s_container_name=$kubernetes['container_name']\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.config.service&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[SERVICE]\n Daemon Off\n Flush {{ .Values.flush }}\n Log_Level {{ .Values.logLevel }}\n Parsers_File parsers.conf\n Parsers_File custom_parsers.conf\n HTTP_Server On\n HTTP_Listen 0.0.0.0\n HTTP_Port {{ .Values.metricsPort }}\n Health_Check On\n&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;fluent/fluent-bit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;fluentbit.io/exclude&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/path&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/api/v1/metrics/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;2020&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.podAnnotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fluent-bit.testFramework.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.adminPassword&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;admin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].disableDeletion&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].editable&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].folder&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].options.path&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;/var/lib/grafana/dashboards/envoy-gateway&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].orgId&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardProviders.&amp;ldquo;dashboardproviders.yaml&amp;rdquo;.providers[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;file&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.dashboardsConfigMaps.envoy-gateway&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana-dashboards&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.apiVersion&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.datasources.&amp;ldquo;datasources.yaml&amp;rdquo;.datasources[0].url&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grafana&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>grafana.testFramework.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.backend.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.deploymentMode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;SingleBinary&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.gateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.auth_enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.commonConfig.replication_factor&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.compactorAddress&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.memberlist&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki-memberlist&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.rulerConfig.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.loki.storage.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;filesystem&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.lokiCanary.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.monitoring.selfMonitoring.grafanaAgent.installOperator&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.read.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.singleBinary.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.test.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>loki.write.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.debug.verbosity&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;detailed&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.loki.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http://loki.monitoring.svc:3100/loki/api/v1/push&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo.monitoring.svc:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.otlp.tls.insecure&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.exporters.prometheus.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.extensions.health_check.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:13133&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].action&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;insert&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].key&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki.attribute.labels&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.processors.attributes.actions[0].value&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;k8s.pod.name, k8s.namespace.name&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.datadog.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8126&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.grpc.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:14250&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.thrift_compact.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:6831&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.jaeger.protocols.thrift_http.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:14268&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.grpc.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:4317&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.otlp.protocols.http.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:4318&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].job_name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;opentelemetry-collector&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].scrape_interval&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;10s&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.prometheus.config.scrape_configs[0].static_configs[0].targets[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8888&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.receivers.zipkin.endpoint&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:9411&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.extensions[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;health_check&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;loki&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.processors[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;attributes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.logs.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;datadog&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.metrics.receivers[1]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.exporters[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;datadog&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[1]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otlp&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.pipelines.traces.receivers[2]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;zipkin&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.config.service.telemetry.metrics.address&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;[${env:MY_POD_IP}]:8888&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otel-collector&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;otel/opentelemetry-collector-contrib&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>opentelemetry-collector.mode&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;deployment&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.alertmanager.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.kube-state-metrics.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-node-exporter.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.prometheus-pushgateway.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.global.scrape_interval&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;15s&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;prom/prometheus&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.persistentVolume.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.readinessProbeInitialDelay&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.securityContext&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>prometheus.server.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.enabled&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.fullnameOverride&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;tempo&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tempo.service.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service.
Depending on the Service Type, the addresses of gateway can be used as:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/gateway-address/#external-ips">External IPs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/gateway-address/#cluster-ip">Cluster IP&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service,
this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code> and the &lt;a href="../../../api/extension_types#servicetype">ServiceType&lt;/a> to be of &lt;code>LoadBalancer&lt;/code> or &lt;code>NodePort&lt;/code>.&lt;/p></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service.
Depending on the Service Type, the addresses of gateway can be used as:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/gateway-address/#external-ips">External IPs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/gateway-address/#cluster-ip">Cluster IP&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service,
this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code> and the &lt;a href="../../../api/extension_types#servicetype">ServiceType&lt;/a> to be of &lt;code>LoadBalancer&lt;/code> or &lt;code>NodePort&lt;/code>.&lt;/p></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service. The currently supported addresses are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/user/gateway-address/#External-IPs">External IPs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.5.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service, this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code>.&lt;/p></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service. The currently supported addresses are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/gateway-address/#External-IPs">External IPs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.6.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service, this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code>.&lt;/p></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service.
Depending on the Service Type, the addresses of gateway can be used as:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/gateway-address/#external-ips">External IPs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/gateway-address/#cluster-ip">Cluster IP&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.&lt;/p>
&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service,
this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code> and the &lt;a href="../../../api/extension_types#servicetype">ServiceType&lt;/a> to be of &lt;code>LoadBalancer&lt;/code> or &lt;code>NodePort&lt;/code>.&lt;/p></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service.
Depending on the Service Type, the addresses of gateway can be used as:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/gateway-address/#external-ips">External IPs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/gateway-address/#cluster-ip">Cluster IP&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.&lt;/p>
&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service,
this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code> and the &lt;a href="../../../api/extension_types#servicetype">ServiceType&lt;/a> to be of &lt;code>LoadBalancer&lt;/code> or &lt;code>NodePort&lt;/code>.&lt;/p></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service.
Depending on the Service Type, the addresses of gateway can be used as:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/#external-ips">External IPs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/#cluster-ip">Cluster IP&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service,
this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code> and the &lt;a href="../../../api/extension_types#servicetype">ServiceType&lt;/a> to be of &lt;code>LoadBalancer&lt;/code> or &lt;code>NodePort&lt;/code>.&lt;/p></description></item><item><title>Gateway API Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/gateway-api-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/gateway-api-metrics/</guid><description>&lt;p>Resource metrics for Gateway API objects are available using the &lt;a href="https://github.com/Kuadrant/gateway-api-state-metrics">Gateway API State Metrics&lt;/a> project.
The project also provides example dashboard for visualising the metrics using Grafana, and example alerts using Prometheus &amp;amp; Alertmanager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;p>Run the following commands to install the metrics stack, with the Gateway API State Metrics configuration, on your kubernetes cluster:&lt;/p></description></item><item><title>Gateway API Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/gateway-api-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/gateway-api-metrics/</guid><description>&lt;p>Resource metrics for Gateway API objects are available using the &lt;a href="https://github.com/Kuadrant/gateway-api-state-metrics">Gateway API State Metrics&lt;/a> project.
The project also provides example dashboard for visualising the metrics using Grafana, and example alerts using Prometheus &amp;amp; Alertmanager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;p>Run the following commands to install the metrics stack, with the Gateway API State Metrics configuration, on your kubernetes cluster:&lt;/p></description></item><item><title>Gateway API Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/gateway-api-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/gateway-api-metrics/</guid><description>&lt;p>Resource metrics for Gateway API objects are available using the &lt;a href="https://github.com/Kuadrant/gateway-api-state-metrics">Gateway API State Metrics&lt;/a> project.
The project also provides example dashboard for visualising the metrics using Grafana, and example alerts using Prometheus &amp;amp; Alertmanager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Run the following commands to install the metrics stack, with the Gateway API State Metrics configuration, on your kubernetes cluster:&lt;/p></description></item><item><title>Gateway API Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/observability/gateway-api-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/observability/gateway-api-metrics/</guid><description>&lt;p>Resource metrics for Gateway API objects are available using the &lt;a href="https://github.com/Kuadrant/gateway-api-state-metrics">Gateway API State Metrics&lt;/a> project.
The project also provides example dashboard for visualising the metrics using Grafana, and example alerts using Prometheus &amp;amp; Alertmanager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Run the following commands to install the metrics stack, with the Gateway API State Metrics configuration, on your kubernetes cluster:&lt;/p></description></item><item><title>Gateway API Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/gateway-api-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/gateway-api-metrics/</guid><description>&lt;p>Resource metrics for Gateway API objects are available using the &lt;a href="https://github.com/Kuadrant/gateway-api-state-metrics">Gateway API State Metrics&lt;/a> project.
The project also provides example dashboard for visualising the metrics using Grafana, and example alerts using Prometheus &amp;amp; Alertmanager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Run the following commands to install the metrics stack, with the Gateway API State Metrics configuration, on your kubernetes cluster:&lt;/p></description></item><item><title>Gateway API Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/gateway-api-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/gateway-api-metrics/</guid><description>&lt;p>Resource metrics for Gateway API objects are available using the &lt;a href="https://github.com/Kuadrant/gateway-api-state-metrics">Gateway API State Metrics&lt;/a> project.
The project also provides example dashboard for visualising the metrics using Grafana, and example alerts using Prometheus &amp;amp; Alertmanager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;p>Run the following commands to install the metrics stack, with the Gateway API State Metrics configuration, on your kubernetes cluster:&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="../../design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Gateway Exported Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/gateway-exported-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/gateway-exported-metrics/</guid><description>&lt;p>The Envoy Gateway provides a collection of self-monitoring metrics in &lt;a href="https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format">Prometheus format&lt;/a>.&lt;/p>
&lt;p>These metrics allow monitoring of the behavior of Envoy Gateway itself (as distinct from that of the EnvoyProxy it managed).&lt;/p>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">EnvoyProxy Metrics&lt;/h4>

 For EnvoyProxy Metrics, please refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/proxy-metric/">EnvoyProxy Metrics&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="watching-components">Watching Components&lt;a class="td-heading-self-link" href="#watching-components" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Resource Provider, xDS Translator and Infra Manager etc. are key components that made up of Envoy Gateway,
they all follow the design of &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/watching/">Watching Components&lt;/a>.&lt;/p></description></item><item><title>Gateway Exported Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/gateway-exported-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/gateway-exported-metrics/</guid><description>&lt;p>The Envoy Gateway provides a collection of self-monitoring metrics in &lt;a href="https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format">Prometheus format&lt;/a>.&lt;/p>
&lt;p>These metrics allow monitoring of the behavior of Envoy Gateway itself (as distinct from that of the EnvoyProxy it managed).&lt;/p>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">EnvoyProxy Metrics&lt;/h4>

 For EnvoyProxy Metrics, please refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/proxy-metric/">EnvoyProxy Metrics&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="watching-components">Watching Components&lt;a class="td-heading-self-link" href="#watching-components" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Resource Provider, xDS Translator and Infra Manager etc. are key components that made up of Envoy Gateway,
they all follow the design of &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/watching/">Watching Components&lt;/a>.&lt;/p></description></item><item><title>Gateway Exported Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/gateway-exported-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/gateway-exported-metrics/</guid><description>&lt;p>The Envoy Gateway provides a collection of self-monitoring metrics in &lt;a href="https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format">Prometheus format&lt;/a>.&lt;/p>
&lt;p>These metrics allow monitoring of the behavior of Envoy Gateway itself (as distinct from that of the EnvoyProxy it managed).&lt;/p>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">EnvoyProxy Metrics&lt;/h4>

 For EnvoyProxy Metrics, please refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/proxy-metric/">EnvoyProxy Metrics&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="watching-components">Watching Components&lt;a class="td-heading-self-link" href="#watching-components" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Resource Provider, xDS Translator and Infra Manager etc. are key components that made up of Envoy Gateway,
they all follow the design of &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/watching/">Watching Components&lt;/a>.&lt;/p></description></item><item><title>Gateway Exported Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/gateway-exported-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/gateway-exported-metrics/</guid><description>&lt;p>The Envoy Gateway provides a collection of self-monitoring metrics in &lt;a href="https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format">Prometheus format&lt;/a>.&lt;/p>
&lt;p>These metrics allow monitoring of the behavior of Envoy Gateway itself (as distinct from that of the EnvoyProxy it managed).&lt;/p>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">EnvoyProxy Metrics&lt;/h4>

 For EnvoyProxy Metrics, please refer to the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/proxy-metric/">EnvoyProxy Metrics&lt;/a> to learn more.

&lt;/div>

&lt;h2 id="watching-components">Watching Components&lt;a class="td-heading-self-link" href="#watching-components" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Resource Provider, xDS Translator and Infra Manager etc. are key components that made up of Envoy Gateway,
they all follow the design of &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/watching/">Watching Components&lt;/a>.&lt;/p></description></item><item><title>Gateway Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/gateway-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/gateway-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>The Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>certgen&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{&amp;quot;job&amp;quot;:{&amp;quot;affinity&amp;quot;:{},&amp;quot;annotations&amp;quot;:{},&amp;quot;nodeSelector&amp;quot;:{},&amp;quot;resources&amp;quot;:{},&amp;quot;securityContext&amp;quot;:{&amp;quot;allowPrivilegeEscalation&amp;quot;:false,&amp;quot;capabilities&amp;quot;:{&amp;quot;drop&amp;quot;:[&amp;quot;ALL&amp;quot;]},&amp;quot;privileged&amp;quot;:false,&amp;quot;readOnlyRootFilesystem&amp;quot;:true,&amp;quot;runAsGroup&amp;quot;:65534,&amp;quot;runAsNonRoot&amp;quot;:true,&amp;quot;runAsUser&amp;quot;:65534,&amp;quot;seccompProfile&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;RuntimeDefault&amp;quot;}},&amp;quot;tolerations&amp;quot;:[],&amp;quot;ttlSecondsAfterFinished&amp;quot;:30},&amp;quot;rbac&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;labels&amp;quot;:{}}}&lt;/code>&lt;/td>
 &lt;td>Certgen is used to generate the certificates required by EnvoyGateway. If you want to construct a custom certificate, you can generate a custom certificate through Cert-Manager before installing EnvoyGateway. Certgen will not overwrite the custom certificate. Please do not manually modify &lt;code>values.yaml&lt;/code> to disable certgen, it may cause EnvoyGateway OIDC,OAuth2,etc. to not work as expected.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.gateway.controllerName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gateway.envoyproxy.io/gatewayclass-controller&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.logging.level.default&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.provider.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Kubernetes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>createNamespace&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;1024Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;100m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;256Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.allowPrivilegeEscalation&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.capabilities.drop[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ALL&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.privileged&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsGroup&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>65532&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsNonRoot&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsUser&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>65532&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.seccompProfile.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;RuntimeDefault&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.affinity&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.nodeSelector&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.tolerations&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.topologySpreadConstraints&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grpc&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ratelimit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;wasm&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;metrics&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.priorityClassName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;docker.io/envoyproxy/ratelimit:master&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;IfNotPresent&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kubernetesClusterDomain&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;cluster.local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>podDisruptionBudget.minAvailable&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>service.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/gateway-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/gateway-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>The Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>certgen&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{&amp;quot;job&amp;quot;:{&amp;quot;affinity&amp;quot;:{},&amp;quot;annotations&amp;quot;:{},&amp;quot;nodeSelector&amp;quot;:{},&amp;quot;resources&amp;quot;:{},&amp;quot;securityContext&amp;quot;:{&amp;quot;allowPrivilegeEscalation&amp;quot;:false,&amp;quot;capabilities&amp;quot;:{&amp;quot;drop&amp;quot;:[&amp;quot;ALL&amp;quot;]},&amp;quot;privileged&amp;quot;:false,&amp;quot;readOnlyRootFilesystem&amp;quot;:true,&amp;quot;runAsGroup&amp;quot;:65534,&amp;quot;runAsNonRoot&amp;quot;:true,&amp;quot;runAsUser&amp;quot;:65534,&amp;quot;seccompProfile&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;RuntimeDefault&amp;quot;}},&amp;quot;tolerations&amp;quot;:[],&amp;quot;ttlSecondsAfterFinished&amp;quot;:30},&amp;quot;rbac&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;labels&amp;quot;:{}}}&lt;/code>&lt;/td>
 &lt;td>Certgen is used to generate the certificates required by EnvoyGateway. If you want to construct a custom certificate, you can generate a custom certificate through Cert-Manager before installing EnvoyGateway. Certgen will not overwrite the custom certificate. Please do not manually modify &lt;code>values.yaml&lt;/code> to disable certgen, it may cause EnvoyGateway OIDC,OAuth2,etc. to not work as expected.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.gateway.controllerName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gateway.envoyproxy.io/gatewayclass-controller&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.logging.level.default&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.provider.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Kubernetes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>createNamespace&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;1024Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;100m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;256Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.allowPrivilegeEscalation&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.capabilities.drop[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ALL&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.privileged&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsGroup&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>65532&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsNonRoot&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsUser&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>65532&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.seccompProfile.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;RuntimeDefault&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.affinity&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.nodeSelector&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.tolerations&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.topologySpreadConstraints&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grpc&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ratelimit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;wasm&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;metrics&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.priorityClassName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;docker.io/envoyproxy/ratelimit:master&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;IfNotPresent&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kubernetesClusterDomain&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;cluster.local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>podDisruptionBudget.minAvailable&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>service.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/gateway-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/install/gateway-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>The Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>certgen&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{&amp;quot;job&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;resources&amp;quot;:{},&amp;quot;ttlSecondsAfterFinished&amp;quot;:30},&amp;quot;rbac&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;labels&amp;quot;:{}}}&lt;/code>&lt;/td>
 &lt;td>Certgen is used to generate the certificates required by EnvoyGateway. If you want to construct a custom certificate, you can generate a custom certificate through Cert-Manager before installing EnvoyGateway. Certgen will not overwrite the custom certificate. Please do not manually modify &lt;code>values.yaml&lt;/code> to disable certgen, it may cause EnvoyGateway OIDC,OAuth2,etc. to not work as expected.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.gateway.controllerName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gateway.envoyproxy.io/gatewayclass-controller&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.logging.level.default&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.provider.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Kubernetes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>createNamespace&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;500m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;1024Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;100m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;256Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.affinity&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.tolerations&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.topologySpreadConstraints&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grpc&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ratelimit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;wasm&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;metrics&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;docker.io/envoyproxy/ratelimit:master&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;IfNotPresent&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kubernetesClusterDomain&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;cluster.local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>podDisruptionBudget.minAvailable&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Helm Chart</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/gateway-helm-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/gateway-helm-api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>The Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>certgen&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{&amp;quot;job&amp;quot;:{&amp;quot;affinity&amp;quot;:{},&amp;quot;annotations&amp;quot;:{},&amp;quot;nodeSelector&amp;quot;:{},&amp;quot;resources&amp;quot;:{},&amp;quot;securityContext&amp;quot;:{&amp;quot;allowPrivilegeEscalation&amp;quot;:false,&amp;quot;capabilities&amp;quot;:{&amp;quot;drop&amp;quot;:[&amp;quot;ALL&amp;quot;]},&amp;quot;privileged&amp;quot;:false,&amp;quot;readOnlyRootFilesystem&amp;quot;:true,&amp;quot;runAsGroup&amp;quot;:65534,&amp;quot;runAsNonRoot&amp;quot;:true,&amp;quot;runAsUser&amp;quot;:65534,&amp;quot;seccompProfile&amp;quot;:{&amp;quot;type&amp;quot;:&amp;quot;RuntimeDefault&amp;quot;}},&amp;quot;tolerations&amp;quot;:[],&amp;quot;ttlSecondsAfterFinished&amp;quot;:30},&amp;quot;rbac&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;labels&amp;quot;:{}}}&lt;/code>&lt;/td>
 &lt;td>Certgen is used to generate the certificates required by EnvoyGateway. If you want to construct a custom certificate, you can generate a custom certificate through Cert-Manager before installing EnvoyGateway. Certgen will not overwrite the custom certificate. Please do not manually modify &lt;code>values.yaml&lt;/code> to disable certgen, it may cause EnvoyGateway OIDC,OAuth2,etc. to not work as expected.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.gateway.controllerName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gateway.envoyproxy.io/gatewayclass-controller&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.logging.level.default&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.provider.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Kubernetes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>createNamespace&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;1024Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;100m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;256Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.allowPrivilegeEscalation&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.capabilities.drop[0]&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ALL&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.privileged&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsGroup&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>65532&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsNonRoot&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>true&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.runAsUser&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>65532&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.securityContext.seccompProfile.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;RuntimeDefault&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.affinity&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/port&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;19001&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations.&amp;ldquo;prometheus.io/scrape&amp;rdquo;&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;true&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.nodeSelector&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.tolerations&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.topologySpreadConstraints&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grpc&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ratelimit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;wasm&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[2].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18002&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;metrics&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[3].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.priorityClassName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>nil&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.envoyGateway.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.image&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;docker.io/envoyproxy/ratelimit:master&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;IfNotPresent&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>global.images.ratelimit.pullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kubernetesClusterDomain&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;cluster.local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>podDisruptionBudget.minAvailable&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>service.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Gateway Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/gateway-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/gateway-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config gateway control-plane observability, includes metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Gateway Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/gateway-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/gateway-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config gateway control-plane observability, includes metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Gateway Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/gateway-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/gateway-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config gateway control-plane observability, includes metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Gateway Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/gateway-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/gateway-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config gateway control-plane observability, includes metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>gateway-helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/install/api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>The Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>certgen.job.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>certgen.job.ttlSecondsAfterFinished&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>certgen.rbac.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>certgen.rbac.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.gateway.controllerName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gateway.envoyproxy.io/gatewayclass-controller&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.logging.level.default&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.provider.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Kubernetes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>createNamespace&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.cert.expiryDays&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>365&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${ImageRepository}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${ImageTag}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Always&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;500m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;1024Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;100m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;256Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grpc&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ratelimit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;http&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].protocol&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;TCP&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kubernetesClusterDomain&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;cluster.local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>gateway-helm</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/install/api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v1.0.0-informational?style=flat-square" alt="Version: v1.0.0"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>The Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>certgen.job.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>certgen.job.resources&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>certgen.job.ttlSecondsAfterFinished&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>0&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>certgen.rbac.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>certgen.rbac.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.gateway.controllerName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gateway.envoyproxy.io/gatewayclass-controller&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.logging.level.default&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.provider.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Kubernetes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>createNamespace&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${ImageRepository}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${ImageTag}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Always&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullSecrets&lt;/td>
 &lt;td>list&lt;/td>
 &lt;td>&lt;code>[]&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;500m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;1024Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;100m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;256Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.affinity&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grpc&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ratelimit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>19001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kubernetesClusterDomain&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;cluster.local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>Global Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/global-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/global-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Global Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/global-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/global-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Global Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/global-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/global-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Global Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/global-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/global-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Global Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/global-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/global-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/install.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/v0.3.0/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The manifest installs a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, a Deployment, a Service, and a GRPCRoute resource.
The GatewayClass is a cluster-scoped resource that represents a class of Gateways that can be instantiated.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.4.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/v0.4.0/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The manifest installs a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, a Deployment, a Service, and a GRPCRoute resource.
The GatewayClass is a cluster-scoped resource that represents a class of Gateways that can be instantiated.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.5.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/v0.5.0/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The manifest installs a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, a Deployment, a Service, and a GRPCRoute resource.
The GatewayClass is a cluster-scoped resource that represents a class of Gateways that can be instantiated.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.6.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/v0.6.0/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The manifest installs a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, a Deployment, a Service, and a GRPCRoute resource.
The GatewayClass is a cluster-scoped resource that represents a class of Gateways that can be instantiated.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/latest/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The manifest installs a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, a Deployment, a Service, and a GRPCRoute resource.
The GatewayClass is a cluster-scoped resource that represents a class of Gateways that can be instantiated.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/latest/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The manifest installs a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, a Deployment, a Service, and a GRPCRoute resource.
The GatewayClass is a cluster-scoped resource that represents a class of Gateways that can be instantiated.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p></description></item><item><title>Helm Chart Values</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/install/api/</guid><description>&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Version-v0.0.0--latest-informational?style=flat-square" alt="Version: v0.0.0-latest"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/Type-application-informational?style=flat-square" alt="Type: application"> 
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/https://img.shields.io/badge/AppVersion-latest-informational?style=flat-square" alt="AppVersion: latest">&lt;/p>
&lt;p>The Helm chart for Envoy Gateway&lt;/p>
&lt;p>&lt;strong>Homepage:&lt;/strong> &lt;a href="https://gateway.envoyproxy.io/">https://gateway.envoyproxy.io/&lt;/a>&lt;/p>
&lt;h2 id="maintainers">Maintainers&lt;a class="td-heading-self-link" href="#maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Email&lt;/th>
 &lt;th>Url&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>envoy-gateway-steering-committee&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md">https://github.com/envoyproxy/gateway/blob/main/GOVERNANCE.md&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoy-gateway-maintainers&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS">https://github.com/envoyproxy/gateway/blob/main/CODEOWNERS&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="source-code">Source Code&lt;a class="td-heading-self-link" href="#source-code" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/envoyproxy/gateway">https://github.com/envoyproxy/gateway&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="values">Values&lt;a class="td-heading-self-link" href="#values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Key&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Default&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>config.envoyGateway.gateway.controllerName&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gateway.envoyproxy.io/gatewayclass-controller&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.logging.level.default&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;info&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config.envoyGateway.provider.type&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Kubernetes&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>createNamespace&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>&lt;code>false&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${ImageRepository}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;${ImageTag}&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.imagePullPolicy&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;Always&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;500m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;1024Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;100m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.envoyGateway.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;256Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.kubeRbacProxy.image.repository&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;gcr.io/kubebuilder/kube-rbac-proxy&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.kubeRbacProxy.image.tag&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;v0.11.0&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.kubeRbacProxy.resources.limits.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;500m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.kubeRbacProxy.resources.limits.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;128Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.kubeRbacProxy.resources.requests.cpu&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;5m&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.kubeRbacProxy.resources.requests.memory&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;64Mi&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.annotations&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.pod.labels&lt;/td>
 &lt;td>object&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;grpc&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[0].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18000&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;ratelimit&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.ports[1].targetPort&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>18001&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>deployment.replicas&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>1&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].name&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;https&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].port&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>&lt;code>8443&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].protocol&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;TCP&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>envoyGatewayMetricsService.ports[0].targetPort&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;https&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kubernetesClusterDomain&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>&lt;code>&amp;quot;cluster.local&amp;quot;&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/user/secure-gateways/">Secure Gateways&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/user/secure-gateways/">Secure Gateways&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/user/secure-gateways/">Secure Gateways&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/user/secure-gateways/">Secure Gateways&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTPS.&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This task
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This task
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This guide
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This guide
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This guide
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This guide
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This guide
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This guide
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This task
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This task
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Timeouts</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-timeouts/</guid><description>&lt;p>The default request timeout is set to 15 seconds in Envoy Proxy.
The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> resource allows users to configure request timeouts for an &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule">HTTPRouteRule&lt;/a>.
This task shows you how to configure timeouts.&lt;/p>
&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> supports two kinds of timeouts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>request&lt;/strong>: Request specifies the maximum duration for a gateway to respond to an HTTP request.&lt;/li>
&lt;li>&lt;strong>backendRequest&lt;/strong>: BackendRequest specifies a timeout for an individual request from the gateway to a backend.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The Request duration must be &amp;gt;= BackendRequest duration&lt;/p></description></item><item><title>HTTP Timeouts</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-timeouts/</guid><description>&lt;p>The default request timeout is set to 15 seconds in Envoy Proxy.
The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> resource allows users to configure request timeouts for an &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule">HTTPRouteRule&lt;/a>.
This task shows you how to configure timeouts.&lt;/p>
&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> supports two kinds of timeouts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>request&lt;/strong>: Request specifies the maximum duration for a gateway to respond to an HTTP request.&lt;/li>
&lt;li>&lt;strong>backendRequest&lt;/strong>: BackendRequest specifies a timeout for an individual request from the gateway to a backend.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The Request duration must be &amp;gt;= BackendRequest duration&lt;/p></description></item><item><title>HTTP Timeouts</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-timeouts/</guid><description>&lt;p>The default request timeout is set to 15 seconds in Envoy Proxy.
The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> resource allows users to configure request timeouts for an &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule">HTTPRouteRule&lt;/a>.
This task shows you how to configure timeouts.&lt;/p>
&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> supports two kinds of timeouts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>request&lt;/strong>: Request specifies the maximum duration for a gateway to respond to an HTTP request.&lt;/li>
&lt;li>&lt;strong>backendRequest&lt;/strong>: BackendRequest specifies a timeout for an individual request from the gateway to a backend.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The Request duration must be &amp;gt;= BackendRequest duration&lt;/p></description></item><item><title>HTTP Timeouts</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-timeouts/</guid><description>&lt;p>The default request timeout is set to 15 seconds in Envoy Proxy.
The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> resource allows users to configure request timeouts for an &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule">HTTPRouteRule&lt;/a>.
This task shows you how to configure timeouts.&lt;/p>
&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> supports two kinds of timeouts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>request&lt;/strong>: Request specifies the maximum duration for a gateway to respond to an HTTP request.&lt;/li>
&lt;li>&lt;strong>backendRequest&lt;/strong>: BackendRequest specifies a timeout for an individual request from the gateway to a backend.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The Request duration must be &amp;gt;= BackendRequest duration&lt;/p></description></item><item><title>HTTP Timeouts</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-timeouts/</guid><description>&lt;p>The default request timeout is set to 15 seconds in Envoy Proxy.
The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> resource allows users to configure request timeouts for an &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule">HTTPRouteRule&lt;/a>.
This task shows you how to configure timeouts.&lt;/p>
&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> supports two kinds of timeouts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>request&lt;/strong>: Request specifies the maximum duration for a gateway to respond to an HTTP request.&lt;/li>
&lt;li>&lt;strong>backendRequest&lt;/strong>: BackendRequest specifies a timeout for an individual request from the gateway to a backend.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The Request duration must be &amp;gt;= BackendRequest duration&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="rewrite-url-prefix-path">Rewrite URL Prefix Path&lt;a class="td-heading-self-link" href="#rewrite-url-prefix-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>You can configure to rewrite the prefix in the url like below. In this example, any curls to
&lt;code>http://${GATEWAY_HOST}/get/xxx&lt;/code> will be rewritten to &lt;code>http://${GATEWAY_HOST}/replace/xxx&lt;/code>.&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="rewrite-url-prefix-path">Rewrite URL Prefix Path&lt;a class="td-heading-self-link" href="#rewrite-url-prefix-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>You can configure to rewrite the prefix in the url like below. In this example, any curls to
&lt;code>http://${GATEWAY_HOST}/get/xxx&lt;/code> will be rewritten to &lt;code>http://${GATEWAY_HOST}/replace/xxx&lt;/code>.&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="rewrite-url-prefix-path">Rewrite URL Prefix Path&lt;a class="td-heading-self-link" href="#rewrite-url-prefix-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>You can configure to rewrite the prefix in the url like below. In this example, any curls to
&lt;code>http://${GATEWAY_HOST}/get/xxx&lt;/code> will be rewritten to &lt;code>http://${GATEWAY_HOST}/replace/xxx&lt;/code>.&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="rewrite-url-prefix-path">Rewrite URL Prefix Path&lt;a class="td-heading-self-link" href="#rewrite-url-prefix-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>You can configure to rewrite the prefix in the url like below. In this example, any curls to
&lt;code>http://${GATEWAY_HOST}/get/xxx&lt;/code> will be rewritten to &lt;code>http://${GATEWAY_HOST}/replace/xxx&lt;/code>.&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="rewrite-url-prefix-path">Rewrite URL Prefix Path&lt;a class="td-heading-self-link" href="#rewrite-url-prefix-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>You can configure to rewrite the prefix in the url like below. In this example, any curls to
&lt;code>http://${GATEWAY_HOST}/get/xxx&lt;/code> will be rewritten to &lt;code>http://${GATEWAY_HOST}/replace/xxx&lt;/code>.&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="rewrite-url-prefix-path">Rewrite URL Prefix Path&lt;a class="td-heading-self-link" href="#rewrite-url-prefix-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>You can configure to rewrite the prefix in the url like below. In this example, any curls to
&lt;code>http://${GATEWAY_HOST}/get/xxx&lt;/code> will be rewritten to &lt;code>http://${GATEWAY_HOST}/replace/xxx&lt;/code>.&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTP3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http3/</guid><description>&lt;p>This task will help you get started using HTTP3 using EG.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTP3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http3/</guid><description>&lt;p>This task will help you get started using HTTP3 using EG.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTP3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http3/</guid><description>&lt;p>This task will help you get started using HTTP3 using EG.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>HTTP3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http3/</guid><description>&lt;p>This task will help you get started using HTTP3 using EG.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>HTTP3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http3/</guid><description>&lt;p>This task will help you get started using HTTP3 using EG.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="../http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="../http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/user/http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="../http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="../http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="../http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="../http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Introduce egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/egctl/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>EG should provide a command line tool with following capabilities:&lt;/p>
&lt;ul>
&lt;li>Collect configuration from envoy proxy and gateway&lt;/li>
&lt;li>Analyse system configuration to diagnose any issues in envoy gateway&lt;/li>
&lt;/ul>
&lt;p>This tool is named &lt;code>egctl&lt;/code>.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;a class="td-heading-self-link" href="#syntax" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Use the following syntax to run &lt;code>egctl&lt;/code> commands from your terminal window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">egctl [command] [entity] [name] [flags]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>command&lt;/code>, &lt;code>name&lt;/code>, and &lt;code>flags&lt;/code> are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>command&lt;/code>: Specifies the operation that you want to perform on one or more resources,
for example &lt;code>config&lt;/code>, &lt;code>version&lt;/code>.&lt;/p></description></item><item><title>IP Allowlist/Denylist</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/restrict-ip-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/restrict-ip-access/</guid><description>&lt;p>This task provides instructions for configuring IP allowlist/denylist on Envoy Gateway. IP allowlist/denylist
checks if an incoming request is from an allowed IP address before routing the request to a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure IP allowlist/denylist.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>IP Allowlist/Denylist</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/restrict-ip-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/restrict-ip-access/</guid><description>&lt;p>This task provides instructions for configuring IP allowlist/denylist on Envoy Gateway. IP allowlist/denylist
checks if an incoming request is from an allowed IP address before routing the request to a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure IP allowlist/denylist.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>IP Allowlist/Denylist</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/restrict-ip-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/restrict-ip-access/</guid><description>&lt;p>This task provides instructions for configuring IP allowlist/denylist on Envoy Gateway. IP allowlist/denylist
checks if an incoming request is from an allowed IP address before routing the request to a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure IP allowlist/denylist.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>IP Allowlist/Denylist</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/restrict-ip-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/restrict-ip-access/</guid><description>&lt;p>This task provides instructions for configuring IP allowlist/denylist on Envoy Gateway. IP allowlist/denylist
checks if an incoming request is from an allowed IP address before routing the request to a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure IP allowlist/denylist.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>JWT Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/jwt-authentication/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>JWT Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/jwt-authentication/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>JWT Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/jwt-authentication/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../design/security-policy">SecurityPolicy&lt;/a> that allows the user to configure JWT authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>JWT Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/jwt-authentication/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>JWT Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/jwt-authentication/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>JWT Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/jwt-authentication/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>JWT Claim-Based Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/jwt-claim-authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/jwt-claim-authorization/</guid><description>&lt;p>This task provides instructions for configuring JWT claim-based authorization. JWT claim-based authorization checks if an incoming request has the required JWT claims before routing the request to a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT claim-based authorization.&lt;/p>
&lt;p>This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>JWT Claim-Based Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/jwt-claim-authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/jwt-claim-authorization/</guid><description>&lt;p>This task provides instructions for configuring JWT claim-based authorization. JWT claim-based authorization checks if an incoming request has the required JWT claims before routing the request to a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT claim-based authorization.&lt;/p>
&lt;p>This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>JWT Claim-Based Authorization</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/jwt-claim-authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/jwt-claim-authorization/</guid><description>&lt;p>This task provides instructions for configuring JWT claim-based authorization. JWT claim-based authorization checks if an incoming request has the required JWT claims before routing the request to a backend service.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure JWT claim-based authorization.&lt;/p>
&lt;p>This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> resource.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Load Balancing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/load-balancing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/load-balancing/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/overview">Envoy load balancing&lt;/a> is a way of distributing traffic between multiple hosts within a single upstream cluster
in order to effectively make use of available resources.&lt;/p>
&lt;p>Envoy Gateway supports the following load balancing policies:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Round Robin&lt;/strong>: a simple policy in which each available upstream host is selected in round robin order.&lt;/li>
&lt;li>&lt;strong>Random&lt;/strong>: load balancer selects a random available host.&lt;/li>
&lt;li>&lt;strong>Least Request&lt;/strong>: load balancer uses different algorithms depending on whether hosts have the same or different weights.&lt;/li>
&lt;li>&lt;strong>Consistent Hash&lt;/strong>: load balancer implements consistent hashing to upstream hosts.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired load balancing polices.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource. If &lt;code>loadBalancer&lt;/code> is not specified in &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>, the default load balancing policy is &lt;code>Least Request&lt;/code>.&lt;/p></description></item><item><title>Load Balancing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/load-balancing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/load-balancing/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/overview">Envoy load balancing&lt;/a> is a way of distributing traffic between multiple hosts within a single upstream cluster
in order to effectively make use of available resources.&lt;/p>
&lt;p>Envoy Gateway supports the following load balancing policies:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Round Robin&lt;/strong>: a simple policy in which each available upstream host is selected in round robin order.&lt;/li>
&lt;li>&lt;strong>Random&lt;/strong>: load balancer selects a random available host.&lt;/li>
&lt;li>&lt;strong>Least Request&lt;/strong>: load balancer uses different algorithms depending on whether hosts have the same or different weights.&lt;/li>
&lt;li>&lt;strong>Consistent Hash&lt;/strong>: load balancer implements consistent hashing to upstream hosts.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired load balancing polices.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource. If &lt;code>loadBalancer&lt;/code> is not specified in &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>, the default load balancing policy is &lt;code>Least Request&lt;/code>.&lt;/p></description></item><item><title>Load Balancing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/load-balancing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/load-balancing/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/overview">Envoy load balancing&lt;/a> is a way of distributing traffic between multiple hosts within a single upstream cluster
in order to effectively make use of available resources.&lt;/p>
&lt;p>Envoy Gateway supports the following load balancing policies:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Round Robin&lt;/strong>: a simple policy in which each available upstream host is selected in round robin order.&lt;/li>
&lt;li>&lt;strong>Random&lt;/strong>: load balancer selects a random available host.&lt;/li>
&lt;li>&lt;strong>Least Request&lt;/strong>: load balancer uses different algorithms depending on whether hosts have the same or different weights.&lt;/li>
&lt;li>&lt;strong>Consistent Hash&lt;/strong>: load balancer implements consistent hashing to upstream hosts.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired load balancing polices.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource. If &lt;code>loadBalancer&lt;/code> is not specified in &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>, the default load balancing policy is &lt;code>Least Request&lt;/code>.&lt;/p></description></item><item><title>Load Balancing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/load-balancing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/load-balancing/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/overview">Envoy load balancing&lt;/a> is a way of distributing traffic between multiple hosts within a single upstream cluster
in order to effectively make use of available resources.&lt;/p>
&lt;p>Envoy Gateway supports the following load balancing policies:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Round Robin&lt;/strong>: a simple policy in which each available upstream host is selected in round robin order.&lt;/li>
&lt;li>&lt;strong>Random&lt;/strong>: load balancer selects a random available host.&lt;/li>
&lt;li>&lt;strong>Least Request&lt;/strong>: load balancer uses different algorithms depending on whether hosts have the same or different weights.&lt;/li>
&lt;li>&lt;strong>Consistent Hash&lt;/strong>: load balancer implements consistent hashing to upstream hosts.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired load balancing polices.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource. If &lt;code>loadBalancer&lt;/code> is not specified in &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>, the default load balancing policy is &lt;code>Least Request&lt;/code>.&lt;/p></description></item><item><title>Local Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/local-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/local-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Local Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/local-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/local-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Local Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/local-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/local-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Local Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/local-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/local-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Local Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/local-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/local-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Maintainers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/codeowners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/codeowners/</guid><description>&lt;h2 id="the-following-maintainers-listed-in-alphabetical-order-own-everything">The following maintainers, listed in alphabetical order, own everything&lt;a class="td-heading-self-link" href="#the-following-maintainers-listed-in-alphabetical-order-own-everything" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@arkodg&lt;/li>
&lt;li>@qicz&lt;/li>
&lt;li>@Xunzhuo&lt;/li>
&lt;li>@zirain&lt;/li>
&lt;li>@zhaohuabing&lt;/li>
&lt;/ul>
&lt;h2 id="emeritus-maintainers">Emeritus Maintainers&lt;a class="td-heading-self-link" href="#emeritus-maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@alexgervais&lt;/li>
&lt;li>@danehans&lt;/li>
&lt;li>@LukeShu&lt;/li>
&lt;li>@skriss&lt;/li>
&lt;li>@youngnick&lt;/li>
&lt;li>@Alice-Lilith&lt;/li>
&lt;/ul></description></item><item><title>Maintainers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/codeowners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/codeowners/</guid><description>&lt;h2 id="the-following-maintainers-listed-in-alphabetical-order-own-everything">The following maintainers, listed in alphabetical order, own everything&lt;a class="td-heading-self-link" href="#the-following-maintainers-listed-in-alphabetical-order-own-everything" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@Alice-Lilith&lt;/li>
&lt;li>@arkodg&lt;/li>
&lt;li>@Xunzhuo&lt;/li>
&lt;li>@zirain&lt;/li>
&lt;li>@qicz&lt;/li>
&lt;/ul>
&lt;h2 id="emeritus-maintainers">Emeritus Maintainers&lt;a class="td-heading-self-link" href="#emeritus-maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@danehans&lt;/li>
&lt;li>@alexgervais&lt;/li>
&lt;li>@skriss&lt;/li>
&lt;li>@youngnick&lt;/li>
&lt;/ul></description></item><item><title>Maintainers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/codeowners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/codeowners/</guid><description>&lt;h2 id="the-following-maintainers-listed-in-alphabetical-order-own-everything">The following maintainers, listed in alphabetical order, own everything&lt;a class="td-heading-self-link" href="#the-following-maintainers-listed-in-alphabetical-order-own-everything" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@Alice-Lilith&lt;/li>
&lt;li>@arkodg&lt;/li>
&lt;li>@Xunzhuo&lt;/li>
&lt;li>@zirain&lt;/li>
&lt;li>@qicz&lt;/li>
&lt;/ul>
&lt;h2 id="emeritus-maintainers">Emeritus Maintainers&lt;a class="td-heading-self-link" href="#emeritus-maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@danehans&lt;/li>
&lt;li>@alexgervais&lt;/li>
&lt;li>@skriss&lt;/li>
&lt;li>@youngnick&lt;/li>
&lt;/ul></description></item><item><title>Maintainers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/codeowners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/codeowners/</guid><description>&lt;h2 id="the-following-maintainers-listed-in-alphabetical-order-own-everything">The following maintainers, listed in alphabetical order, own everything&lt;a class="td-heading-self-link" href="#the-following-maintainers-listed-in-alphabetical-order-own-everything" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@Alice-Lilith&lt;/li>
&lt;li>@arkodg&lt;/li>
&lt;li>@Xunzhuo&lt;/li>
&lt;li>@zirain&lt;/li>
&lt;li>@qicz&lt;/li>
&lt;/ul>
&lt;h2 id="emeritus-maintainers">Emeritus Maintainers&lt;a class="td-heading-self-link" href="#emeritus-maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@danehans&lt;/li>
&lt;li>@alexgervais&lt;/li>
&lt;li>@skriss&lt;/li>
&lt;li>@youngnick&lt;/li>
&lt;/ul></description></item><item><title>Maintainers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/codeowners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/codeowners/</guid><description>&lt;h2 id="the-following-maintainers-listed-in-alphabetical-order-own-everything">The following maintainers, listed in alphabetical order, own everything&lt;a class="td-heading-self-link" href="#the-following-maintainers-listed-in-alphabetical-order-own-everything" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@Alice-Lilith&lt;/li>
&lt;li>@arkodg&lt;/li>
&lt;li>@Xunzhuo&lt;/li>
&lt;li>@zirain&lt;/li>
&lt;li>@qicz&lt;/li>
&lt;/ul>
&lt;h2 id="emeritus-maintainers">Emeritus Maintainers&lt;a class="td-heading-self-link" href="#emeritus-maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@danehans&lt;/li>
&lt;li>@alexgervais&lt;/li>
&lt;li>@skriss&lt;/li>
&lt;li>@youngnick&lt;/li>
&lt;/ul></description></item><item><title>Maintainers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/codeowners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/codeowners/</guid><description>&lt;h2 id="the-following-maintainers-listed-in-alphabetical-order-own-everything">The following maintainers, listed in alphabetical order, own everything&lt;a class="td-heading-self-link" href="#the-following-maintainers-listed-in-alphabetical-order-own-everything" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@Alice-Lilith&lt;/li>
&lt;li>@arkodg&lt;/li>
&lt;li>@Xunzhuo&lt;/li>
&lt;li>@zirain&lt;/li>
&lt;li>@qicz&lt;/li>
&lt;/ul>
&lt;h2 id="emeritus-maintainers">Emeritus Maintainers&lt;a class="td-heading-self-link" href="#emeritus-maintainers" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>@danehans&lt;/li>
&lt;li>@alexgervais&lt;/li>
&lt;li>@skriss&lt;/li>
&lt;li>@youngnick&lt;/li>
&lt;/ul></description></item><item><title>Metadata in XDS resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/metadata/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>In Envoy, &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-v3-api-msg-config-core-v3-metadata">static metadata&lt;/a> can be configured on various resources: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#envoy-v3-api-msg-config-listener-v3-listener">listener&lt;/a>, &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#config-route-v3-virtualhost">virtual host&lt;/a>, &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-route">route&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto">cluster&lt;/a>.&lt;/p>
&lt;p>Static metadata can be used for various purposes:&lt;/p>
&lt;ul>
&lt;li>Observability: enrichment of access logs and traces with &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/formatter/metadata/v3/metadata.proto.html#formatter-extension-for-printing-various-types-of-metadata-proto">metadata formatters&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/type/tracing/v3/custom_tag.proto.html#envoy-v3-api-msg-type-tracing-v3-customtag-metadata">custom tags&lt;/a>.&lt;/li>
&lt;li>Processing: provide configuration context to filters in a certain scope (e.g. vhost, route, etc.).&lt;/li>
&lt;/ul>
&lt;p>This document describes how Envoy Gateway manages &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-v3-api-msg-config-core-v3-metadata">static metadata&lt;/a> for various XDS resource such as listeners, virtual hosts, routes, clusters and endpoints.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;a class="td-heading-self-link" href="#configuration" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway propagates certain attributes of &lt;a href="https://gateway-api.sigs.k8s.io">Gateway-API&lt;/a> resources to XDS resources. Attributes include:&lt;/p></description></item><item><title>Migrating from Ingress Resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/migrating-to-envoy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/install/migrating-to-envoy/</guid><description>&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Migrating from Ingress to Envoy Gateway involves converting existing Ingress resources into resources compatible with Envoy Gateway. The &lt;code>ingress2gateway&lt;/code> tool simplifies this migration by transforming Ingress resources into Gateway API resources that Envoy Gateway can use. This guide will walk you through the prerequisites, installation of the &lt;code>ingress2gateway&lt;/code> tool, and provide an example migration process.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Before you start the migration, ensure you have the following:&lt;/p></description></item><item><title>Migrating from Ingress Resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/migrating-to-envoy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/install/migrating-to-envoy/</guid><description>&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Migrating from Ingress to Envoy Gateway involves converting existing Ingress resources into resources compatible with Envoy Gateway. The &lt;code>ingress2gateway&lt;/code> tool simplifies this migration by transforming Ingress resources into Gateway API resources that Envoy Gateway can use. This guide will walk you through the prerequisites, installation of the &lt;code>ingress2gateway&lt;/code> tool, and provide an example migration process.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Before you start the migration, ensure you have the following:&lt;/p></description></item><item><title>Migrating from Ingress Resources</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/migrating-to-envoy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/install/migrating-to-envoy/</guid><description>&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Migrating from Ingress to Envoy Gateway involves converting existing Ingress resources into resources compatible with Envoy Gateway. The &lt;code>ingress2gateway&lt;/code> tool simplifies this migration by transforming Ingress resources into Gateway API resources that Envoy Gateway can use. This guide will walk you through the prerequisites, installation of the &lt;code>ingress2gateway&lt;/code> tool, and provide an example migration process.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Before you start the migration, ensure you have the following:&lt;/p></description></item><item><title>Multicluster Service Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/multicluster-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/multicluster-service/</guid><description>&lt;p>The Multicluster Service API ServiceImport object can be used as part of the GatewayAPI backendRef for configuring routes. For more information about multicluster service API follow &lt;a href="https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/">sig documentation&lt;/a>.&lt;/p>
&lt;p>We will use &lt;a href="https://github.com/submariner-io/submariner">Submariner project&lt;/a> for setting up the multicluster environment for exporting the service to be routed from peer clusters.&lt;/p>
&lt;h2 id="setting-kind-clusters-and-installing-submariner">Setting KIND clusters and installing Submariner.&lt;a class="td-heading-self-link" href="#setting-kind-clusters-and-installing-submariner" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>We will be using KIND clusters to demonstrate this example.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/submariner-io/submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: remain in submariner-operator directory for the rest of the steps in this section&lt;/p></description></item><item><title>Multicluster Service Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/multicluster-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/multicluster-service/</guid><description>&lt;p>The Multicluster Service API ServiceImport object can be used as part of the GatewayAPI backendRef for configuring routes. For more information about multicluster service API follow &lt;a href="https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/">sig documentation&lt;/a>.&lt;/p>
&lt;p>We will use &lt;a href="https://github.com/submariner-io/submariner">Submariner project&lt;/a> for setting up the multicluster environment for exporting the service to be routed from peer clusters.&lt;/p>
&lt;h2 id="setting-kind-clusters-and-installing-submariner">Setting KIND clusters and installing Submariner.&lt;a class="td-heading-self-link" href="#setting-kind-clusters-and-installing-submariner" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>We will be using KIND clusters to demonstrate this example.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/submariner-io/submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: remain in submariner-operator directory for the rest of the steps in this section&lt;/p></description></item><item><title>Multicluster Service Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/multicluster-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/multicluster-service/</guid><description>&lt;p>The Multicluster Service API ServiceImport object can be used as part of the GatewayAPI backendRef for configuring routes. For more information about multicluster service API follow &lt;a href="https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/">sig documentation&lt;/a>.&lt;/p>
&lt;p>We will use &lt;a href="https://github.com/submariner-io/submariner">Submariner project&lt;/a> for setting up the multicluster environment for exporting the service to be routed from peer clusters.&lt;/p>
&lt;h2 id="setting-kind-clusters-and-installing-submariner">Setting KIND clusters and installing Submariner.&lt;a class="td-heading-self-link" href="#setting-kind-clusters-and-installing-submariner" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>We will be using KIND clusters to demonstrate this example.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/submariner-io/submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: remain in submariner-operator directory for the rest of the steps in this section&lt;/p></description></item><item><title>Multicluster Service Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/multicluster-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/multicluster-service/</guid><description>&lt;p>The Multicluster Service API ServiceImport object can be used as part of the GatewayAPI backendRef for configuring routes. For more information about multicluster service API follow &lt;a href="https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/">sig documentation&lt;/a>.&lt;/p>
&lt;p>We will use &lt;a href="https://github.com/submariner-io/submariner">Submariner project&lt;/a> for setting up the multicluster environment for exporting the service to be routed from peer clusters.&lt;/p>
&lt;h2 id="setting-kind-clusters-and-installing-submariner">Setting KIND clusters and installing Submariner.&lt;a class="td-heading-self-link" href="#setting-kind-clusters-and-installing-submariner" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>We will be using KIND clusters to demonstrate this example.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/submariner-io/submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: remain in submariner-operator directory for the rest of the steps in this section&lt;/p></description></item><item><title>Multicluster Service Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/multicluster-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/multicluster-service/</guid><description>&lt;p>The Multicluster Service API ServiceImport object can be used as part of the GatewayAPI backendRef for configuring routes. For more information about multicluster service API follow &lt;a href="https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/">sig documentation&lt;/a>.&lt;/p>
&lt;p>We will use &lt;a href="https://github.com/submariner-io/submariner">Submariner project&lt;/a> for setting up the multicluster environment for exporting the service to be routed from peer clusters.&lt;/p>
&lt;h2 id="setting-kind-clusters-and-installing-submariner">Setting KIND clusters and installing Submariner.&lt;a class="td-heading-self-link" href="#setting-kind-clusters-and-installing-submariner" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>We will be using KIND clusters to demonstrate this example.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/submariner-io/submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: remain in submariner-operator directory for the rest of the steps in this section&lt;/p></description></item><item><title>Multicluster Service Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/multicluster-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/multicluster-service/</guid><description>&lt;p>The Multicluster Service API ServiceImport object can be used as part of the GatewayAPI backendRef for configuring routes. For more information about multicluster service API follow &lt;a href="https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/">sig documentation&lt;/a>.&lt;/p>
&lt;p>We will use &lt;a href="https://github.com/submariner-io/submariner">Submariner project&lt;/a> for setting up the multicluster environment for exporting the service to be routed from peer clusters.&lt;/p>
&lt;h2 id="setting-kind-clusters-and-installing-submariner">Setting KIND clusters and installing Submariner.&lt;a class="td-heading-self-link" href="#setting-kind-clusters-and-installing-submariner" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>We will be using KIND clusters to demonstrate this example.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/submariner-io/submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: remain in submariner-operator directory for the rest of the steps in this section&lt;/p></description></item><item><title>Mutual TLS: External Clients to the Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/mutual-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/mutual-tls/</guid><description>&lt;p>This task demonstrates how mutual TLS can be achieved between external clients and the Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Mutual TLS: External Clients to the Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/mutual-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/mutual-tls/</guid><description>&lt;p>This task demonstrates how mutual TLS can be achieved between external clients and the Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Mutual TLS: External Clients to the Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/mutual-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/mutual-tls/</guid><description>&lt;p>This task demonstrates how mutual TLS can be achieved between external clients and the Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Mutual TLS: External Clients to the Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/mutual-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/mutual-tls/</guid><description>&lt;p>This task demonstrates how mutual TLS can be achieved between external clients and the Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Mutual TLS: External Clients to the Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/mutual-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/mutual-tls/</guid><description>&lt;p>This task demonstrates how mutual TLS can be achieved between external clients and the Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Observability: Accesslog</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/accesslog/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy supports extensible accesslog to different sinks, File, gRPC etc. Envoy supports customizable access log formats using predefined fields as well as arbitrary HTTP request and response headers. Envoy supports several built-in access log filters and extension filters that are registered at runtime.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since accesslog is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config access log formats and sinks per &lt;code>EnvoyProxy&lt;/code>.&lt;/p></description></item><item><title>Observability: Accesslog</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/accesslog/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy supports extensible accesslog to different sinks, File, gRPC etc. Envoy supports customizable access log formats using predefined fields as well as arbitrary HTTP request and response headers. Envoy supports several built-in access log filters and extension filters that are registered at runtime.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since accesslog is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config access log formats and sinks per &lt;code>EnvoyProxy&lt;/code>.&lt;/p></description></item><item><title>Observability: Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/metrics/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy provide robust platform for metrics, Envoy support three different kinds of stats: counter, gauges, histograms.&lt;/p>
&lt;p>Envoy enables prometheus format output via the &lt;code>/stats/prometheus&lt;/code> &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/operations/admin">admin endpoint&lt;/a>.&lt;/p>
&lt;p>Envoy support different kinds of sinks, but EG will only support &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/stat_sinks/open_telemetry/v3/open_telemetry.proto">Open Telemetry sink&lt;/a>.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since metrics is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config metrics per &lt;code>EnvoyProxy&lt;/code>.&lt;/p></description></item><item><title>Observability: Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/metrics/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy provide robust platform for metrics, Envoy support three different kinds of stats: counter, gauges, histograms.&lt;/p>
&lt;p>Envoy enables prometheus format output via the &lt;code>/stats/prometheus&lt;/code> &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/operations/admin">admin endpoint&lt;/a>.&lt;/p>
&lt;p>Envoy support different kinds of sinks, but EG will only support &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/stat_sinks/open_telemetry/v3/open_telemetry.proto">Open Telemetry sink&lt;/a>.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since metrics is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config metrics per &lt;code>EnvoyProxy&lt;/code>.&lt;/p></description></item><item><title>Observability: Tracing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/tracing/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy supports extensible tracing to different sinks, Zipkin, OpenTelemetry etc. Overview of Envoy tracing can be found &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing">here&lt;/a>.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since tracing is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config tracing per &lt;code>EnvoyProxy&lt;/code>.&lt;/p>
&lt;p>Only OpenTelemetry sink can be configured currently, you can use &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> to export to other tracing backends.&lt;/p></description></item><item><title>Observability: Tracing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/tracing/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy supports extensible tracing to different sinks, Zipkin, OpenTelemetry etc. Overview of Envoy tracing can be found &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing">here&lt;/a>.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since tracing is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, EG should provide an easy to config tracing per &lt;code>EnvoyProxy&lt;/code>.&lt;/p>
&lt;p>Only OpenTelemetry sink can be configured currently, you can use &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> to export to other tracing backends.&lt;/p></description></item><item><title>OIDC Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/oidc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/oidc/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://openid.net/connect/">OpenID Connect (OIDC)&lt;/a> authentication.
OpenID Connect (OIDC) is an authentication standard built on top of OAuth 2.0.
It enables EG to rely on authentication that is performed by an OpenID Connect Provider (OP)
to verify the identity of a user.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#securitypolicy">SecurityPolicy&lt;/a> that allows the user to configure OIDC
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>OIDC Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/oidc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/oidc/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://openid.net/connect/">OpenID Connect (OIDC)&lt;/a> authentication.
OpenID Connect (OIDC) is an authentication standard built on top of OAuth 2.0.
It enables EG to rely on authentication that is performed by an OpenID Connect Provider (OP)
to verify the identity of a user.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#securitypolicy">SecurityPolicy&lt;/a> that allows the user to configure OIDC
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>OIDC Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/oidc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/oidc/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://openid.net/connect/">OpenID Connect (OIDC)&lt;/a> authentication.
OpenID Connect (OIDC) is an authentication standard built on top of OAuth 2.0.
It enables EG to rely on authentication that is performed by an OpenID Connect Provider (OP)
to verify the identity of a user.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure OIDC
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>OIDC Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/oidc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/oidc/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://openid.net/connect/">OpenID Connect (OIDC)&lt;/a> authentication.
OpenID Connect (OIDC) is an authentication standard built on top of OAuth 2.0.
It enables EG to rely on authentication that is performed by an OpenID Connect Provider (OP)
to verify the identity of a user.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/">SecurityPolicy&lt;/a> that allows the user to configure OIDC
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>OIDC Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/oidc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/oidc/</guid><description>&lt;p>This task provides instructions for configuring &lt;a href="https://openid.net/connect/">OpenID Connect (OIDC)&lt;/a> authentication.
OpenID Connect (OIDC) is an authentication standard built on top of OAuth 2.0.
It enables EG to rely on authentication that is performed by an OpenID Connect Provider (OP)
to verify the identity of a user.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#securitypolicy">SecurityPolicy&lt;/a> that allows the user to configure OIDC
authentication.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>Proxy Access Logs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/proxy-accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/proxy-accesslog/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy access logs.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Access Logs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/proxy-accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/proxy-accesslog/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy access logs.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Access Logs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/proxy-accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/proxy-accesslog/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy access logs.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Access Logs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/proxy-accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/proxy-accesslog/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy access logs.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/proxy-metric/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/proxy-metric/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/proxy-metric/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/proxy-metric/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/proxy-metric/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/proxy-metric/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Metrics</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/proxy-metric/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/proxy-metric/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy metrics.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/proxy-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/proxy-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This guide show you how to config proxy observability, includes metrics, logs, and traces.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>&lt;a href="https://fluentbit.io/">FluentBit&lt;/a> is used to collect logs from the EnvoyProxy instances and forward them to Loki. Install FluentBit:&lt;/p></description></item><item><title>Proxy Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/proxy-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/proxy-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This guide show you how to config proxy observability, includes metrics, logs, and traces.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>&lt;a href="https://fluentbit.io/">FluentBit&lt;/a> is used to collect logs from the EnvoyProxy instances and forward them to Loki. Install FluentBit:&lt;/p></description></item><item><title>Proxy Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/observability/proxy-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/observability/proxy-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This guide show you how to config proxy observability, includes metrics, logs, and traces.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>&lt;a href="https://fluentbit.io/">FluentBit&lt;/a> is used to collect logs from the EnvoyProxy instances and forward them to Loki. Install FluentBit:&lt;/p></description></item><item><title>Proxy Tracing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/proxy-trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/proxy-trace/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy tracing.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Tracing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/proxy-trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/proxy-trace/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy tracing.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Tracing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/proxy-trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/proxy-trace/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy tracing.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Proxy Tracing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/proxy-trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/proxy-trace/</guid><description>&lt;p>Envoy Gateway provides observability for the ControlPlane and the underlying EnvoyProxy instances.
This task show you how to config proxy tracing.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Rate limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implements Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a>, where the rate limit is common across all the instances of Envoy proxies where its applied
i.e. if the data plane has 2 replicas of Envoy running, and the rate limit is 10 requests/second, this limit is common and will be hit
if 5 requests pass through the first replica and 5 requests pass through the second replica within the same second.&lt;/p></description></item><item><title>Rate limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implements Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a>, where the rate limit is common across all the instances of Envoy proxies where its applied
i.e. if the data plane has 2 replicas of Envoy running, and the rate limit is 10 requests/second, this limit is common and will be hit
if 5 requests pass through the first replica and 5 requests pass through the second replica within the same second.&lt;/p></description></item><item><title>Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implements Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a>, where the rate limit is common across all the instances of Envoy proxies where its applied
i.e. if the data plane has 2 replicas of Envoy running, and the rate limit is 10 requests/second, this limit is common and will be hit
if 5 requests pass through the first replica and 5 requests pass through the second replica within the same second.&lt;/p></description></item><item><title>Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a>, where the rate limit is common across all the instances of Envoy proxies where its applied
i.e. if the data plane has 2 replicas of Envoy running, and the rate limit is 10 requests/second, this limit is common and will be hit
if 5 requests pass through the first replica and 5 requests pass through the second replica within the same second.&lt;/p></description></item><item><title>Rate Limit Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/rate-limit/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests
to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why a user may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;h2 id="scope-types">Scope Types&lt;a class="td-heading-self-link" href="#scope-types" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The rate limit type here describes the scope of rate limits.&lt;/p></description></item><item><title>Rate Limit Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/ratelimit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/ratelimit/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests
to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why a user may want to implements Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;h2 id="scope-types">Scope Types&lt;a class="td-heading-self-link" href="#scope-types" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The rate limit type here describes the scope of rate limits.&lt;/p></description></item><item><title>Rate Limit Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/rate-limit/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests
to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why a user may want to implements Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;h2 id="scope-types">Scope Types&lt;a class="td-heading-self-link" href="#scope-types" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The rate limit type here describes the scope of rate limits.&lt;/p></description></item><item><title>Rate Limit Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/rate-limit/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests
to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why a user may want to implements Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;h2 id="scope-types">Scope Types&lt;a class="td-heading-self-link" href="#scope-types" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The rate limit type here describes the scope of rate limits.&lt;/p></description></item><item><title>Rate Limit Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/rate-limit/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests
to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why a user may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;h2 id="scope-types">Scope Types&lt;a class="td-heading-self-link" href="#scope-types" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The rate limit type here describes the scope of rate limits.&lt;/p></description></item><item><title>RateLimit Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/rate-limit-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/rate-limit-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the RateLimit instances.
This guide show you how to config RateLimit observability, includes traces.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p>
&lt;p>Install the add-ons Helm Chart:&lt;/p></description></item><item><title>RateLimit Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/rate-limit-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/rate-limit-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the RateLimit instances.
This guide show you how to config RateLimit observability, includes traces.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p>
&lt;p>Install the add-ons Helm Chart:&lt;/p></description></item><item><title>RateLimit Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/rate-limit-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/rate-limit-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the RateLimit instances.
This guide show you how to config RateLimit observability, includes traces.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p>
&lt;p>Install the add-ons Helm Chart:&lt;/p></description></item><item><title>RateLimit Observability</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/rate-limit-observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/rate-limit-observability/</guid><description>&lt;p>Envoy Gateway provides observability for the RateLimit instances.
This guide show you how to config RateLimit observability, includes traces.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p>
&lt;p>Install the add-ons Helm Chart:&lt;/p></description></item><item><title>Release Process</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/releasing/</guid><description>&lt;p>This document guides maintainers through the process of creating an Envoy Gateway release.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/releasing/#release-candidate">Release Candidate&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/releasing/#prerequisites">Prerequisites&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/releasing/#minor-release">Minor Release&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/releasing/#prerequisites-1">Prerequisites&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/releasing/#announce-the-release">Announce the Release&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="release-candidate">Release Candidate&lt;a class="td-heading-self-link" href="#release-candidate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The following steps should be used for creating a release candidate.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Permissions to push to the Envoy Gateway repository.&lt;/li>
&lt;/ul>
&lt;p>Set environment variables for use in subsequent steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MAJOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MINOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">RELEASE_CANDIDATE_NUMBER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_REMOTE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>Clone the repo, checkout the &lt;code>main&lt;/code> branch, ensure it’s up-to-date, and your local branch is clean.&lt;/p></description></item><item><title>Release Process</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/releasing/</guid><description>&lt;p>This document guides maintainers through the process of creating an Envoy Gateway release.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/contributions/releasing/#release-candidate">Release Candidate&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/contributions/releasing/#minor-release">Minor Release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.2/contributions/releasing/#announce-the-release">Announce the Release&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="release-candidate">Release Candidate&lt;a class="td-heading-self-link" href="#release-candidate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The following steps should be used for creating a release candidate.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Permissions to push to the Envoy Gateway repository.&lt;/li>
&lt;/ul>
&lt;p>Set environment variables for use in subsequent steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MAJOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MINOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">RELEASE_CANDIDATE_NUMBER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_REMOTE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>Clone the repo, checkout the &lt;code>main&lt;/code> branch, ensure it’s up-to-date, and your local branch is clean.&lt;/p></description></item><item><title>Release Process</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/releasing/</guid><description>&lt;p>This document guides maintainers through the process of creating an Envoy Gateway release.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/contributions/releasing/#release-candidate">Release Candidate&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/contributions/releasing/#minor-release">Minor Release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.3/contributions/releasing/#announce-the-release">Announce the Release&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="release-candidate">Release Candidate&lt;a class="td-heading-self-link" href="#release-candidate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The following steps should be used for creating a release candidate.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Permissions to push to the Envoy Gateway repository.&lt;/li>
&lt;/ul>
&lt;p>Set environment variables for use in subsequent steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MAJOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MINOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">RELEASE_CANDIDATE_NUMBER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_REMOTE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>Clone the repo, checkout the &lt;code>main&lt;/code> branch, ensure it’s up-to-date, and your local branch is clean.&lt;/p></description></item><item><title>Release Process</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/releasing/</guid><description>&lt;p>This document guides maintainers through the process of creating an Envoy Gateway release.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/contributions/releasing/#release-candidate">Release Candidate&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/contributions/releasing/#minor-release">Minor Release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.4/contributions/releasing/#announce-the-release">Announce the Release&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="release-candidate">Release Candidate&lt;a class="td-heading-self-link" href="#release-candidate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The following steps should be used for creating a release candidate.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Permissions to push to the Envoy Gateway repository.&lt;/li>
&lt;/ul>
&lt;p>Set environment variables for use in subsequent steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MAJOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MINOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">RELEASE_CANDIDATE_NUMBER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_REMOTE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>Clone the repo, checkout the &lt;code>main&lt;/code> branch, ensure it’s up-to-date, and your local branch is clean.&lt;/p></description></item><item><title>Release Process</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/releasing/</guid><description>&lt;p>This document guides maintainers through the process of creating an Envoy Gateway release.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/contributions/releasing/#release-candidate">Release Candidate&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/contributions/releasing/#minor-release">Minor Release&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.5/contributions/releasing/#announce-the-release">Announce the Release&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="release-candidate">Release Candidate&lt;a class="td-heading-self-link" href="#release-candidate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The following steps should be used for creating a release candidate.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Permissions to push to the Envoy Gateway repository.&lt;/li>
&lt;/ul>
&lt;p>Set environment variables for use in subsequent steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MAJOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MINOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">RELEASE_CANDIDATE_NUMBER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_REMOTE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>Clone the repo, checkout the &lt;code>main&lt;/code> branch, ensure it’s up-to-date, and your local branch is clean.&lt;/p></description></item><item><title>Release Process</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/</guid><description>&lt;p>This document guides maintainers through the process of creating an Envoy Gateway release.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/#release-candidate">Release Candidate&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/#prerequisites">Prerequisites&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/#setup-cherry-picker-action">Setup cherry picker action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/#minor-release">Minor Release&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/#prerequisites-1">Prerequisites&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/contributions/releasing/#announce-the-release">Announce the Release&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="release-candidate">Release Candidate&lt;a class="td-heading-self-link" href="#release-candidate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The following steps should be used for creating a release candidate.&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;ul>
&lt;li>Permissions to push to the Envoy Gateway repository.&lt;/li>
&lt;/ul>
&lt;p>Set environment variables for use in subsequent steps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MAJOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">MINOR_VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">RELEASE_CANDIDATE_NUMBER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_REMOTE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>Clone the repo, checkout the &lt;code>main&lt;/code> branch, ensure it’s up-to-date, and your local branch is clean.&lt;/p></description></item><item><title>Request Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/request-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/request-authentication/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/336">Issue 336&lt;/a> specifies the need for exposing a user-facing API to configure request authentication. Request
authentication is defined as an authentication mechanism to be enforced by Envoy on a per-request basis. A connection
will be rejected if it contains invalid authentication information, based on the &lt;code>AuthenticationFilter&lt;/code> API type
proposed in this design document.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and
implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since
implementing request authentication is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, an &lt;code>Implementation-specific&lt;/code> API will
be created for this purpose.&lt;/p></description></item><item><title>Request Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/authn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/authn/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Request Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/authn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/authn/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Request Authentication</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/authn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/authn/</guid><description>&lt;p>This guide provides instructions for configuring &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token (JWT)&lt;/a> authentication. JWT authentication checks
if an incoming request has a valid JWT before routing the request to a backend service. Currently, Envoy Gateway only
supports validating a JWT from an HTTP header, e.g. &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Request Authentication Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/request-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/request-authentication/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/336">Issue 336&lt;/a> specifies the need for exposing a user-facing API to configure request authentication. Request
authentication is defined as an authentication mechanism to be enforced by Envoy on a per-request basis. A connection
will be rejected if it contains invalid authentication information, based on the &lt;code>AuthenticationFilter&lt;/code> API type
proposed in this design document.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and
implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since
implementing request authentication is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, an &lt;code>Implementation-specific&lt;/code> API will
be created for this purpose.&lt;/p></description></item><item><title>Request Authentication Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/request-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/request-authentication/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://github.com/envoyproxy/gateway/issues/336">Issue 336&lt;/a> specifies the need for exposing a user-facing API to configure request authentication. Request
authentication is defined as an authentication mechanism to be enforced by Envoy on a per-request basis. A connection
will be rejected if it contains invalid authentication information, based on the &lt;code>AuthenticationFilter&lt;/code> API type
proposed in this design document.&lt;/p>
&lt;p>Envoy Gateway leverages &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> for configuring managed Envoy proxies. Gateway API defines core, extended, and
implementation-specific API &lt;a href="https://gateway-api.sigs.k8s.io/concepts/conformance/?h=extended#2-support-levels">support levels&lt;/a> for implementers such as Envoy Gateway to expose features. Since
implementing request authentication is not covered by &lt;code>Core&lt;/code> or &lt;code>Extended&lt;/code> APIs, an &lt;code>Implementation-specific&lt;/code> API will
be created for this purpose.&lt;/p></description></item><item><title>Response Override</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/response-override/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/response-override/</guid><description>&lt;p>Response Override allows you to override the response from the backend with a custom one. This can be useful for scenarios such as returning a custom 404 page when the requested resource is not found or a custom 500 error message when the backend is failing.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Response Override</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/response-override/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/response-override/</guid><description>&lt;p>Response Override allows you to override the response from the backend with a custom one. This can be useful for scenarios such as returning a custom 404 page when the requested resource is not found or a custom 500 error message when the backend is failing.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Response Override</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/response-override/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/response-override/</guid><description>&lt;p>Response Override allows you to override the response from the backend with a custom one. This can be useful for scenarios such as returning a custom 404 page when the requested resource is not found or a custom 500 error message when the backend is failing.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Retry</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/retry/</guid><description>&lt;p>A retry setting specifies the maximum number of times an Envoy proxy attempts to connect to a service if the initial call fails. Retries can enhance service availability and application performance by making sure that calls don’t fail permanently because of transient problems such as a temporarily overloaded service or network. The interval between retries prevents the called service from being overwhelmed with requests.&lt;/p>
&lt;p>Envoy Gateway supports the following retry settings:&lt;/p></description></item><item><title>Retry</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/retry/</guid><description>&lt;p>A retry setting specifies the maximum number of times an Envoy proxy attempts to connect to a service if the initial call fails. Retries can enhance service availability and application performance by making sure that calls don’t fail permanently because of transient problems such as a temporarily overloaded service or network. The interval between retries prevents the called service from being overwhelmed with requests.&lt;/p>
&lt;p>Envoy Gateway supports the following retry settings:&lt;/p></description></item><item><title>Retry</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/retry/</guid><description>&lt;p>A retry setting specifies the maximum number of times an Envoy proxy attempts to connect to a service if the initial call fails. Retries can enhance service availability and application performance by making sure that calls don’t fail permanently because of transient problems such as a temporarily overloaded service or network. The interval between retries prevents the called service from being overwhelmed with requests.&lt;/p>
&lt;p>Envoy Gateway supports the following retry settings:&lt;/p></description></item><item><title>Retry</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/retry/</guid><description>&lt;p>A retry setting specifies the maximum number of times an Envoy proxy attempts to connect to a service if the initial call fails. Retries can enhance service availability and application performance by making sure that calls don’t fail permanently because of transient problems such as a temporarily overloaded service or network. The interval between retries prevents the called service from being overwhelmed with requests.&lt;/p>
&lt;p>Envoy Gateway supports the following retry settings:&lt;/p></description></item><item><title>Retry</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/retry/</guid><description>&lt;p>A retry setting specifies the maximum number of times an Envoy proxy attempts to connect to a service if the initial call fails. Retries can enhance service availability and application performance by making sure that calls don’t fail permanently because of transient problems such as a temporarily overloaded service or network. The interval between retries prevents the called service from being overwhelmed with requests.&lt;/p>
&lt;p>Envoy Gateway supports the following retry settings:&lt;/p></description></item><item><title>Routing outside Kubernetes</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/routing-outside-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/routing-outside-kubernetes/</guid><description>&lt;p>Routing to endpoints outside the Kubernetes cluster where Envoy Gateway and its corresponding Envoy Proxy fleet is
running is a common use case. This can be achieved by:&lt;/p>
&lt;ul>
&lt;li>defining FQDN addresses in a &lt;a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/">EndpointSlice&lt;/a> (covered in this document)&lt;/li>
&lt;li>defining a &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/api/extension_types/#backend">Backend&lt;/a> resource, as described in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/backend/">Backend Task&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Routing outside Kubernetes</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/routing-outside-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/routing-outside-kubernetes/</guid><description>&lt;p>Routing to endpoints outside the Kubernetes cluster where Envoy Gateway and its corresponding Envoy Proxy fleet is
running is a common use case. This can be achieved by:&lt;/p>
&lt;ul>
&lt;li>defining FQDN addresses in a &lt;a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/">EndpointSlice&lt;/a> (covered in this document)&lt;/li>
&lt;li>defining a &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/api/extension_types/#backend">Backend&lt;/a> resource, as described in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/backend/">Backend Task&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Routing outside Kubernetes</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/routing-outside-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/routing-outside-kubernetes/</guid><description>&lt;p>Routing to endpoints outside the Kubernetes cluster where Envoy Gateway and its corresponding Envoy Proxy fleet is
running is a common use case. This can be achieved by defining FQDN addresses in a &lt;a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/">EndpointSlice&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;a class="td-heading-self-link" href="#configuration" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Define a Service and EndpointSlice that represents &lt;a href="https://httpbin.org">https://httpbin.org&lt;/a>&lt;/p></description></item><item><title>Routing outside Kubernetes</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/routing-outside-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/routing-outside-kubernetes/</guid><description>&lt;p>Routing to endpoints outside the Kubernetes cluster where Envoy Gateway and its corresponding Envoy Proxy fleet is
running is a common use case. This can be achieved by:&lt;/p>
&lt;ul>
&lt;li>defining FQDN addresses in a &lt;a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/">EndpointSlice&lt;/a> (covered in this document)&lt;/li>
&lt;li>defining a &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/api/extension_types/#backend">Backend&lt;/a> resource, as described in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/backend/">Backend Task&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Routing outside Kubernetes</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/routing-outside-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/routing-outside-kubernetes/</guid><description>&lt;p>Routing to endpoints outside the Kubernetes cluster where Envoy Gateway and its corresponding Envoy Proxy fleet is
running is a common use case. This can be achieved by:&lt;/p>
&lt;ul>
&lt;li>defining FQDN addresses in a &lt;a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/">EndpointSlice&lt;/a> (covered in this document)&lt;/li>
&lt;li>defining a &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#backend">Backend&lt;/a> resource, as described in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/backend/">Backend Task&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Running Envoy Gateway locally</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/local-envoy-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/local-envoy-gateway/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Today, Envoy Gateway runs only on Kubernetes. This is an ideal solution
when the applications are running in Kubernetes.
However there might be cases when the applications are running on the host which would
require Envoy Gateway to run locally.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an API to allow Envoy Gateway to retrieve configuration while running locally.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to deploy the managed Envoy Proxy fleet on the host
machine.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Support multiple ways to retrieve configuration while running locally.&lt;/li>
&lt;li>Support multiple ways to deploy the Envoy Proxy fleet locally on the host.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>The &lt;code>provider&lt;/code> field within the &lt;code>EnvoyGateway&lt;/code> configuration only supports
&lt;code>Kubernetes&lt;/code> today which provides two features - the ability to retrieve
resources from the Kubernetes API Server as well as deploy the managed
Envoy Proxy fleet on Kubernetes.&lt;/li>
&lt;li>This document proposes adding a new top level &lt;code>provider&lt;/code> type called &lt;code>Custom&lt;/code>
with two fields called &lt;code>resource&lt;/code> and &lt;code>infrastructure&lt;/code> to allow the user to configure
the sub providers for providing resource configuration and an infrastructure to deploy
the Envoy Proxy data plane in.&lt;/li>
&lt;li>A &lt;code>File&lt;/code> resource provider will be introduced to enable retrieving configuration locally
by reading from the configuration from a file.&lt;/li>
&lt;li>A &lt;code>Host&lt;/code> infrastructure provider will be introduced to allow Envoy Gateway to spawn a
Envoy Proxy child process on the host.&lt;/li>
&lt;/ul>
&lt;p>Here is an example configuration&lt;/p></description></item><item><title>Running Envoy Gateway locally</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/local-envoy-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/local-envoy-gateway/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Today, Envoy Gateway runs only on Kubernetes. This is an ideal solution
when the applications are running in Kubernetes.
However there might be cases when the applications are running on the host which would
require Envoy Gateway to run locally.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an API to allow Envoy Gateway to retrieve configuration while running locally.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to deploy the managed Envoy Proxy fleet on the host
machine.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Support multiple ways to retrieve configuration while running locally.&lt;/li>
&lt;li>Support multiple ways to deploy the Envoy Proxy fleet locally on the host.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>The &lt;code>provider&lt;/code> field within the &lt;code>EnvoyGateway&lt;/code> configuration only supports
&lt;code>Kubernetes&lt;/code> today which provides two features - the ability to retrieve
resources from the Kubernetes API Server as well as deploy the managed
Envoy Proxy fleet on Kubernetes.&lt;/li>
&lt;li>This document proposes adding a new top level &lt;code>provider&lt;/code> type called &lt;code>Custom&lt;/code>
with two fields called &lt;code>resource&lt;/code> and &lt;code>infrastructure&lt;/code> to allow the user to configure
the sub providers for providing resource configuration and an infrastructure to deploy
the Envoy Proxy data plane in.&lt;/li>
&lt;li>A &lt;code>File&lt;/code> resource provider will be introduced to enable retrieving configuration locally
by reading from the configuration from a file.&lt;/li>
&lt;li>A &lt;code>Host&lt;/code> infrastructure provider will be introduced to allow Envoy Gateway to spawn a
Envoy Proxy child process on the host.&lt;/li>
&lt;/ul>
&lt;p>Here is an example configuration&lt;/p></description></item><item><title>Running Envoy Gateway locally</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/local-envoy-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/local-envoy-gateway/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Today, Envoy Gateway runs only on Kubernetes. This is an ideal solution
when the applications are running in Kubernetes.
However there might be cases when the applications are running on the host which would
require Envoy Gateway to run locally.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define an API to allow Envoy Gateway to retrieve configuration while running locally.&lt;/li>
&lt;li>Define an API to allow Envoy Gateway to deploy the managed Envoy Proxy fleet on the host
machine.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Support multiple ways to retrieve configuration while running locally.&lt;/li>
&lt;li>Support multiple ways to deploy the Envoy Proxy fleet locally on the host.&lt;/li>
&lt;/ul>
&lt;h2 id="api">API&lt;a class="td-heading-self-link" href="#api" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>The &lt;code>provider&lt;/code> field within the &lt;code>EnvoyGateway&lt;/code> configuration only supports
&lt;code>Kubernetes&lt;/code> today which provides two features - the ability to retrieve
resources from the Kubernetes API Server as well as deploy the managed
Envoy Proxy fleet on Kubernetes.&lt;/li>
&lt;li>This document proposes adding a new top level &lt;code>provider&lt;/code> type called &lt;code>Custom&lt;/code>
with two fields called &lt;code>resource&lt;/code> and &lt;code>infrastructure&lt;/code> to allow the user to configure
the sub providers for providing resource configuration and an infrastructure to deploy
the Envoy Proxy data plane in.&lt;/li>
&lt;li>A &lt;code>File&lt;/code> resource provider will be introduced to enable retrieving configuration locally
by reading from the configuration from a file.&lt;/li>
&lt;li>A &lt;code>Host&lt;/code> infrastructure provider will be introduced to allow Envoy Gateway to spawn a
Envoy Proxy child process on the host.&lt;/li>
&lt;/ul>
&lt;p>Here is an example configuration&lt;/p></description></item><item><title>Search Results</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/search/</guid><description/></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/secure-gateways/</guid><description>&lt;p>This task will help you get started using secure Gateways.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/secure-gateways/</guid><description>&lt;p>This task will help you get started using secure Gateways.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/secure-gateways/</guid><description>&lt;p>This guide will help you get started using secure Gateways. The guide uses a self-signed CA, so it should be used for
testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/secure-gateways/</guid><description>&lt;p>This guide will help you get started using secure Gateways. The guide uses a self-signed CA, so it should be used for
testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/secure-gateways/</guid><description>&lt;p>This guide will help you get started using secure Gateways. The guide uses a self-signed CA, so it should be used for
testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/secure-gateways/</guid><description>&lt;p>This guide will help you get started using secure Gateways. The guide uses a self-signed CA, so it should be used for
testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/secure-gateways/</guid><description>&lt;p>This guide will help you get started using secure Gateways. The guide uses a self-signed CA, so it should be used for
testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/secure-gateways/</guid><description>&lt;p>This task will help you get started using secure Gateways.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.0/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/secure-gateways/</guid><description>&lt;p>This task will help you get started using secure Gateways.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>Secure Gateways</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/secure-gateways/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/secure-gateways/</guid><description>&lt;p>This task will help you get started using secure Gateways.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>SecurityPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/security-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>SecurityPolicy&lt;/code> API allowing system administrators to configure
authentication and authorization policies to the traffic entering the gateway.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API definition to hold settings for configuring authentication and authorization rules
on the traffic entering the gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the API configuration fields in this API.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>SecurityPolicy&lt;/code> is a &lt;a href="https://gateway-api.sigs.k8s.io/references/policy-attachment">Policy Attachment&lt;/a> type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>
to define authentication and authorization rules.&lt;/p></description></item><item><title>SecurityPolicy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/security-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/security-policy/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This design document introduces the &lt;code>SecurityPolicy&lt;/code> API allowing system administrators to configure
authentication and authorization policies to the traffic entering the gateway.&lt;/p>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Add an API definition to hold settings for configuring authentication and authorization rules
on the traffic entering the gateway.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non Goals&lt;a class="td-heading-self-link" href="#non-goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the API configuration fields in this API.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;a class="td-heading-self-link" href="#implementation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;code>SecurityPolicy&lt;/code> is a &lt;a href="https://gateway-api.sigs.k8s.io/references/policy-attachment">Policy Attachment&lt;/a> type API that can be used to extend &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a>
to define authentication and authorization rules.&lt;/p></description></item><item><title>Standalone Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/standalone-deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/standalone-deployment-mode/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Notice&lt;/h4>

 Standalone mode is an experimental feature, please &lt;strong>DO NOT&lt;/strong> use it in production.

&lt;/div>

&lt;p>Envoy Gateway also supports running in standalone mode. In this mode, Envoy Gateway
does not need to rely on Kubernetes and can be deployed directly on bare metal or virtual machines.&lt;/p>
&lt;p>Currently, Envoy Gateway only support the file provider and the host infrastructure provider combinations.&lt;/p>
&lt;ul>
&lt;li>The file provider will configure the Envoy Gateway to get all gateway-api resources from file system.&lt;/li>
&lt;li>The host infrastructure provider will configure the Envoy Gateway to deploy one Envoy Proxy as a host process.&lt;/li>
&lt;/ul>
&lt;h2 id="quick-start">Quick Start&lt;a class="td-heading-self-link" href="#quick-start" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>In this quick-start, we will run Envoy Gateway in standalone mode with the file provider
and the host infrastructure provider.&lt;/p></description></item><item><title>Standalone Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/standalone-deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/standalone-deployment-mode/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Notice&lt;/h4>

 Standalone mode is an experimental feature, please &lt;strong>DO NOT&lt;/strong> use it in production.

&lt;/div>

&lt;p>Envoy Gateway also supports running in standalone mode. In this mode, Envoy Gateway
does not need to rely on Kubernetes and can be deployed directly on bare metal or virtual machines.&lt;/p>
&lt;p>Currently, Envoy Gateway only support the file provider and the host infrastructure provider combinations.&lt;/p>
&lt;ul>
&lt;li>The file provider will configure the Envoy Gateway to get all gateway-api resources from file system.&lt;/li>
&lt;li>The host infrastructure provider will configure the Envoy Gateway to deploy one Envoy Proxy as a host process.&lt;/li>
&lt;/ul>
&lt;h2 id="quick-start">Quick Start&lt;a class="td-heading-self-link" href="#quick-start" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>In this quick-start, we will run Envoy Gateway in standalone mode with the file provider
and the host infrastructure provider.&lt;/p></description></item><item><title>Standalone Deployment Mode</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/standalone-deployment-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/standalone-deployment-mode/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Notice&lt;/h4>

 Standalone mode is an experimental feature, please &lt;strong>DO NOT&lt;/strong> use it in production.

&lt;/div>

&lt;p>Envoy Gateway also supports running in standalone mode. In this mode, Envoy Gateway
does not need to rely on Kubernetes and can be deployed directly on bare metal or virtual machines.&lt;/p>
&lt;p>Currently, Envoy Gateway only support the file provider and the host infrastructure provider combinations.&lt;/p>
&lt;ul>
&lt;li>The file provider will configure the Envoy Gateway to get all gateway-api resources from file system.&lt;/li>
&lt;li>The host infrastructure provider will configure the Envoy Gateway to deploy one Envoy Proxy as a host process.&lt;/li>
&lt;/ul>
&lt;h2 id="quick-start">Quick Start&lt;a class="td-heading-self-link" href="#quick-start" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>In this quick-start, we will run Envoy Gateway in standalone mode with the file provider
and the host infrastructure provider.&lt;/p></description></item><item><title>TCP and UDP Proxy Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/tcp-udp-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/tcp-udp-design/</guid><description>&lt;p>Even though most of the use cases for Envoy Gateway are at Layer-7, Envoy Gateway can also work at Layer-4 to proxy TCP
and UDP traffic. This document will explore the options we have when operating Envoy Gateway at Layer-4 and explain the
design decision.&lt;/p>
&lt;p>Envoy can work as a non-transparent proxy or a transparent proxy for both &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/ip_transparency#arch-overview-ip-transparency-original-src-listener">TCP&lt;/a>
and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto#envoy-v3-api-msg-extensions-filters-udp-udp-proxy-v3-udpproxyconfig">UDP&lt;/a>
, so ideally, Envoy Gateway should also be able to work in these two modes:&lt;/p></description></item><item><title>TCP and UDP Proxy Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/tcp-udp-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/design/tcp-udp-design/</guid><description>&lt;p>Even though most of the use cases for Envoy Gateway are at Layer-7, Envoy Gateway can also work at Layer-4 to proxy TCP
and UDP traffic. This document will explore the options we have when operating Envoy Gateway at Layer-4 and explain the
design decision.&lt;/p>
&lt;p>Envoy can work as a non-transparent proxy or a transparent proxy for both &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/ip_transparency#arch-overview-ip-transparency-original-src-listener">TCP&lt;/a>
and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto#envoy-v3-api-msg-extensions-filters-udp-udp-proxy-v3-udpproxyconfig">UDP&lt;/a>
, so ideally, Envoy Gateway should also be able to work in these two modes:&lt;/p></description></item><item><title>TCP and UDP Proxy Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/tcp-udp-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/design/tcp-udp-design/</guid><description>&lt;p>Even though most of the use cases for Envoy Gateway are at Layer-7, Envoy Gateway can also work at Layer-4 to proxy TCP
and UDP traffic. This document will explore the options we have when operating Envoy Gateway at Layer-4 and explain the
design decision.&lt;/p>
&lt;p>Envoy can work as a non-transparent proxy or a transparent proxy for both &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/ip_transparency#arch-overview-ip-transparency-original-src-listener">TCP&lt;/a>
and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto#envoy-v3-api-msg-extensions-filters-udp-udp-proxy-v3-udpproxyconfig">UDP&lt;/a>
, so ideally, Envoy Gateway should also be able to work in these two modes:&lt;/p></description></item><item><title>TCP and UDP Proxy Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/tcp-udp-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/design/tcp-udp-design/</guid><description>&lt;p>Even though most of the use cases for Envoy Gateway are at Layer-7, Envoy Gateway can also work at Layer-4 to proxy TCP
and UDP traffic. This document will explore the options we have when operating Envoy Gateway at Layer-4 and explain the
design decision.&lt;/p>
&lt;p>Envoy can work as a non-transparent proxy or a transparent proxy for both &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/ip_transparency#arch-overview-ip-transparency-original-src-listener">TCP&lt;/a>
and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto#envoy-v3-api-msg-extensions-filters-udp-udp-proxy-v3-udpproxyconfig">UDP&lt;/a>
, so ideally, Envoy Gateway should also be able to work in these two modes:&lt;/p></description></item><item><title>TCP and UDP Proxy Design</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/tcp-udp-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/design/tcp-udp-design/</guid><description>&lt;p>Even though most of the use cases for Envoy Gateway are at Layer-7, Envoy Gateway can also work at Layer-4 to proxy TCP
and UDP traffic. This document will explore the options we have when operating Envoy Gateway at Layer-4 and explain the
design decision.&lt;/p>
&lt;p>Envoy can work as a non-transparent proxy or a transparent proxy for both &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/ip_transparency#arch-overview-ip-transparency-original-src-listener">TCP&lt;/a>
and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto#envoy-v3-api-msg-extensions-filters-udp-udp-proxy-v3-udpproxyconfig">UDP&lt;/a>
, so ideally, Envoy Gateway should also be able to work in these two modes:&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.3.0/install.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configuration">Configuration&lt;a class="td-heading-self-link" href="#configuration" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>In this example, we have one Gateway resource and two TCPRoute resources that distribute the traffic with the following
rules:&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.4.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.5.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install Envoy Gateway:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.6.0 -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for Envoy Gateway to become available:&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> guide to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Threat Model</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/threat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/threat-model/</guid><description>&lt;h1 id="envoy-gateway-threat-model-and-end-user-recommendations">Envoy Gateway Threat Model and End User Recommendations&lt;a class="td-heading-self-link" href="#envoy-gateway-threat-model-and-end-user-recommendations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="about">About&lt;a class="td-heading-self-link" href="#about" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This work was performed by &lt;a href="https://control-plane.io/">ControlPlane&lt;/a> and commissioned by the &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>. ControlPlane is a global cloud native and open source cybersecurity consultancy, trusted as the partner of choice in securing: multinational banks; major public clouds; international financial institutions; critical national infrastructure programs; multinational oil and gas companies, healthcare and insurance providers; and global media firms.&lt;/p>
&lt;h2 id="threat-modelling-team">Threat Modelling Team&lt;a class="td-heading-self-link" href="#threat-modelling-team" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>James Callaghan, Torin van den Bulk, Eduardo Olarte&lt;/p></description></item><item><title>Threat Model</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/threat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/threat-model/</guid><description>&lt;h1 id="envoy-gateway-threat-model-and-end-user-recommendations">Envoy Gateway Threat Model and End User Recommendations&lt;a class="td-heading-self-link" href="#envoy-gateway-threat-model-and-end-user-recommendations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="about">About&lt;a class="td-heading-self-link" href="#about" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This work was performed by &lt;a href="https://control-plane.io/">ControlPlane&lt;/a> and commissioned by the &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>. ControlPlane is a global cloud native and open source cybersecurity consultancy, trusted as the partner of choice in securing: multinational banks; major public clouds; international financial institutions; critical national infrastructure programs; multinational oil and gas companies, healthcare and insurance providers; and global media firms.&lt;/p>
&lt;h2 id="threat-modelling-team">Threat Modelling Team&lt;a class="td-heading-self-link" href="#threat-modelling-team" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>James Callaghan, Torin van den Bulk, Eduardo Olarte&lt;/p></description></item><item><title>Threat Model</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/threat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/threat-model/</guid><description>&lt;h1 id="envoy-gateway-threat-model-and-end-user-recommendations">Envoy Gateway Threat Model and End User Recommendations&lt;a class="td-heading-self-link" href="#envoy-gateway-threat-model-and-end-user-recommendations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="about">About&lt;a class="td-heading-self-link" href="#about" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This work was performed by &lt;a href="https://control-plane.io/">ControlPlane&lt;/a> and commissioned by the &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>. ControlPlane is a global cloud native and open source cybersecurity consultancy, trusted as the partner of choice in securing: multinational banks; major public clouds; international financial institutions; critical national infrastructure programs; multinational oil and gas companies, healthcare and insurance providers; and global media firms.&lt;/p>
&lt;h2 id="threat-modelling-team">Threat Modelling Team&lt;a class="td-heading-self-link" href="#threat-modelling-team" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>James Callaghan, Torin van den Bulk, Eduardo Olarte&lt;/p></description></item><item><title>Threat Model</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/threat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/threat-model/</guid><description>&lt;h1 id="envoy-gateway-threat-model-and-end-user-recommendations">Envoy Gateway Threat Model and End User Recommendations&lt;a class="td-heading-self-link" href="#envoy-gateway-threat-model-and-end-user-recommendations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="about">About&lt;a class="td-heading-self-link" href="#about" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This work was performed by &lt;a href="https://control-plane.io/">ControlPlane&lt;/a> and commissioned by the &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>. ControlPlane is a global cloud native and open source cybersecurity consultancy, trusted as the partner of choice in securing: multinational banks; major public clouds; international financial institutions; critical national infrastructure programs; multinational oil and gas companies, healthcare and insurance providers; and global media firms.&lt;/p>
&lt;h2 id="threat-modelling-team">Threat Modelling Team&lt;a class="td-heading-self-link" href="#threat-modelling-team" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>James Callaghan, Torin van den Bulk, Eduardo Olarte&lt;/p></description></item><item><title>Threat Model</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/threat-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/threat-model/</guid><description>&lt;h1 id="envoy-gateway-threat-model-and-end-user-recommendations">Envoy Gateway Threat Model and End User Recommendations&lt;a class="td-heading-self-link" href="#envoy-gateway-threat-model-and-end-user-recommendations" aria-label="Heading self-link">&lt;/a>&lt;/h1>
&lt;h2 id="about">About&lt;a class="td-heading-self-link" href="#about" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This work was performed by &lt;a href="https://control-plane.io/">ControlPlane&lt;/a> and commissioned by the &lt;a href="https://www.linuxfoundation.org/">Linux Foundation&lt;/a>. ControlPlane is a global cloud native and open source cybersecurity consultancy, trusted as the partner of choice in securing: multinational banks; major public clouds; international financial institutions; critical national infrastructure programs; multinational oil and gas companies, healthcare and insurance providers; and global media firms.&lt;/p>
&lt;h2 id="threat-modelling-team">Threat Modelling Team&lt;a class="td-heading-self-link" href="#threat-modelling-team" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>James Callaghan, Torin van den Bulk, Eduardo Olarte&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/tls-passthrough/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/tls-passthrough/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/user/tls-passthrough/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/tls-passthrough/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/tls-passthrough/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tls-passthrough/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tls-passthrough/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-passthrough/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/tls-passthrough/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Passthrough</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/tls-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/tls-passthrough/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Passthrough via Envoy Gateway. Unlike configuring
Secure Gateways, where the Gateway terminates the client TLS connection, TLS Passthrough allows the application itself
to terminate the TLS connection, while the Gateway routes the requests to the application based on SNI headers.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/tls-termination/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/tls-termination/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tls-termination/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway. The guide uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tls-termination/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway. The guide uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-termination/</guid><description>&lt;p>This guide will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway. The guide uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/tls-termination/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway.&lt;/p>
&lt;h2 id="tls-certificates">TLS Certificates&lt;a class="td-heading-self-link" href="#tls-certificates" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Generate the certificates and keys used by the Gateway to terminate client TLS connections.&lt;/p></description></item><item><title>TLS Termination for TCP</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/tls-termination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/tls-termination/</guid><description>&lt;p>This task will walk through the steps required to configure TLS Terminate mode for TCP traffic via Envoy Gateway.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/traffic/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This task will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/traffic/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This task will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/user/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This guide will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This guide will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This guide will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This guide will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/traffic/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This task will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/traffic/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This task will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This task will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/operations/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="egctl-experimental-translate">egctl experimental translate&lt;a class="td-heading-self-link" href="#egctl-experimental-translate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This subcommand allows users to translate from an input configuration type to an output configuration type.&lt;/p>
&lt;p>The &lt;code>translate&lt;/code> subcommand can translate Kubernetes resources to:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Gateway API resources
This is useful in order to see how validation would occur if these resources were applied to Kubernetes.&lt;/p>
&lt;p>Use the &lt;code>--to gateway-api&lt;/code> parameter to translate to Gateway API resources.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/operations/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="egctl-experimental-translate">egctl experimental translate&lt;a class="td-heading-self-link" href="#egctl-experimental-translate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This subcommand allows users to translate from an input configuration type to an output configuration type.&lt;/p>
&lt;p>The &lt;code>translate&lt;/code> subcommand can translate Kubernetes resources to:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Gateway API resources
This is useful in order to see how validation would occur if these resources were applied to Kubernetes.&lt;/p>
&lt;p>Use the &lt;code>--to gateway-api&lt;/code> parameter to translate to Gateway API resources.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/user/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="installing-egctl">Installing egctl&lt;a class="td-heading-self-link" href="#installing-egctl" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This guide shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="installing-egctl">Installing egctl&lt;a class="td-heading-self-link" href="#installing-egctl" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This guide shows how to install the egctl CLI. egctl can be installed either from source, or from pre-built binary releases.&lt;/p>
&lt;h3 id="from-the-envoy-gateway-project">From The Envoy Gateway Project&lt;a class="td-heading-self-link" href="#from-the-envoy-gateway-project" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>The Envoy Gateway project provides two ways to fetch and install egctl. These are the official methods to get egctl releases. Installation through those methods can be found below the official methods.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="egctl-experimental-translate">egctl experimental translate&lt;a class="td-heading-self-link" href="#egctl-experimental-translate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This subcommand allows users to translate from an input configuration type to an output configuration type.&lt;/p>
&lt;p>In the below example, we will translate the Kubernetes resources (including the Gateway API resources) into xDS
resources.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF | egctl x translate --from gateway-api --to xds -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.networking.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: GatewayClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> controllerName: gateway.envoyproxy.io/gatewayclass-controller
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.networking.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: Gateway
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> namespace: default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> gatewayClassName: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> listeners:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - name: http
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> protocol: HTTP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> port: 80
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: Namespace
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: default 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: Service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: backend
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> namespace: default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> labels:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> app: backend
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> service: backend
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> clusterIP: &amp;#34;1.1.1.1&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: ClusterIP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> ports:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - name: http
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> port: 3000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> targetPort: 3000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> protocol: TCP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> selector:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> app: backend
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.networking.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRoute
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: backend
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> namespace: default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> parentRefs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - name: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> hostnames:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;www.example.com&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> rules:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - backendRefs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - group: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: Service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: backend
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> port: 3000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> weight: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">configKey&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-eg&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">configs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.admin.v3.BootstrapConfigDump&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bootstrap&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">accessLog&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">envoy.access_loggers.file&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">typedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/dev/null&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">socketAddress&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">portValue&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">19000&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dynamicResources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cdsConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiConfigSource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiType&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DELTA_GRPC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">grpcServices&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">envoyGrpc&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">clusterName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">setNodeOnFirstMessageOnly&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">transportApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resourceApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ldsConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiConfigSource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiType&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DELTA_GRPC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">grpcServices&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">envoyGrpc&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">clusterName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">setNodeOnFirstMessageOnly&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">transportApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resourceApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">layeredRuntime&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">layers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">runtime-0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rtdsLayer&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">runtime-0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rtdsConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiConfigSource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiType&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DELTA_GRPC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">grpcServices&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">envoyGrpc&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">clusterName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">transportApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resourceApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">staticResources&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">clusters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">connectTimeout&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">10s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loadAssignment&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">clusterName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">endpoints&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">lbEndpoints&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">endpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">socketAddress&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">envoy-gateway&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">portValue&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">18000&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">transportSocket&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">envoy.transport_sockets.tls&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">typedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">commonTlsContext&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tlsCertificateSdsSecretConfigs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_certificate&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sdsConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pathConfigSource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/sds/xds-certificate.json&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resourceApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tlsParams&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tlsMaximumProtocolVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">TLSv1_3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">validationContextSdsSecretConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_trusted_ca&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sdsConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pathConfigSource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/sds/xds-trusted-ca.json&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resourceApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">STRICT_DNS&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">typedExtensionProtocolOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">envoy.extensions.upstreams.http.v3.HttpProtocolOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">explicitHttpConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">http2ProtocolOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.admin.v3.ClustersConfigDump&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dynamicActiveClusters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">cluster&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.config.cluster.v3.Cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">commonLbConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">localityWeightedLbConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">connectTimeout&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">10s&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dnsLookupFamily&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V4_ONLY&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loadAssignment&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">clusterName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-backend-rule-0-match-0-www.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">endpoints&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">lbEndpoints&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">endpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">socketAddress&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1.1.1.1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">portValue&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3000&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loadBalancingWeight&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">loadBalancingWeight&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">locality&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-backend-rule-0-match-0-www.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">outlierDetection&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">STATIC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.admin.v3.ListenersConfigDump&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dynamicListeners&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">activeState&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">listener&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.config.listener.v3.Listener&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">accessLog&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">responseFlagFilter&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">flags&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">NR&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">envoy.access_loggers.file&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">typedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/dev/stdout&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">socketAddress&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.0.0.0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">portValue&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10080&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">defaultFilterChain&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">filters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">envoy.filters.network.http_connection_manager&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">typedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">accessLog&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">envoy.access_loggers.file&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">typedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">path&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/dev/stdout&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">httpFilters&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">envoy.filters.http.router&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">typedConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.extensions.filters.http.router.v3.Router&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rds&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">configSource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiConfigSource&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiType&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">DELTA_GRPC&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">grpcServices&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">envoyGrpc&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">clusterName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">xds_cluster&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">setNodeOnFirstMessageOnly&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">transportApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">resourceApiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">V3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">routeConfigName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-eg-http&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">statPrefix&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">upgradeConfigs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">upgradeType&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">websocket&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">useRemoteAddress&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-eg-http&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.admin.v3.RoutesConfigDump&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dynamicRouteConfigs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">routeConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">&amp;#39;@type&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">type.googleapis.com/envoy.config.route.v3.RouteConfiguration&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-eg-http&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">virtualHosts&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">domains&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">www.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-eg-http-www.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">routes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">match&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">prefix&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">/&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">route&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cluster&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default-backend-rule-0-match-0-www.example.com&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">resourceType&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">all&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use the &lt;code>--type&lt;/code>/&lt;code>-t&lt;/code> flag to retrieve specific output types. In the below example, we will translate the Kubernetes resources (including the Gateway API resources) into xDS &lt;code>route&lt;/code> resources.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/operations/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/operations/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="egctl-experimental-translate">egctl experimental translate&lt;a class="td-heading-self-link" href="#egctl-experimental-translate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This subcommand allows users to translate from an input configuration type to an output configuration type.&lt;/p>
&lt;p>The &lt;code>translate&lt;/code> subcommand can translate Kubernetes resources to:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Gateway API resources
This is useful in order to see how validation would occur if these resources were applied to Kubernetes.&lt;/p>
&lt;p>Use the &lt;code>--to gateway-api&lt;/code> parameter to translate to Gateway API resources.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/operations/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/operations/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="egctl-experimental-translate">egctl experimental translate&lt;a class="td-heading-self-link" href="#egctl-experimental-translate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This subcommand allows users to translate from an input configuration type to an output configuration type.&lt;/p>
&lt;p>The &lt;code>translate&lt;/code> subcommand can translate Kubernetes resources to:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Gateway API resources
This is useful in order to see how validation would occur if these resources were applied to Kubernetes.&lt;/p>
&lt;p>Use the &lt;code>--to gateway-api&lt;/code> parameter to translate to Gateway API resources.&lt;/p></description></item><item><title>Use egctl</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/egctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/operations/egctl/</guid><description>&lt;p>&lt;code>egctl&lt;/code> is a command line tool to provide additional functionality for Envoy Gateway users.&lt;/p>
&lt;h2 id="egctl-experimental-translate">egctl experimental translate&lt;a class="td-heading-self-link" href="#egctl-experimental-translate" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This subcommand allows users to translate from an input configuration type to an output configuration type.&lt;/p>
&lt;p>The &lt;code>translate&lt;/code> subcommand can translate Kubernetes resources to:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Gateway API resources
This is useful in order to see how validation would occur if these resources were applied to Kubernetes.&lt;/p>
&lt;p>Use the &lt;code>--to gateway-api&lt;/code> parameter to translate to Gateway API resources.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/security/tls-cert-manager/</guid><description>&lt;p>This task shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/security/tls-cert-manager/</guid><description>&lt;p>This task shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/user/tls-cert-manager/</guid><description>&lt;p>This guide shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../quickstart">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/tls-cert-manager/</guid><description>&lt;p>This guide shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/security/tls-cert-manager/</guid><description>&lt;p>This guide shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/security/tls-cert-manager/</guid><description>&lt;p>This task shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Using cert-manager For TLS Termination</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/tls-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/security/tls-cert-manager/</guid><description>&lt;p>This task shows how to set up &lt;a href="https://cert-manager.io/">cert-manager&lt;/a> to automatically create certificates and secrets for use by Envoy Gateway.
It will first show how to enable the self-sign issuer, which is useful to test that cert-manager and Envoy Gateway can talk to each other.
Then it shows how to use &lt;a href="https://letsencrypt.org/docs/staging-environment/">Let&amp;rsquo;s Encrypt&amp;rsquo;s staging environment&lt;/a>.
Changing to the Let&amp;rsquo;s Encrypt production environment is straight-forward after that.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>A Kubernetes cluster and a configured &lt;code>kubectl&lt;/code>.&lt;/li>
&lt;li>The &lt;code>helm&lt;/code> command.&lt;/li>
&lt;li>The &lt;code>curl&lt;/code> command or similar for testing HTTPS requests.&lt;/li>
&lt;li>For the ACME HTTP-01 challenge to work
&lt;ul>
&lt;li>your Gateway must be reachable on the public Internet.&lt;/li>
&lt;li>the domain name you use (we use &lt;code>www.example.com&lt;/code>) must point to the Gateway&amp;rsquo;s external IP(s).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Visualising metrics using Grafana</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/grafana-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/observability/grafana-integration/</guid><description>&lt;p>Envoy Gateway provides support for exposing Envoy Gateway and Envoy Proxy metrics to a Prometheus instance.
This task shows you how to visualise the metrics exposed to Prometheus using Grafana.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/docs/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Visualising metrics using Grafana</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/grafana-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/observability/grafana-integration/</guid><description>&lt;p>Envoy Gateway provides support for exposing Envoy Gateway and Envoy Proxy metrics to a Prometheus instance.
This task shows you how to visualise the metrics exposed to Prometheus using Grafana.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/latest/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Visualising metrics using Grafana</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/grafana-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/user/grafana-integration/</guid><description>&lt;p>Envoy Gateway provides support for exposing Envoy Proxy metrics to a Prometheus instance.
This guide shows you how to visualise the metrics exposed to prometheus using grafana.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v0.6/user/quickstart/">Quickstart Guide&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Follow the steps from the &lt;a href="../proxy-observability#Metrics">Proxy Observability&lt;/a> to enable prometheus metrics.&lt;/p>
&lt;p>&lt;a href="https://prometheus.io">Prometheus&lt;/a> is used to scrape metrics from the Envoy Proxy instances. Install Prometheus:&lt;/p></description></item><item><title>Visualising metrics using Grafana</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/observability/grafana-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.0/tasks/observability/grafana-integration/</guid><description>&lt;p>Envoy Gateway provides support for exposing Envoy Proxy metrics to a Prometheus instance.
This guide shows you how to visualise the metrics exposed to prometheus using grafana.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Follow the steps from the &lt;a href="../proxy-observability#Metrics">Proxy Observability&lt;/a> to enable prometheus metrics.&lt;/p>
&lt;p>&lt;a href="https://prometheus.io">Prometheus&lt;/a> is used to scrape metrics from the Envoy Proxy instances. Install Prometheus:&lt;/p></description></item><item><title>Visualising metrics using Grafana</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/grafana-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/observability/grafana-integration/</guid><description>&lt;p>Envoy Gateway provides support for exposing Envoy Gateway and Envoy Proxy metrics to a Prometheus instance.
This task shows you how to visualise the metrics exposed to Prometheus using Grafana.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.1/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Visualising metrics using Grafana</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/grafana-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/observability/grafana-integration/</guid><description>&lt;p>Envoy Gateway provides support for exposing Envoy Gateway and Envoy Proxy metrics to a Prometheus instance.
This task shows you how to visualise the metrics exposed to Prometheus using Grafana.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Envoy Gateway provides an add-ons Helm Chart, which includes all the needing components for observability.
By default, the &lt;a href="https://opentelemetry.io/docs/collector/">OpenTelemetry Collector&lt;/a> is disabled.&lt;/p></description></item><item><title>Wasm Extensions</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/wasm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/docs/tasks/extensibility/wasm/</guid><description>&lt;p>This task provides instructions for extending Envoy Gateway with WebAssembly (Wasm) extensions.&lt;/p>
&lt;p>Wasm extensions allow you to extend the functionality of Envoy Gateway by running custom code against HTTP requests and responses,
without modifying the Envoy Gateway binary. These extensions can be written in any language that compiles to Wasm, such as C++, Rust, AssemblyScript, or TinyGo.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure Wasm extensions.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>Wasm Extensions</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/wasm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/latest/tasks/extensibility/wasm/</guid><description>&lt;p>This task provides instructions for extending Envoy Gateway with WebAssembly (Wasm) extensions.&lt;/p>
&lt;p>Wasm extensions allow you to extend the functionality of Envoy Gateway by running custom code against HTTP requests and responses,
without modifying the Envoy Gateway binary. These extensions can be written in any language that compiles to Wasm, such as C++, Rust, AssemblyScript, or TinyGo.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure Wasm extensions.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>Wasm Extensions</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/wasm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.1/tasks/extensibility/wasm/</guid><description>&lt;p>This task provides instructions for extending Envoy Gateway with WebAssembly (Wasm) extensions.&lt;/p>
&lt;p>Wasm extensions allow you to extend the functionality of Envoy Gateway by running custom code against HTTP requests and responses,
without modifying the Envoy Gateway binary. These extensions can be written in any language that compiles to Wasm, such as C++, Rust, AssemblyScript, or TinyGo.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure Wasm extensions.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>Wasm Extensions</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/wasm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/extensibility/wasm/</guid><description>&lt;p>This task provides instructions for extending Envoy Gateway with WebAssembly (Wasm) extensions.&lt;/p>
&lt;p>Wasm extensions allow you to extend the functionality of Envoy Gateway by running custom code against HTTP requests and responses,
without modifying the Envoy Gateway binary. These extensions can be written in any language that compiles to Wasm, such as C++, Rust, AssemblyScript, or TinyGo.&lt;/p>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#envoyextensionpolicy">EnvoyExtensionPolicy&lt;/a> that allows the user to configure Wasm extensions.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a> and &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> resource.&lt;/p></description></item><item><title>Wasm OCI Image Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/wasm-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/design/wasm-extension/</guid><description>&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Envoy Gateway (EG) should support Wasm OCI image as a remote wasm code source.
This feature will allow users to deploy Wasm modules from OCI registries, such as Docker Hub,
Google Container Registry, and Amazon Elastic Container Registry, to Envoy proxies managed by EG.
Deploying Wasm modules from OCI registries has several benefits:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Versioning&lt;/strong>: Users can use the tag feature of the OCI image to manage the version of the Wasm module.&lt;/li>
&lt;li>&lt;strong>Security&lt;/strong>: Users can use private registries to store the Wasm module.&lt;/li>
&lt;li>&lt;strong>Distribution&lt;/strong>: Users can use the existing distribution mechanism of the OCI registry to distribute the Wasm module.&lt;/li>
&lt;/ul>
&lt;h2 id="goals">Goals&lt;a class="td-heading-self-link" href="#goals" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Define the system components needed to support Wasm OCI images as remote Wasm code sources.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;a class="td-heading-self-link" href="#architecture" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>
&lt;img src="https://zirain.github.io/eg-pr-preview/5-test-docs-preview//img/wasm-extension.png">&lt;/p></description></item><item><title>Working on Envoy Gateway Docs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/contributions/docs/</guid><description>&lt;p>The documentation for the Envoy Gateway lives in the &lt;code>site/content/en&lt;/code> directory (the Chinese content in the &lt;code>site/content/zh&lt;/code> directory).
Any individual document can be written using &lt;a href="https://daringfireball.net/projects/markdown/syntax">Markdown&lt;/a>.&lt;/p>
&lt;h2 id="documentation-structure">Documentation Structure&lt;a class="td-heading-self-link" href="#documentation-structure" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We supported the versioned Docs now, the directory name under docs represents
the version of docs. The root of the latest site is in &lt;code>site/content/en/latest&lt;/code>.
This is probably where to start if you&amp;rsquo;re trying to understand how things fit together.&lt;/p>
&lt;p>Note that the new contents should be added to &lt;code>site/content/en/latest&lt;/code> and will be cut off at
the next release. The contents under &lt;code>site/content/en/v0.5.0&lt;/code> are auto-generated,
and usually do not need to make changes to them, unless if you find the current release pages have
some incorrect contents. If so, you should send a PR to update contents both of &lt;code>site/content/en/latest&lt;/code>
and &lt;code>site/content/en/v0.5.0&lt;/code>.&lt;/p></description></item><item><title>Working on Envoy Gateway Docs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.2/contributions/docs/</guid><description>&lt;p>The documentation for the Envoy Gateway lives in the &lt;code>docs/&lt;/code> directory. Any
individual document can be written using either &lt;a href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html">reStructuredText&lt;/a> or &lt;a href="https://daringfireball.net/projects/markdown/syntax">Markdown&lt;/a>,
you can choose the format that you&amp;rsquo;re most comfortable with when working on the
documentation.&lt;/p>
&lt;h2 id="documentation-structure">Documentation Structure&lt;a class="td-heading-self-link" href="#documentation-structure" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We supported the versioned Docs now, the directory name under docs represents
the version of docs. The root of the latest site is in &lt;code>docs/latest/index.rst&lt;/code>.
This is probably where to start if you&amp;rsquo;re trying to understand how things fit together.&lt;/p></description></item><item><title>Working on Envoy Gateway Docs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.3/contributions/docs/</guid><description>&lt;p>The documentation for the Envoy Gateway lives in the &lt;code>docs/&lt;/code> directory. Any
individual document can be written using either &lt;a href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html">reStructuredText&lt;/a> or &lt;a href="https://daringfireball.net/projects/markdown/syntax">Markdown&lt;/a>,
you can choose the format that you&amp;rsquo;re most comfortable with when working on the
documentation.&lt;/p>
&lt;h2 id="documentation-structure">Documentation Structure&lt;a class="td-heading-self-link" href="#documentation-structure" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We supported the versioned Docs now, the directory name under docs represents
the version of docs. The root of the latest site is in &lt;code>docs/latest/index.rst&lt;/code>.
This is probably where to start if you&amp;rsquo;re trying to understand how things fit together.&lt;/p></description></item><item><title>Working on Envoy Gateway Docs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.4/contributions/docs/</guid><description>&lt;p>The documentation for the Envoy Gateway lives in the &lt;code>docs/&lt;/code> directory. Any
individual document can be written using either &lt;a href="https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html">reStructuredText&lt;/a> or &lt;a href="https://daringfireball.net/projects/markdown/syntax">Markdown&lt;/a>,
you can choose the format that you&amp;rsquo;re most comfortable with when working on the
documentation.&lt;/p>
&lt;h2 id="documentation-structure">Documentation Structure&lt;a class="td-heading-self-link" href="#documentation-structure" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We supported the versioned Docs now, the directory name under docs represents
the version of docs. The root of the latest site is in &lt;code>docs/latest/index.rst&lt;/code>.
This is probably where to start if you&amp;rsquo;re trying to understand how things fit together.&lt;/p></description></item><item><title>Working on Envoy Gateway Docs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.5/contributions/docs/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>

 &lt;p>We migrated from &lt;em>&lt;strong>Sphinx&lt;/strong>&lt;/em> to &lt;em>&lt;strong>Hugo&lt;/strong>&lt;/em> for Envoy Gateway Documents.&lt;/p>
&lt;p>Read blog: &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/blogs/new-website/new-website/">Welcome to new website!&lt;/a>&lt;/p>


&lt;/div>

&lt;p>The documentation for the Envoy Gateway lives in the &lt;code>site/content/en&lt;/code> directory. Any
individual document can be written using &lt;a href="https://daringfireball.net/projects/markdown/syntax">Markdown&lt;/a>.&lt;/p>
&lt;h2 id="documentation-structure">Documentation Structure&lt;a class="td-heading-self-link" href="#documentation-structure" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We supported the versioned Docs now, the directory name under docs represents
the version of docs. The root of the latest site is in &lt;code>site/content/en/latest&lt;/code>.
This is probably where to start if you&amp;rsquo;re trying to understand how things fit together.&lt;/p></description></item><item><title>Working on Envoy Gateway Docs</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v0.6/contributions/docs/</guid><description>&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>

 &lt;p>We migrated from &lt;em>&lt;strong>Sphinx&lt;/strong>&lt;/em> to &lt;em>&lt;strong>Hugo&lt;/strong>&lt;/em> for Envoy Gateway Documents.&lt;/p>
&lt;p>Read blog: &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/news/blogs/new-website/new-website/">Welcome to new website!&lt;/a>&lt;/p>


&lt;/div>

&lt;p>The documentation for the Envoy Gateway lives in the &lt;code>site/content/en&lt;/code> directory. Any
individual document can be written using &lt;a href="https://daringfireball.net/projects/markdown/syntax">Markdown&lt;/a>.&lt;/p>
&lt;h2 id="documentation-structure">Documentation Structure&lt;a class="td-heading-self-link" href="#documentation-structure" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>We supported the versioned Docs now, the directory name under docs represents
the version of docs. The root of the latest site is in &lt;code>site/content/en/latest&lt;/code>.
This is probably where to start if you&amp;rsquo;re trying to understand how things fit together.&lt;/p></description></item></channel></rss>