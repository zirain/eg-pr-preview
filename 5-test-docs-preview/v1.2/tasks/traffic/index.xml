<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Traffic on Envoy Gateway</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/</link><description>Recent content in Traffic on Envoy Gateway</description><generator>Hugo</generator><language>en</language><atom:link href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/index.xml" rel="self" type="application/rss+xml"/><item><title>Backend Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/backend/</guid><description>&lt;p>Envoy Gateway supports routing to native K8s resources such as &lt;code>Service&lt;/code> and &lt;code>ServiceImport&lt;/code>. The &lt;code>Backend&lt;/code> API is a custom Envoy Gateway &lt;a href="https://gateway-api.sigs.k8s.io/guides/migrating-from-ingress/#approach-to-extensibility">extension resource&lt;/a> that can used in Gateway-API &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendObjectReference">BackendObjectReference&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The Backend API was added to support several use cases:&lt;/p>
&lt;ul>
&lt;li>Allowing users to integrate Envoy with services (Ext Auth, Rate Limit, ALS, &amp;hellip;) using Unix Domain Sockets, which are currently not supported by K8s.&lt;/li>
&lt;li>Simplify &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/routing-outside-kubernetes/">routing to cluster-external backends&lt;/a>, which currently requires users to maintain both K8s &lt;code>Service&lt;/code> and &lt;code>EndpointSlice&lt;/code> resources.&lt;/li>
&lt;/ul>
&lt;h2 id="warning">Warning&lt;a class="td-heading-self-link" href="#warning" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Similar to the K8s EndpointSlice API, the Backend API can be misused to allow traffic to be sent to otherwise restricted destinations, as described in &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25740">CVE-2021-25740&lt;/a>.
A Backend resource can be used to:&lt;/p></description></item><item><title>Circuit Breakers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/circuit-breaker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/circuit-breaker/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking">Envoy circuit breakers&lt;/a> can be used to fail quickly and apply back-pressure in response to upstream service degradation.&lt;/p>
&lt;p>Envoy Gateway supports the following circuit breaker thresholds:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concurrent Connections&lt;/strong>: limit the connections that Envoy can establish to the upstream service. When this threshold is met, new connections will not be established, and some requests will be queued until an existing connection becomes available.&lt;/li>
&lt;li>&lt;strong>Concurrent Requests&lt;/strong>: limit on concurrent requests in-flight from Envoy to the upstream service. When this threshold is met, requests will be queued.&lt;/li>
&lt;li>&lt;strong>Pending Requests&lt;/strong>: limit the pending request queue size. When this threshold is met, overflowing requests will be terminated with a &lt;code>503&lt;/code> status code.&lt;/li>
&lt;/ul>
&lt;p>Envoy&amp;rsquo;s circuit breakers are distributed: counters are not synchronized across different Envoy processes. The default Envoy and Envoy Gateway circuit breaker threshold values (1024) may be too strict for high-throughput systems.&lt;/p></description></item><item><title>Client Traffic Policy</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/client-traffic-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/client-traffic-policy/</guid><description>&lt;p>This task explains the usage of the &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>The &lt;a href="../../../api/extension_types#clienttrafficpolicy">ClientTrafficPolicy&lt;/a> API allows system administrators to configure
the behavior for how the Envoy Proxy server behaves with downstream clients.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;a class="td-heading-self-link" href="#motivation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>This API was added as a new policy attachment resource that can be applied to Gateway resources and it is meant to hold settings for configuring behavior of the connection between the downstream client and Envoy Proxy listener. It is the counterpart to the &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> API resource.&lt;/p></description></item><item><title>Connection Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/connection-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/connection-limit/</guid><description>&lt;p>The connection limit features allows users to limit the number of concurrently active TCP connections on a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a> or a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.Listener">Listener&lt;/a>.
When the &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/connection_limit_filter">connection limit&lt;/a> is reached, new connections are closed immediately by Envoy proxy. It&amp;rsquo;s possible to configure a delay for connection rejection.&lt;/p>
&lt;p>Users may want to limit the number of connections for several reasons:&lt;/p>
&lt;ul>
&lt;li>Protect resources like CPU and Memory.&lt;/li>
&lt;li>Ensure that different listeners can receive a fair share of global resources.&lt;/li>
&lt;li>Protect from malicious activity like DoS attacks.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#clienttrafficpolicy">Client Traffic Policy&lt;/a> that allows the user to describe their desired connection limit settings.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.Gateway">Gateway&lt;/a>.&lt;/p></description></item><item><title>Direct Response</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/direct-response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/direct-response/</guid><description>&lt;p>Direct responses are valuable in cases where you want the gateway itself
to handle certain requests without forwarding them to backend services.
This task shows you how to configure them.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;h2 id="testing-direct-response">Testing Direct Response&lt;a class="td-heading-self-link" href="#testing-direct-response" aria-label="Heading self-link">&lt;/a>&lt;/h2>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="apply from stdin" aria-controls="tabs-00-00" aria-selected="true">
 Apply from stdin
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="apply from file" aria-controls="tabs-00-01" aria-selected="false">
 Apply from file
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.networking.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRoute
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> parentRefs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - name: eg
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> hostnames:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - &amp;#34;www.example.com&amp;#34; 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> rules:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - matches:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - path:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: PathPrefix
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> value: /value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> filters:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> - type: ExtensionRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> extensionRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: gateway.envoyproxy.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">data:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> response.body: &amp;#39;{&amp;#34;error&amp;#34;: &amp;#34;Internal Server Error&amp;#34;}&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: text/plain
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 503
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: Inline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> inline: &amp;#34;Oops! Your request is not found.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">apiVersion: gateway.envoyproxy.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">kind: HTTPRouteFilter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: direct-response-value-ref
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> directResponse:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> contentType: application/json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> statusCode: 500
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> body:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> type: ValueRef
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> valueRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> group: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> kind: ConfigMap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> name: value-ref-response
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;p>Save and apply the following resource to your cluster:&lt;/p></description></item><item><title>Failover</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/failover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/failover/</guid><description>&lt;p>Active-passive failover in an API gateway setup is like having a backup plan in place to keep things
running smoothly if something goes wrong. Here’s why it’s valuable:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Staying Online: When the main (or &amp;ldquo;active&amp;rdquo;) backend has issues or goes offline,
the fallback (or &amp;ldquo;passive&amp;rdquo;) backend is ready to step in instantly.
This helps keep your API accessible and your services running, so users don’t even notice any interruptions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Automatic Switch Over: If a problem occurs, the system can automatically switch traffic over to the fallback backend.
This avoids needing someone to jump in and fix things manually, which could take time and might even lead to mistakes.&lt;/p></description></item><item><title>Fault Injection</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/fault-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/fault-injection/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/fault_filter.html">Envoy fault injection&lt;/a> can be used to inject delays and abort requests to mimic failure scenarios such as service failures and overloads.&lt;/p>
&lt;p>Envoy Gateway supports the following fault scenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>delay fault&lt;/strong>: inject a custom fixed delay into the request with a certain probability to simulate delay failures.&lt;/li>
&lt;li>&lt;strong>abort fault&lt;/strong>: inject a custom response code into the response with a certain probability to simulate abort failures.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired fault scenarios.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource.&lt;/p></description></item><item><title>Gateway Address</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/</guid><description>&lt;p>The Gateway API provides an optional &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayAddress">Addresses&lt;/a> field through which Envoy Gateway can set addresses for Envoy Proxy Service.
Depending on the Service Type, the addresses of gateway can be used as:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/#external-ips">External IPs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gateway-address/#cluster-ip">Cluster IP&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="external-ips">External IPs&lt;a class="td-heading-self-link" href="#external-ips" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Using the addresses in &lt;code>Gateway.Spec.Addresses&lt;/code> as the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#external-ips">External IPs&lt;/a> of Envoy Proxy Service,
this will &lt;strong>require&lt;/strong> the address to be of type &lt;code>IPAddress&lt;/code> and the &lt;a href="../../../api/extension_types#servicetype">ServiceType&lt;/a> to be of &lt;code>LoadBalancer&lt;/code> or &lt;code>NodePort&lt;/code>.&lt;/p></description></item><item><title>Gateway API Support</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gatewayapi-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/gatewayapi-support/</guid><description>&lt;p>As mentioned in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/contributions/design/system-design/">system design&lt;/a> document, Envoy Gateway&amp;rsquo;s managed data plane is configured dynamically through
Kubernetes resources, primarily &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API&lt;/a> objects. Envoy Gateway supports configuration using the following Gateway API resources.&lt;/p>
&lt;h2 id="gatewayclass">GatewayClass&lt;a class="td-heading-self-link" href="#gatewayclass" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass">GatewayClass&lt;/a> represents a &amp;ldquo;class&amp;rdquo; of gateways, i.e. which Gateways should be managed by Envoy Gateway.
Envoy Gateway supports managing &lt;strong>a single&lt;/strong> GatewayClass resource that matches its configured &lt;code>controllerName&lt;/code> and
follows Gateway API guidelines for &lt;a href="https://gateway-api.sigs.k8s.io/concepts/guidelines/?h=conflict#conflicts">resolving conflicts&lt;/a> when multiple GatewayClasses exist with a matching
&lt;code>controllerName&lt;/code>.&lt;/p></description></item><item><title>Global Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/global-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/global-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>GRPC Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/grpc-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource allows users to configure gRPC routing by matching HTTP/2 traffic and forwarding it to backend gRPC servers.
To learn more about gRPC routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p>



&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
 &lt;li class="nav-item">
 &lt;button class="nav-link active"
 id="tabs-00-00-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-00" role="tab"
 data-td-tp-persist="kubectl" aria-controls="tabs-00-00" aria-selected="true">
 kubectl
 &lt;/button>
 &lt;/li>&lt;li class="nav-item">
 &lt;button class="nav-link"
 id="tabs-00-01-tab" data-bs-toggle="tab" data-bs-target="#tabs-00-01" role="tab"
 data-td-tp-persist="egctl (experimental)" aria-controls="tabs-00-01" aria-selected="false">
 egctl (experimental)
 &lt;/button>
 &lt;/li>
&lt;/ul>

&lt;div class="tab-content" id="tabs-0-content">
 &lt;div class="tab-body tab-pane fade show active"
 id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gateway/eg -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
 &lt;div class="tab-body tab-pane fade"
 id="tabs-00-01" role="tabpanel" aria-labelled-by="tabs-00-01-tab" tabindex="0">
 &lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>egctl x status gateway -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>
&lt;/div>


&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Install the gRPC routing example resources:&lt;/p></description></item><item><title>HTTP Redirects</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-redirect/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can issue redirects to clients or rewrite paths sent upstream using filters. Note that
HTTPRoute rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong>
&lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To
learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Request Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a request before forwarding it to the upstream service. HTTPRoute
rules cannot use both filter types at once. Currently, Envoy Gateway only supports &lt;strong>core&lt;/strong> &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteFilter">HTTPRoute filters&lt;/a> which
consist of &lt;code>RequestRedirect&lt;/code> and &lt;code>RequestHeaderModifier&lt;/code> at the time of this writing. To learn more about HTTP routing,
refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>RequestHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in requests that match the rule
before forwarding the request upstream. Note that the &lt;code>RequestHeaderModifier&lt;/code> filter will only modify headers before the
request is sent from Envoy to the upstream service and will not affect response headers returned to the downstream
client.&lt;/p></description></item><item><title>HTTP Response Headers</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-response-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-response-headers/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource can modify the headers of a response before responding it to the downstream service. To learn
more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPHeaderFilter">&lt;code>ResponseHeaderModifier&lt;/code> filter&lt;/a> instructs Gateways to modify the headers in responses that match the
rule before responding to the downstream. Note that the &lt;code>ResponseHeaderModifier&lt;/code> filter will only modify headers before
the response is returned from Envoy to the downstream client and will not affect request headers forwarding to the
upstream service.&lt;/p></description></item><item><title>HTTP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows users to configure HTTP routing by matching HTTP traffic and forwarding it to
Kubernetes backends. Currently, the only supported backend supported by Envoy Gateway is a Service resource. This task
shows how to route traffic based on host, header, and path fields and forward the traffic to different Kubernetes
Services. To learn more about HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>HTTP Timeouts</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-timeouts/</guid><description>&lt;p>The default request timeout is set to 15 seconds in Envoy Proxy.
The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> resource allows users to configure request timeouts for an &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteRule">HTTPRouteRule&lt;/a>.
This task shows you how to configure timeouts.&lt;/p>
&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRouteTimeouts">HTTPRouteTimeouts&lt;/a> supports two kinds of timeouts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>request&lt;/strong>: Request specifies the maximum duration for a gateway to respond to an HTTP request.&lt;/li>
&lt;li>&lt;strong>backendRequest&lt;/strong>: BackendRequest specifies a timeout for an individual request from the gateway to a backend.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The Request duration must be &amp;gt;= BackendRequest duration&lt;/p></description></item><item><title>HTTP URL Rewrite</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-urlrewrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-urlrewrite/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPURLRewriteFilter">HTTPURLRewriteFilter&lt;/a> defines a filter that modifies a request during forwarding. At most one of these filters may be
used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTP3</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http3/</guid><description>&lt;p>This task will help you get started using HTTP3 using EG.
This task uses a self-signed CA, so it should be used for testing and demonstration purposes only.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>OpenSSL to generate TLS assets.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p>
&lt;p>Verify the Gateway status:&lt;/p></description></item><item><title>HTTPRoute Request Mirroring</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-request-mirroring/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams. It is possible to divide the traffic between these backends using &lt;a href="../http-traffic-splitting/">Traffic Splitting&lt;/a>, but it is also possible to mirror requests to another Service instead. Request mirroring is accomplished using Gateway API&amp;rsquo;s &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.HTTPRequestMirrorFilter">HTTPRequestMirrorFilter&lt;/a> on the &lt;code>HTTPRoute&lt;/code>.&lt;/p>
&lt;p>When requests are made to a &lt;code>HTTPRoute&lt;/code> that uses a &lt;code>HTTPRequestMirrorFilter&lt;/code>, the response will never come from the &lt;code>backendRef&lt;/code> defined in the filter. Responses from the mirror &lt;code>backendRef&lt;/code> are always ignored.&lt;/p></description></item><item><title>HTTPRoute Traffic Splitting</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-traffic-splitting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/http-traffic-splitting/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> resource allows one or more &lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.BackendRef">backendRefs&lt;/a> to be provided. Requests will be routed to these upstreams
if they match the rules of the HTTPRoute. If an invalid backendRef is configured, then HTTP responses will be returned
with status code &lt;code>500&lt;/code> for all requests that would have been sent to that backend.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Load Balancing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/load-balancing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/load-balancing/</guid><description>&lt;p>&lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/overview">Envoy load balancing&lt;/a> is a way of distributing traffic between multiple hosts within a single upstream cluster
in order to effectively make use of available resources.&lt;/p>
&lt;p>Envoy Gateway supports the following load balancing policies:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Round Robin&lt;/strong>: a simple policy in which each available upstream host is selected in round robin order.&lt;/li>
&lt;li>&lt;strong>Random&lt;/strong>: load balancer selects a random available host.&lt;/li>
&lt;li>&lt;strong>Least Request&lt;/strong>: load balancer uses different algorithms depending on whether hosts have the same or different weights.&lt;/li>
&lt;li>&lt;strong>Consistent Hash&lt;/strong>: load balancer implements consistent hashing to upstream hosts.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway introduces a new CRD called &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a> that allows the user to describe their desired load balancing polices.
This instantiated resource can be linked to a &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>, &lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute/">HTTPRoute&lt;/a> or &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> resource. If &lt;code>loadBalancer&lt;/code> is not specified in &lt;a href="../../../api/extension_types#backendtrafficpolicy">BackendTrafficPolicy&lt;/a>, the default load balancing policy is &lt;code>Least Request&lt;/code>.&lt;/p></description></item><item><title>Local Rate Limit</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/local-rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/local-rate-limit/</guid><description>&lt;p>Rate limit is a feature that allows the user to limit the number of incoming requests to a predefined value based on attributes within the traffic flow.&lt;/p>
&lt;p>Here are some reasons why you may want to implement Rate limits&lt;/p>
&lt;ul>
&lt;li>To prevent malicious activity such as DDoS attacks.&lt;/li>
&lt;li>To prevent applications and its resources (such as a database) from getting overloaded.&lt;/li>
&lt;li>To create API limits based on user entitlements.&lt;/li>
&lt;/ul>
&lt;p>Envoy Gateway supports two types of rate limiting: &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting">Global rate limiting&lt;/a> and &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/local_rate_limiting">Local rate limiting&lt;/a>.&lt;/p></description></item><item><title>Multicluster Service Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/multicluster-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/multicluster-service/</guid><description>&lt;p>The Multicluster Service API ServiceImport object can be used as part of the GatewayAPI backendRef for configuring routes. For more information about multicluster service API follow &lt;a href="https://multicluster.sigs.k8s.io/concepts/multicluster-services-api/">sig documentation&lt;/a>.&lt;/p>
&lt;p>We will use &lt;a href="https://github.com/submariner-io/submariner">Submariner project&lt;/a> for setting up the multicluster environment for exporting the service to be routed from peer clusters.&lt;/p>
&lt;h2 id="setting-kind-clusters-and-installing-submariner">Setting KIND clusters and installing Submariner.&lt;a class="td-heading-self-link" href="#setting-kind-clusters-and-installing-submariner" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>We will be using KIND clusters to demonstrate this example.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/submariner-io/submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> submariner-operator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: remain in submariner-operator directory for the rest of the steps in this section&lt;/p></description></item><item><title>Response Override</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/response-override/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/response-override/</guid><description>&lt;p>Response Override allows you to override the response from the backend with a custom one. This can be useful for scenarios such as returning a custom 404 page when the requested resource is not found or a custom 500 error message when the backend is failing.&lt;/p>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>Retry</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/retry/</guid><description>&lt;p>A retry setting specifies the maximum number of times an Envoy proxy attempts to connect to a service if the initial call fails. Retries can enhance service availability and application performance by making sure that calls don’t fail permanently because of transient problems such as a temporarily overloaded service or network. The interval between retries prevents the called service from being overwhelmed with requests.&lt;/p>
&lt;p>Envoy Gateway supports the following retry settings:&lt;/p></description></item><item><title>Routing outside Kubernetes</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/routing-outside-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/routing-outside-kubernetes/</guid><description>&lt;p>Routing to endpoints outside the Kubernetes cluster where Envoy Gateway and its corresponding Envoy Proxy fleet is
running is a common use case. This can be achieved by:&lt;/p>
&lt;ul>
&lt;li>defining FQDN addresses in a &lt;a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/">EndpointSlice&lt;/a> (covered in this document)&lt;/li>
&lt;li>defining a &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/api/extension_types/#backend">Backend&lt;/a> resource, as described in the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/backend/">Backend Task&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="../../quickstart">Quickstart&lt;/a> to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>TCP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/tcp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/tcp-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute">TCPRoute&lt;/a> provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward
connections on the port specified by the listener to a set of backends specified by the TCPRoute. To learn more about
HTTP routing, refer to the &lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API documentation&lt;/a>.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Follow the steps from the &lt;a href="https://zirain.github.io/eg-pr-preview/5-test-docs-preview/eg-pr-preview/5-test-docs-preview/v1.2/tasks/quickstart/">Quickstart&lt;/a> task to install Envoy Gateway and the example manifest.
Before proceeding, you should be able to query the example backend using HTTP.&lt;/p></description></item><item><title>UDP Routing</title><link>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/udp-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zirain.github.io/eg-pr-preview/5-test-docs-preview/v1.2/tasks/traffic/udp-routing/</guid><description>&lt;p>The &lt;a href="https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute">UDPRoute&lt;/a> resource allows users to configure UDP routing by matching UDP traffic and forwarding it to Kubernetes
backends. This task will use CoreDNS example to walk you through the steps required to configure UDPRoute on Envoy
Gateway.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> UDPRoute allows Envoy Gateway to operate as a non-transparent proxy between a UDP client and server. The lack
of transparency means that the upstream server will see the source IP and port of the Gateway instead of the client.
For additional information, refer to Envoy&amp;rsquo;s &lt;a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/udp_filters/udp_proxy">UDP proxy documentation&lt;/a>.&lt;/p></description></item></channel></rss>