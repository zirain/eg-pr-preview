<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>任务 on Envoy Gateway</title><link>/zh/latest/tasks/</link><description>Recent content in 任务 on Envoy Gateway</description><generator>Hugo</generator><language>zh</language><atom:link href="/zh/latest/tasks/index.xml" rel="self" type="application/rss+xml"/><item><title>快速入门</title><link>/zh/latest/tasks/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/latest/tasks/quickstart/</guid><description>&lt;p>本指南将帮助您通过几个简单的步骤开始使用 Envoy Gateway。&lt;/p>
&lt;h2 id="prerequisites">前置条件&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>一个 Kubernetes 集群。&lt;/p>
&lt;p>&lt;strong>注意：&lt;/strong> 请参考&lt;a href="/zh/latest/install/matrix/">兼容性表格&lt;/a>来查看所支持的 Kubernetes 版本。&lt;/p>
&lt;p>&lt;strong>注意：&lt;/strong> 如果您的 Kubernetes 集群没有负载均衡器实现，我们建议安装一个
，以便 Gateway 资源能够关联一个地址。我们推荐使用 &lt;a href="https://metallb.universe.tf/installation/">MetalLB&lt;/a>。&lt;/p>
&lt;h2 id="installation">安装&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>安装 Gateway API CRD 和 Envoy Gateway：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.0.0-latest -n envoy-gateway-system --create-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待 Envoy Gateway 至可用后：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl &lt;span style="color:#204a87">wait&lt;/span> --timeout&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>5m -n envoy-gateway-system deployment/envoy-gateway --for&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 GatewayClass，Gateway，HTTPRoute 和示例应用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/latest/quickstart.yaml -n default
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：&lt;/strong>&lt;a href="https://github.com/envoyproxy/gateway/releases/download/latest/quickstart.yaml">&lt;code>quickstart.yaml&lt;/code>&lt;/a> 定义了 Envoy Gateway 将侦听其全局可路由 IP 地址上端口
80 上的流量，以便轻松使用浏览器测试 Envoy Gateway。当 Envoy Gateway 看到它的侦听器使用特权端口（&amp;lt;1024），
它将在内部映射到非特权端口，因此 Envoy Gateway 不需要额外的特权。
了解此映射很重要，当您调试时您可能需要将其考虑在内。&lt;/p></description></item><item><title>GRPC 路由</title><link>/zh/latest/tasks/traffic/grpc-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/latest/tasks/traffic/grpc-routing/</guid><description>&lt;p>&lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute/">GRPCRoute&lt;/a> 资源允许用户通过匹配 HTTP/2 流量并将其转发到后端 gRPC 服务器来配置 gRPC 路由。
要了解有关 gRPC 路由的更多信息，请参阅&lt;a href="https://gateway-api.sigs.k8s.io/">Gateway API 文档&lt;/a>。&lt;/p>
&lt;h2 id="prerequisites">先决条件&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>按照&lt;a href="/zh/latest/tasks/quickstart/">快速入门&lt;/a>中的步骤安装 Envoy Gateway 和示例清单。
在继续之前，您应该能够使用 HTTP 查询示例程序后端。&lt;/p>
&lt;h2 id="installation">安装&lt;a class="td-heading-self-link" href="#installation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>安装 gRPC 路由示例资源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/latest/examples/kubernetes/grpc-routing.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该清单安装 &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass/">GatewayClass&lt;/a>、&lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway/">Gateway&lt;/a>、Deployment、Service 和 GRPCRoute 资源。
GatewayClass 是集群范围的资源，表示可以被实例化的一类 Gateway。&lt;/p>
&lt;p>**注意：**Envoy Gateway 默认被配置为使用 &lt;code>controllerName: gateway.envoyproxy.io/gatewayclass-controller&lt;/code> 管理 GatewayClass。&lt;/p>
&lt;h2 id="verification">验证&lt;a class="td-heading-self-link" href="#verification" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>检查 GatewayClass 的状态：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl get gc --selector&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">example&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>grpc-routing
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>状态应反映为 &lt;code>Accepted=True&lt;/code>，表示 Envoy Gateway 正在管理 GatewayClass。&lt;/p>
&lt;p>Gateway 代表基础设施的配置。创建 Gateway 时，&lt;a href="https://www.envoyproxy.io/">Envoy 代理&lt;/a>基础设施由 Envoy Gateway 预配或配置。
&lt;code>gatewayClassName&lt;/code> 定义此 Gateway 使用的 GatewayClass 的名称。检查 Gateway 状态：&lt;/p></description></item><item><title>JWT 身份验证</title><link>/zh/latest/tasks/security/jwt-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/latest/tasks/security/jwt-authentication/</guid><description>&lt;p>此任务提供有关配置 &lt;a href="https://tools.ietf.org/html/rfc7519">JSON Web Token（JWT）&lt;/a>身份验证的说明。
JWT 身份验证在将请求路由到后端服务之前检查传入请求是否具有有效的 JWT。
目前，Envoy Gateway 仅支持通过 HTTP 标头验证 JWT，例如 &lt;code>Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code>。&lt;/p>
&lt;p>Envoy Gateway 引入了一个名为 &lt;a href="/zh/contributions/design/security-policy/">SecurityPolicy&lt;/a> 的新 CRD，允许用户配置 JWT 身份验证。
该实例化资源可以链接到 &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway">Gateway&lt;/a>、&lt;a href="https://gateway-api.sigs.k8s.io/api-types/httproute">HTTPRoute&lt;/a> 或 &lt;a href="https://gateway-api.sigs.k8s.io/api-types/grpcroute">GRPCRoute&lt;/a> 资源。&lt;/p>
&lt;h2 id="prerequisites">先决条件&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>按照&lt;a href="/zh/latest/tasks/quickstart/">快速入门&lt;/a>中的步骤安装 Envoy Gateway 和示例清单。
对于 GRPC - 请按照 &lt;a href="/zh/latest/tasks/traffic/grpc-routing/">GRPC 路由&lt;/a>示例中的步骤操作。
在继续之前，您应该能够使用 HTTP 或 GRPC 查询示例程序后端。&lt;/p>
&lt;h2 id="configuration">配置&lt;a class="td-heading-self-link" href="#configuration" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>通过创建 &lt;a href="/zh/contributions/design/security-policy/">SecurityPolicy&lt;/a> 并将其附加到示例 HTTPRoute 或 GRPCRoute，允许使用具有有效 JWT 的请求。&lt;/p>
&lt;h3 id="httproute">HTTPRoute&lt;a class="td-heading-self-link" href="#httproute" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/envoyproxy/gateway/latest/examples/kubernetes/jwt/jwt.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>已创建两个 HTTPRoute，一个用于 &lt;code>/foo&lt;/code>，另一个用于 &lt;code>/bar&lt;/code>。
已创建 SecurityPolicy 并以 HTTPRoute foo 为目标来验证对 &lt;code>/foo&lt;/code> 的请求。
HTTPRoute bar 不是 SecurityPolicy 的目标，并且将允许未经身份验证的请求发送到 &lt;code>/bar&lt;/code>。&lt;/p></description></item></channel></rss>